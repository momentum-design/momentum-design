---
import path from 'path';
import DocsLayout from '../../../../layouts/DocsLayout.astro';

export async function getStaticPaths() {
  const processMDFiles = (compiledContent: string, packageName: string) => compiledContent
    // replace all folders that end with /.md from the build
    .replaceAll('.md', '-md')
    // fix all urls inside the autogenerated API reference to point to correct URL
    .replaceAll('./', `/momentum-design/en/docs/api-reference/${packageName}/`)
    // fix index file (avoids creating a folder index-md)
    .replaceAll('/index-md', '');

  const pages = await Astro.glob('../../../../../../*/docs/markdown/*.md');
  return pages.map((page) => {
    const paths = page.file?.split('/');
    let fileName = paths.pop() || '';
    // go back 2 directories to get the package name
    paths.pop();
    paths.pop();
    const subPackage = paths.pop() || '';

    // avoid creating a folder in the build with /index/index.html
    if (fileName?.includes('index')) {
      fileName = '';
    }

    return {
      params: { slug: path.join(subPackage, fileName?.replaceAll('.md', '-md')) },
      props: { page: { ...page, compiledContent: processMDFiles(page.compiledContent(), subPackage) } },
    };
  });
}
const { page } = Astro.props;
---

<DocsLayout frontmatter={{ description: '', title: '', layout: '' }} headings={page.getHeadings()}>
  <!-- Because we need to replace the contents of the markdown files we import and
   Astro doesn't provide a way to recompile the Component that it returns from the getStaticPaths,
   we're using the compiledContent instead (which returns HTML as string), replace the things we
   need to replace, and use the fragment to inject the HTML.
  -->
  <Fragment set:html={page.compiledContent} />
</DocsLayout>
