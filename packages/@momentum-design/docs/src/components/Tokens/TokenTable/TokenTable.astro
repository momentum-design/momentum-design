---
import { UnThemedColorToken, ThemedColorToken } from "../../../types/tokens";
import "./TokenTable.css";
import TokenTableRow from "./TokenTableRow.astro";


type Props = {
  name: string;
  headings: string[];
  tokens: ThemedColorToken | UnThemedColorToken;
  themed?: boolean;
  shouldIncludePrefix?: boolean;
};

const { name, headings, tokens, themed = false, shouldIncludePrefix = false } = Astro.props as Props;
const lowerCaseName = name.toLowerCase().replace(" ", "-");
const prefix = shouldIncludePrefix ? lowerCaseName : "";
const id = `#${lowerCaseName}`;

const getTokenName = (names: string[]): string => {
  return names.filter((name) => !!name).join("-");
};
---

<>
  <a href={`#${id}`} class="section-heading">
    <h2 id={id}>{name}</h2>
  </a>
  {
    themed ? (
      <div class="themedTokenTableWrapper">
        {Object.entries(tokens as ThemedColorToken).map(([groupName, themeVariations]) => {
          return (
            <div>
              <h3>{groupName}</h3>
              {Object.entries(themeVariations).map(([theme, variations]) => {
                return (
                  <>
                    <p>{theme}</p>
                    <div class="gradientThemeWrapper">
                      <table>
                        <tr>
                          {headings.map((heading) => (
                            <th>{heading}</th>
                          ))}
                        </tr>
                        {Object.entries(variations).map(([variationName, variation]) => (
                          <TokenTableRow
                            headings={headings}
                            tokenType="color"
                            tokenValue={variation?.value}
                            tokenName={getTokenName([prefix, groupName, theme, variationName])}
                          />
                        ))}
                      </table>
                    </div>
                  </>
                );
              })}
            </div>
          );
        })}
      </div>
    ) : (
      <div class="tokenTable">
        {Object.entries(tokens as UnThemedColorToken).map(([groupName, groupTokens]) => {
          return (
            <table>
              <tr>
                {headings.map((heading) => (
                  <th>{heading}</th>
                ))}
              </tr>
              {Object.entries(groupTokens).map(([subGroupName, token]) => {
                return (
                  <TokenTableRow
                    headings={headings}
                    tokenType="color"
                    tokenValue={token?.value}
                    tokenName={getTokenName([prefix, groupName, subGroupName])}
                  />
                );
              })}
            </table>
          );
        })}
      </div>
    )
  }
</>
