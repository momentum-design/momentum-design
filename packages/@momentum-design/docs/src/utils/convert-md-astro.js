const fs = require('fs');
const glob = require('glob');

// get a list of all the files in the current directory
const getAstroMDTemplate = (title) => `---
  title:  ${title}
  description: This file was autogenerated.
  layout: ../../../../../layouts/DocsLayout.astro
---
`;

// get the first command line argument (i.e. the string to be appended)
const title = process.argv[2];
const path = process.argv[3];

console.log({ title, path, ps: process.cwd() });
const finalPath = `${process.cwd()}/${path}`;
console.log(finalPath);

glob(`${finalPath}*.md`, async (err, filePaths) => {
  console.log(filePaths);

  // get a list of all the files in the current directory
  const files = await Promise.all(filePaths.map((file) => new Promise((resolve, reject) => {
    fs.readFile(file, (error, data) => {
      if (error) {
        reject(error);
      } else {
        resolve({ path: file, data });
      }
    });
  })));

  files.forEach(({ path }) => {
  // only process markdown files
    // read the file path
    const content = fs.readFileSync(path, 'utf-8');
    let fixed = content;

    if (path.includes('index')) {
      const match = (match) => `./${title.split('/').pop()}${match.replace(/\.\//, '/')}`;

      fixed = content.replace(/\..*.md/g, match);
    }

    // append the string at the top of the file
    const updatedContent = `${getAstroMDTemplate(path)}\n${fixed.replace(/\.md/g, '')}`;

    // save the updated file content
    fs.writeFileSync(path, updatedContent);
  });
});
