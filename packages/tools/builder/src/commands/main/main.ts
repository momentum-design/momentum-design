import { Command } from '@momentum-design/common';
import type { CommandOptions, CommandParams } from '@momentum-design/common';

import Definition from '../definition';

import CONSTANTS from './constants';
import type { Options, Params } from './types';

/**
 * The Main command class to be used as an entry point for CLI operation.
 *
 * @beta
 */
class Main extends Command<Options, Params> {
  /**
   * Construct a new Main command executor.
   */
  public constructor() {
    super(Main.CONSTANTS.OPTIONS);
  }

  /**
   * Prepare processed results into a emitable string.
   *
   * @remarks
   * This method intends for the results of each executed command to be emitted
   * with an additional blank line between each output.
   *
   * @param results - Data generated by the `this.process()` method.
   * @returns - Promise resolving to a string to be emitted.
   */
  public prepare(results: Array<string>): Promise<string> {
    return Promise.resolve(results.join('\n\n'));
  }

  /**
   * Generate data based on the provided CLI arguments.
   *
   * @remarks
   * This method is designed to iterate over a collection of parameters that
   * call various flows for building engineer-consumable assets. This
   * indicates that multiple flows can be combined for a single run-time for
   * deliverying assets if needed.
   *
   * @returns - Data generated during the processing stage of this command.
   */
  public process(): Promise<string> {
    const promises = Promise.all(Object.entries(this.params).filter((entry) => entry[1] === true)
      .map((entry) => {
        const [command] = entry;
        let promise: Promise<string>;
        let handler: Command<CommandOptions, CommandParams>;

        switch (command) {
          case Main.CONSTANTS.COMMANDS.DEFINITION:
            handler = new Definition();
            promise = handler.process().then((results) => handler.prepare(results));
            break;

          default:
            promise = Promise.reject(new Error(`command "${command}" is not supported`));
        }

        return promise;
      }));

    return promises.then((results) => this.prepare(results));
  }

  /**
   * Constants associated with the Main command class.
   */
  public static override get CONSTANTS(): typeof CONSTANTS {
    return structuredClone(CONSTANTS);
  }
}

export default Main;
