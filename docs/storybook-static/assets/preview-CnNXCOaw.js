import{s as y}from"./chunk-L4EGOTBX-9DS_KiQO.js";import"./entry-preview-BI3Ia3go.js";import{k as h}from"./lit-element-D5KKan5q.js";import"./index-Bd51EExS.js";import"./index-CrGGhY7N.js";import"./directive-helpers-Bb6vhctq.js";import"./index-DrFu-skq.js";import"./property-Bj3TGwkg.js";import"./state-CmYk530Z.js";import"./provider.component-DrWB4byV.js";import"./create-context-89xeped_.js";import"./iconprovider.component-BtAZSWEH.js";const g="1.0.0",x="",k=[{kind:"javascript-module",path:"components/accordion/accordion.component.js",declarations:[{kind:"class",description:`An accordion contains a header and body section with a focusable heading that can be expanded or collapsed.

The header section contains:
- Prefix Icon
- Header Text
- Leading Slot - Contains the leading controls of the accordion on the header section. This will be placed on the leading side, after the header text.
- Trailing Slot - Contains the trailing controls of the accordion on the header section. This will be placed on the trailing side, before the expand/collapse button.

The body section contains:
- Default slot - User can place any content inside the body section.

The accordion can be expanded or collapsed. The visibility of the body section can be controlled by \`expanded\` attribute. <br/>
There are two types of variants based on that the border styling of the accordion gets reflected. <br/>
There are two sizes of accordion, one is small and the other is large.
Small size has a padding of 1rem (16px) and large size has a padding of 1.5rem (24px) for the body section of accordion.

By default, the header text in the accordion heading is of H3 with an aria-level of '3'.
If this accordion is placed on any other level in the entire webpage, then do adjust the aria-level number based on that.

An accordion can be disabled, and when it's disabled, the header section will not be clickable.

If you don't need any controls on your accordion heading, then it's advised to use \`accordionbutton\` component.

If an accordion is expanded by default, then the screen reader might loose focus when toggling the visibilty of the accordion.`,name:"Accordion",cssProperties:[{description:"The border color of the accordion.",name:"--mdc-accordionbutton-border-color",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The hover color of the accordion.",name:"--mdc-accordionbutton-hover-color",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The active color of the accordion.",name:"--mdc-accordionbutton-active-color",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The disabled color of the accordion.",name:"--mdc-accordionbutton-disabled-color",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}}],cssParts:[{description:"The header section of the accordion.",name:"header-section",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The leading header of the accordion.",name:"leading-header",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The trailing header of the accordion.",name:"trailing-header",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The trailing header button of the accordion.",name:"trailing-header__button"},{description:"The body section of the accordion.",name:"body-section",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The header button section of the accordion button.",name:"header-button-section",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{description:"The trailing header icon of the accordion button.",name:"trailing-header__icon",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}}],slots:[{description:"The leading controls slot of the accordion on the header section.",name:"leading-controls"},{description:"The trailing controls slot of the accordion on the header section.",name:"trailing-controls"},{description:"The default slot contains the body section of the accordion. User can place anything inside this body slot.",name:"default",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}}],members:[{kind:"method",name:"renderHeader",privacy:"protected",return:{type:{text:""}},description:`Renders the header section of the accordion.
This includes the leading icon, text and controls, and the trailing controls.
The trailing controls include the expand/collapse button.
The button is disabled if the accordion is disabled.
The button is also given the aria-controls attribute set to the id of the body section.
The button is also given the aria-expanded attribute set to the expanded state of the accordion.
The prefix icon of the button is set to the expanded state of the accordion.`,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",attribute:"size",reflects:!0,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'default'",attribute:"variant",reflects:!0,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"dataAriaLevel",type:{text:"number"},description:"The aria level of the accordion component.",default:"3",attribute:"data-aria-level",reflects:!0,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"expanded",type:{text:"boolean"},description:"The visibility of the accordion button.",default:"false",attribute:"expanded",reflects:!0,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"headerText",type:{text:"string | undefined"},description:"The header text of the accordion item.",attribute:"header-text",reflects:!0,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the header text.",attribute:"prefix-icon",inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"handleHeaderClick",privacy:"protected",return:{type:{text:"void"}},description:"Handles the click event of the header section.\nIf the accordion is disabled, it will not toggle the expanded state.\nIt will dispatch the `shown` event with the current expanded state.",inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"dispatchHeaderClickEvent",privacy:"private",return:{type:{text:"void"}},description:"Dispatches the `shown` event with the current expanded state.\nThe event is cancelable and bubbles.\nThe event detail contains the current expanded state.",inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The KeyboardEvent fired."}],description:`Handles the keydown event of the component.
If the key pressed is either Enter or Space, it calls the handleHeaderClick method.
This allows keyboard users to toggle the accordion button using these keys.`,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"renderIcon",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}},parameters:[{name:"iconName",optional:!0,type:{text:"IconNames"}}],inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"renderHeadingText",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}},inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"getArrowIconName",privacy:"protected",return:{type:{text:""}},description:`Returns the icon name based on the expanded state.
If the accordion button is disabled, it always returns the arrow down icon.
Otherwise, it returns the arrow up icon if the accordion button is expanded, otherwise the arrow down icon.`,inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}},{kind:"method",name:"renderBody",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}},inheritedFrom:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}}],events:[{description:"(React: onShown) This event is triggered when the accordion is expanded.",name:"shown",reactName:"onShown",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}}],superclass:{name:"AccordionButton",module:"/src/components/accordionbutton/accordionbutton.component"},tagName:"mdc-accordion",jsDoc:`/**
 * An accordion contains a header and body section with a focusable heading that can be expanded or collapsed.
 *
 * The header section contains:
 * - Prefix Icon
 * - Header Text
 * - Leading Slot - Contains the leading controls of the accordion on the header section. This will be placed on the leading side, after the header text.
 * - Trailing Slot - Contains the trailing controls of the accordion on the header section. This will be placed on the trailing side, before the expand/collapse button.
 *
 * The body section contains:
 * - Default slot - User can place any content inside the body section.
 *
 * The accordion can be expanded or collapsed. The visibility of the body section can be controlled by \`expanded\` attribute. <br/>
 * There are two types of variants based on that the border styling of the accordion gets reflected. <br/>
 * There are two sizes of accordion, one is small and the other is large.
 * Small size has a padding of 1rem (16px) and large size has a padding of 1.5rem (24px) for the body section of accordion.
 *
 * By default, the header text in the accordion heading is of H3 with an aria-level of '3'.
 * If this accordion is placed on any other level in the entire webpage, then do adjust the aria-level number based on that.
 *
 * An accordion can be disabled, and when it's disabled, the header section will not be clickable.
 *
 * If you don't need any controls on your accordion heading, then it's advised to use \`accordionbutton\` component.
 *
 * If an accordion is expanded by default, then the screen reader might loose focus when toggling the visibilty of the accordion.
 *
 * @tagname mdc-accordion
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @slot leading-controls - The leading controls slot of the accordion on the header section.
 * @slot trailing-controls - The trailing controls slot of the accordion on the header section.
 * @slot default - The default slot contains the body section of the accordion. User can place anything inside this body slot.
 *
 * @event shown - (React: onShown) This event is triggered when the accordion is expanded.
 *
 * @cssproperty --mdc-accordionbutton-border-color - The border color of the accordion.
 * @cssproperty --mdc-accordionbutton-hover-color - The hover color of the accordion.
 * @cssproperty --mdc-accordionbutton-active-color - The active color of the accordion.
 * @cssproperty --mdc-accordionbutton-disabled-color - The disabled color of the accordion.
 *
 * @csspart header-section - The header section of the accordion.
 * @csspart leading-header - The leading header of the accordion.
 * @csspart trailing-header - The trailing header of the accordion.
 * @csspart trailing-header__button - The trailing header button of the accordion.
 * @csspart body-section - The body section of the accordion.
 */`,customElement:!0,attributes:[{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",fieldName:"size",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'default'",fieldName:"variant",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{name:"data-aria-level",type:{text:"number"},description:"The aria level of the accordion component.",default:"3",fieldName:"dataAriaLevel",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{name:"expanded",type:{text:"boolean"},description:"The visibility of the accordion button.",default:"false",fieldName:"expanded",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{name:"header-text",type:{text:"string | undefined"},description:"The header text of the accordion item.",fieldName:"headerText",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the header text.",fieldName:"prefixIcon",inheritedFrom:{name:"AccordionButton",module:"src/components/accordionbutton/accordionbutton.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Accordion",module:"components/accordion/accordion.component.js"}}]},{kind:"javascript-module",path:"components/accordionbutton/accordionbutton.component.js",declarations:[{kind:"class",description:`An accordion button contains a header and body section with optional slots inside the heading which are focusable.

The header section contains:
- Prefix Icon
- Header Text

The body section contains:
- Default slot - User can place any content inside the body section.

The accordion button can be expanded or collapsed. The visibility of the body section can be controlled by \`expanded\` attribute. <br/>
There are two types of variants based on that the border styling of the accordion gets reflected. <br/>
There are two sizes of accordion, one is small and the other is large.
Small size has a padding of 1rem (16px) and large size has a padding of 1.5rem (24px) for the body section of accordion.

By default, the header text in the accordion heading is of H3 with an aria-level of '3'.
If this accordion is placed on any other level in the entire webpage, then do adjust the aria-level number based on that.

An accordion can be disabled, and when it's disabled, the header section will not be clickable.

If you do need any controls on your accordion heading, then it's advised to use \`accordion\` component.

If an accordion button is expanded by default, then the screen reader might loose focus when toggling the visibilty of the accordion button.`,name:"AccordionButton",cssProperties:[{description:"The border color of the accordion button.",name:"--mdc-accordionbutton-border-color"},{description:"The hover color of the accordion button.",name:"--mdc-accordionbutton-hover-color"},{description:"The active color of the accordion button.",name:"--mdc-accordionbutton-active-color"},{description:"The disabled color of the accordion button.",name:"--mdc-accordionbutton-disabled-color"}],cssParts:[{description:"The header section of the accordion button.",name:"header-section"},{description:"The header button section of the accordion button.",name:"header-button-section"},{description:"The leading header of the accordion button.",name:"leading-header"},{description:"The trailing header of the accordion button.",name:"trailing-header"},{description:"The trailing header icon of the accordion button.",name:"trailing-header__icon"},{description:"The body section of the accordion button.",name:"body-section"}],slots:[{description:"The default slot contains the body section of the accordion. User can place anything inside this body slot.",name:"default"}],members:[{kind:"field",name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",attribute:"size",reflects:!0},{kind:"field",name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'default'",attribute:"variant",reflects:!0},{kind:"field",name:"dataAriaLevel",type:{text:"number"},description:"The aria level of the accordion component.",default:"3",attribute:"data-aria-level",reflects:!0},{kind:"field",name:"expanded",type:{text:"boolean"},description:"The visibility of the accordion button.",default:"false",attribute:"expanded",reflects:!0},{kind:"field",name:"headerText",type:{text:"string | undefined"},description:"The header text of the accordion item.",attribute:"header-text",reflects:!0},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the header text.",attribute:"prefix-icon"},{kind:"method",name:"handleHeaderClick",privacy:"protected",return:{type:{text:"void"}},description:"Handles the click event of the header section.\nIf the accordion is disabled, it will not toggle the expanded state.\nIt will dispatch the `shown` event with the current expanded state."},{kind:"method",name:"dispatchHeaderClickEvent",privacy:"private",return:{type:{text:"void"}},description:"Dispatches the `shown` event with the current expanded state.\nThe event is cancelable and bubbles.\nThe event detail contains the current expanded state."},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The KeyboardEvent fired."}],description:`Handles the keydown event of the component.
If the key pressed is either Enter or Space, it calls the handleHeaderClick method.
This allows keyboard users to toggle the accordion button using these keys.`},{kind:"method",name:"renderIcon",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}},parameters:[{name:"iconName",optional:!0,type:{text:"IconNames"}}]},{kind:"method",name:"renderHeadingText",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}}},{kind:"method",name:"renderHeader",privacy:"protected",return:{type:{text:"TemplateResult"}}},{kind:"method",name:"getArrowIconName",privacy:"protected",return:{type:{text:""}},description:`Returns the icon name based on the expanded state.
If the accordion button is disabled, it always returns the arrow down icon.
Otherwise, it returns the arrow up icon if the accordion button is expanded, otherwise the arrow down icon.`},{kind:"method",name:"renderBody",privacy:"protected",return:{type:{text:"TemplateResult | typeof nothing"}}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],events:[{description:"(React: onShown) This event is triggered when the accordion button is expanded.",name:"shown",reactName:"onShown"}],attributes:[{name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",fieldName:"size"},{name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'default'",fieldName:"variant"},{name:"data-aria-level",type:{text:"number"},description:"The aria level of the accordion component.",default:"3",fieldName:"dataAriaLevel"},{name:"expanded",type:{text:"boolean"},description:"The visibility of the accordion button.",default:"false",fieldName:"expanded"},{name:"header-text",type:{text:"string | undefined"},description:"The header text of the accordion item.",fieldName:"headerText"},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the header text.",fieldName:"prefixIcon"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-accordionbutton",jsDoc:`/**
 * An accordion button contains a header and body section with optional slots inside the heading which are focusable.
 *
 * The header section contains:
 * - Prefix Icon
 * - Header Text
 *
 * The body section contains:
 * - Default slot - User can place any content inside the body section.
 *
 * The accordion button can be expanded or collapsed. The visibility of the body section can be controlled by \`expanded\` attribute. <br/>
 * There are two types of variants based on that the border styling of the accordion gets reflected. <br/>
 * There are two sizes of accordion, one is small and the other is large.
 * Small size has a padding of 1rem (16px) and large size has a padding of 1.5rem (24px) for the body section of accordion.
 *
 * By default, the header text in the accordion heading is of H3 with an aria-level of '3'.
 * If this accordion is placed on any other level in the entire webpage, then do adjust the aria-level number based on that.
 *
 * An accordion can be disabled, and when it's disabled, the header section will not be clickable.
 *
 * If you do need any controls on your accordion heading, then it's advised to use \`accordion\` component.
 *
 * If an accordion button is expanded by default, then the screen reader might loose focus when toggling the visibilty of the accordion button.
 *
 * @tagname mdc-accordionbutton
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @slot default - The default slot contains the body section of the accordion. User can place anything inside this body slot.
 *
 * @event shown - (React: onShown) This event is triggered when the accordion button is expanded.
 *
 * @cssproperty --mdc-accordionbutton-border-color - The border color of the accordion button.
 * @cssproperty --mdc-accordionbutton-hover-color - The hover color of the accordion button.
 * @cssproperty --mdc-accordionbutton-active-color - The active color of the accordion button.
 * @cssproperty --mdc-accordionbutton-disabled-color - The disabled color of the accordion button.
 *
 * @csspart header-section - The header section of the accordion button.
 * @csspart header-button-section - The header button section of the accordion button.
 * @csspart leading-header - The leading header of the accordion button.
 * @csspart trailing-header - The trailing header of the accordion button.
 * @csspart trailing-header__icon - The trailing header icon of the accordion button.
 * @csspart body-section - The body section of the accordion button.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"AccordionButton",module:"components/accordionbutton/accordionbutton.component.js"}}]},{kind:"javascript-module",path:"components/accordiongroup/accordiongroup.component.js",declarations:[{kind:"class",description:`An accordion group is a vertically stacked set of interactive headings that each contain a header and body content.
Each heading of the accordion acts as a control that enable users to expand or hide their associated body sections of content.
Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page.

- Default Slot: The accordion group component only accepts, \`accordion\` and \`accordionbutton\` components as the children, rest are ignored.

There are three types of variants:
- Stacked - Each accordion will have a gap of 1.5rem (24px).
- Borderless - Each accordion will not have any border and the group will also not have any border.
- Contained - Each accordion will have no gap in between them and the border of the entire accordiongroup will be continuous.

There are two types of sizes:
- Small: Small size has a padding of 1rem (16px) for both heading and body sections.
- Large: Large size has a padding of 1.5rem (24px) for both heading and body sections.

The variant and size will be applied to all accordions inside this accordion group.
To show/expand more than one accordion at any given time, then set \`allow-multiple\` to \`true\`. By default, it's \`false\`.

If you don't need any controls on your accordion heading, then it's advised to use \`accordionbutton\` component.

If the first accordion of the accordion group is expanded by default, then the screen reader might loose focus when toggling the visibilty of the first accordion.`,name:"AccordionGroup",cssProperties:[{description:"The border color of the entire accordiongroup",name:"--mdc-accordiongroup-border-color"}],slots:[{description:"The default slot can contain the `accordion` or `accordionbutton` components.",name:"default"}],members:[{kind:"field",name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",attribute:"size",reflects:!0},{kind:"field",name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'stacked'",attribute:"variant",reflects:!0},{kind:"field",name:"allowMultiple",type:{text:"boolean"},default:"false",description:"If true, multiple accordion items can be visible at the same time.",attribute:"allow-multiple",reflects:!0},{kind:"method",name:"handleAccordionExpanded",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The event object from the 'shown' event."}],description:"Handles the 'shown' event for accordion items.\nIf `allowMultiple` is false, ensures that only one accordion item\nremains expanded by collapsing all other expanded items when a new item is expanded."},{kind:"method",name:"setChildrenAccordionAttributes",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"attributeName",type:{text:"string"},description:"The name of the attribute to set."},{name:"attributeValue",type:{text:"string"},description:"The value to set the attribute to."}],description:"Sets the given attribute on all child accordion or accordionbutton components."}],attributes:[{name:"size",type:{text:"Size"},description:"The size of the accordion item.",default:"'small'",fieldName:"size"},{name:"variant",type:{text:"Variant"},description:"The variant of the accordion item. Based on the variant, the styling of the accordion gets changed.",default:"'stacked'",fieldName:"variant"},{name:"allow-multiple",type:{text:"boolean"},default:"false",description:"If true, multiple accordion items can be visible at the same time.",fieldName:"allowMultiple"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-accordiongroup",jsDoc:`/**
 * An accordion group is a vertically stacked set of interactive headings that each contain a header and body content.
 * Each heading of the accordion acts as a control that enable users to expand or hide their associated body sections of content.
 * Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page.
 *
 * - Default Slot: The accordion group component only accepts, \`accordion\` and \`accordionbutton\` components as the children, rest are ignored.
 *
 * There are three types of variants:
 * - Stacked - Each accordion will have a gap of 1.5rem (24px).
 * - Borderless - Each accordion will not have any border and the group will also not have any border.
 * - Contained - Each accordion will have no gap in between them and the border of the entire accordiongroup will be continuous.
 *
 * There are two types of sizes:
 * - Small: Small size has a padding of 1rem (16px) for both heading and body sections.
 * - Large: Large size has a padding of 1.5rem (24px) for both heading and body sections.
 *
 * The variant and size will be applied to all accordions inside this accordion group.
 * To show/expand more than one accordion at any given time, then set \`allow-multiple\` to \`true\`. By default, it's \`false\`.
 *
 * If you don't need any controls on your accordion heading, then it's advised to use \`accordionbutton\` component.
 *
 * If the first accordion of the accordion group is expanded by default, then the screen reader might loose focus when toggling the visibilty of the first accordion.
 *
 * @tagname mdc-accordiongroup
 *
 * @slot default - The default slot can contain the \`accordion\` or \`accordionbutton\` components.
 *
 * @cssproperty --mdc-accordiongroup-border-color - The border color of the entire accordiongroup
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"AccordionGroup",module:"components/accordiongroup/accordiongroup.component.js"}}]},{kind:"javascript-module",path:"components/alertchip/alertchip.component.js",declarations:[{kind:"class",description:`mdc-alertchip component is an interactive chip that consumers can use to represent an alert.

- It supports a leading icon along with label.
- It supports 5 variants of alerts - neutral, warning, error, success, and informational

This component is built by extending Buttonsimple.`,name:"AlertChip",cssProperties:[{description:"The color of the label text",name:"--mdc-chip-color"},{description:"The color of the icon",name:"--mdc-chip-icon-color"},{description:"The border color of the alertchip",name:"--mdc-chip-border-color"},{description:"The background color of the alertchip",name:"--mdc-chip-background-color"}],cssParts:[{description:"The alert icon",name:"icon"},{description:"The text label of the alertchip",name:"label"}],members:[{kind:"field",name:"variant",type:{text:"VariantType"},description:`The variant of the alertchip. It supports 5 variants
- neutral
- warning
- error
- success
- informational`,default:"neutral",attribute:"variant"},{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The visible label text of the alertchip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,attribute:"label"},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the chip is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the chip.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the chip.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the chip receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],attributes:[{name:"variant",type:{text:"VariantType"},description:`The variant of the alertchip. It supports 5 variants
- neutral
- warning
- error
- success
- informational`,default:"neutral",fieldName:"variant"},{name:"label",type:{text:"string"},default:"''",description:`The visible label text of the alertchip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,fieldName:"label"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-alertchip",jsDoc:`/**
 * mdc-alertchip component is an interactive chip that consumers can use to represent an alert.
 *
 * - It supports a leading icon along with label.
 * - It supports 5 variants of alerts - neutral, warning, error, success, and informational
 *
 * This component is built by extending Buttonsimple.
 *
 * @tagname mdc-alertchip
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @cssproperty --mdc-chip-color - The color of the label text
 * @cssproperty --mdc-chip-icon-color - The color of the icon
 * @cssproperty --mdc-chip-border-color - The border color of the alertchip
 * @cssproperty --mdc-chip-background-color - The background color of the alertchip
 *
 * @csspart icon - The alert icon
 * @csspart label - The text label of the alertchip
 *
 * @event click - (React: onClick) This event is dispatched when the chip is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the chip.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the chip.
 * @event focus - (React: onFocus) This event is dispatched when the chip receives focus.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"AlertChip",module:"components/alertchip/alertchip.component.js"}}]},{kind:"javascript-module",path:"components/animation/animation.component.js",declarations:[{kind:"class",description:`The \`mdc-animation\` component is a wrapper around the Lottie animation library.
It fetches the animation data dynamically based on the provided name and renders it.
This is a display only component that does not have any interactive functionality.
From accessibility perspective, (by default) it is a decorative image component.`,name:"Animation",members:[{kind:"field",name:"name",type:{text:"AnimationNames | undefined"},description:"Name of the animation (= filename)",attribute:"name",reflects:!0},{kind:"field",name:"loop",type:{text:"LoopType | undefined"},description:`How many times to loop the animation
- "true" - infinite
- "false" - no loop
- number - number of times to loop`,attribute:"loop",reflects:!0},{kind:"field",name:"autoplay",type:{text:"boolean | undefined"},description:"Weather start the animation automatically",attribute:"autoplay",reflects:!0},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"field",name:"ariaLabelledBy",type:{text:"string | null"},default:"null",description:"Aria-labelledby attribute to be set for accessibility",attribute:"aria-labelledby"},{kind:"field",name:"lottieInstance",type:{text:"AnimationItem | undefined"},privacy:"private",description:"Lottie animation instance"},{kind:"field",name:"containerRef",type:{text:"Ref<HTMLDivElement>"},privacy:"private",description:"Container for the animation"},{kind:"field",name:"animation",description:"Exposed API of the animation library (lottie)",readonly:!0},{kind:"method",name:"getLoopValue",privacy:"private"},{kind:"method",name:"onLoadSuccessHandler",privacy:"private",parameters:[{name:"animationData",type:{text:"any"}}],description:"Create new lotty instance for the loaded data"},{kind:"method",name:"onLoadFailHandler",privacy:"private",parameters:[{name:"error",type:{text:"Error"}}],description:"Error handler for animation loading"},{kind:"method",name:"getAnimationData",privacy:"private",description:"Import animation data dynamically"},{kind:"field",name:"onCompleteHandler",description:`Re-dispatch the complete event from the animation library

This handler called with the animation instance instead of the component instance
so we need to bind it to the component instance. The arrow function just does that.`}],events:[{name:"load",type:{text:"CustomEvent"},description:"(React: onLoad) This event is dispatched when the animation is loaded",reactName:"onLoad"},{description:"(React: onComplete) This event is dispatched when all animation loops completed",name:"complete",reactName:"onComplete"},{description:"(React: onError) This event is dispatched when animation loading failed",name:"error",reactName:"onError"}],attributes:[{name:"name",type:{text:"AnimationNames | undefined"},description:"Name of the animation (= filename)",fieldName:"name"},{name:"loop",type:{text:"LoopType | undefined"},description:`How many times to loop the animation
- "true" - infinite
- "false" - no loop
- number - number of times to loop`,fieldName:"loop"},{name:"autoplay",type:{text:"boolean | undefined"},description:"Weather start the animation automatically",fieldName:"autoplay"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:"Aria-labelledby attribute to be set for accessibility",fieldName:"ariaLabelledBy"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-animation",jsDoc:`/**
 * The \`mdc-animation\` component is a wrapper around the Lottie animation library.
 * It fetches the animation data dynamically based on the provided name and renders it.
 * This is a display only component that does not have any interactive functionality.
 * From accessibility perspective, (by default) it is a decorative image component.
 *
 * @tagname mdc-animation
 *
 * @event load - (React: onLoad) This event is dispatched when the animation is loaded
 * @event complete - (React: onComplete) This event is dispatched when all animation loops completed
 * @event error - (React: onError) This event is dispatched when animation loading failed
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Animation",module:"components/animation/animation.component.js"}}]},{kind:"javascript-module",path:"components/appheader/appheader.component.js",declarations:[{kind:"class",description:`The \`mdc-appheader\` component provides a structured and accessible app header layout.
It consists of three primary sections: leading, center, and trailing.

- The **leading section** typically holds a **brand logo**, **brand name** or **menu icon**.
- The **center section** can contain a **search bar**, **icons** or action controls.
- The **trailing section** generally includes a **profile avatar**, **additional icons** or **action controls**.`,name:"Appheader",cssParts:[{description:"The main container for styling the header.",name:"container"},{description:"The leading section of the header.",name:"leading-section"},{description:"The center section of the header.",name:"center-section"},{description:"The trailing section of the header.",name:"trailing-section"}],slots:[{description:"Slot for the leading section (e.g., brand logo, brand name).",name:"leading"},{description:"Slot for the center section (e.g., search bar, icons).",name:"center"},{description:"Slot for the trailing section (e.g., profile avatar, icons).",name:"trailing"}],members:[],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-appheader",jsDoc:`/**
 * The \`mdc-appheader\` component provides a structured and accessible app header layout.
 * It consists of three primary sections: leading, center, and trailing.
 *
 * - The **leading section** typically holds a **brand logo**, **brand name** or **menu icon**.
 * - The **center section** can contain a **search bar**, **icons** or action controls.
 * - The **trailing section** generally includes a **profile avatar**, **additional icons** or **action controls**.
 *
 * @tagname mdc-appheader
 *
 * @slot leading - Slot for the leading section (e.g., brand logo, brand name).
 * @slot center - Slot for the center section (e.g., search bar, icons).
 * @slot trailing - Slot for the trailing section (e.g., profile avatar, icons).
 *
 * @csspart container - The main container for styling the header.
 * @csspart leading-section - The leading section of the header.
 * @csspart center-section - The center section of the header.
 * @csspart trailing-section - The trailing section of the header.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Appheader",module:"components/appheader/appheader.component.js"}}]},{kind:"javascript-module",path:"components/avatar/avatar.component.js",declarations:[{kind:"class",description:`The \`mdc-avatar\` component is used to represent a person or a space.
An avatar can be an icon, initials, counter and photo.

To set the photo of an avatar,
you need to set "src" attribute.

While the avatar image is loading, as a placeholder,
we will show the initials text.
If the initials are not specified then,
we will show \`user-regular\` icon as a placeholder.

By default, if there are no attributes specified,
then the default avatar will be an icon with \`user-regular\` name.

The avatar component is non clickable and non interactive/focusable component.
If the avatar is typing, then the loading indicator will be displayed.
If the counter type avatar is set to a negative number, then we will display 0.
The presence indicator will be hidden when the counter property is set.`,name:"Avatar",cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-avatar-default-background-color"},{description:"Allows customization of the default foreground color.",name:"--mdc-avatar-default-foreground-color"},{description:"Allows customization of the loading indicator background color.",name:"--mdc-avatar-loading-indicator-background-color"},{description:"Allows customization of the loading indicator foreground color.",name:"--mdc-avatar-loading-indicator-foreground-color"},{description:"Allows customization of the loading overlay background color.",name:"--mdc-avatar-loading-overlay-background-color"}],cssParts:[{description:"The main content of the avatar.",name:"content"},{description:"The photo of the avatar.",name:"photo"},{description:"The presence indicator of the avatar.",name:"presence"},{description:"The wrapper for the loading indicator.",name:"loading-wrapper"},{description:"The loading indicator of the avatar.",name:"loader"}],members:[{kind:"field",name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,attribute:"src",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",attribute:"initials",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",attribute:"presence",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"size",type:{text:"AvatarSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",attribute:"counter",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"isTyping",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",attribute:"is-typing",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}}],mixins:[{name:"AvatarComponentMixin",module:"/src/utils/mixins/AvatarComponentMixin"},{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-avatar",jsDoc:`/**
 * The \`mdc-avatar\` component is used to represent a person or a space.
 * An avatar can be an icon, initials, counter and photo.
 *
 * To set the photo of an avatar,
 * you need to set "src" attribute.
 *
 * While the avatar image is loading, as a placeholder,
 * we will show the initials text.
 * If the initials are not specified then,
 * we will show \`user-regular\` icon as a placeholder.
 *
 * By default, if there are no attributes specified,
 * then the default avatar will be an icon with \`user-regular\` name.
 *
 * The avatar component is non clickable and non interactive/focusable component.
 * If the avatar is typing, then the loading indicator will be displayed.
 * If the counter type avatar is set to a negative number, then we will display 0.
 * The presence indicator will be hidden when the counter property is set.
 *
 * @dependency mdc-icon
 * @dependency mdc-presence
 * @dependency mdc-text
 *
 * @tagname mdc-avatar
 *
 * @cssproperty --mdc-avatar-default-background-color - Allows customization of the default background color.
 * @cssproperty --mdc-avatar-default-foreground-color - Allows customization of the default foreground color.
 * @cssproperty --mdc-avatar-loading-indicator-background-color -
 *  Allows customization of the loading indicator background color.
 * @cssproperty --mdc-avatar-loading-indicator-foreground-color -
 *  Allows customization of the loading indicator foreground color.
 * @cssproperty --mdc-avatar-loading-overlay-background-color -
 *  Allows customization of the loading overlay background color.
 *
 * @csspart content - The main content of the avatar.
 * @csspart photo - The photo of the avatar.
 * @csspart presence - The presence indicator of the avatar.
 * @csspart loading-wrapper - The wrapper for the loading indicator.
 * @csspart loader - The loading indicator of the avatar.
 */`,customElement:!0,attributes:[{name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,fieldName:"src",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",fieldName:"initials",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",fieldName:"presence",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"size",type:{text:"AvatarSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",fieldName:"size",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",fieldName:"counter",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"is-typing",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",fieldName:"isTyping",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Avatar",module:"components/avatar/avatar.component.js"}}]},{kind:"javascript-module",path:"components/avatarbutton/avatarbutton.component.js",declarations:[{kind:"class",description:"The `mdc-avatarbutton` component is an interactable version of the `mdc-avatar` component.\n\nThis component is made by extending `buttonsimple` class.\nThe button component acts as a wrapper for the avatar component.\n\nTo override styles of the avatar inside, use the specified css parts.",name:"AvatarButton",cssProperties:[{description:"Background color of the overlay in rest state",name:"--mdc-avatarbutton-overlay-background-color-rest"},{description:"Background color of the overlay in hover state",name:"--mdc-avatarbutton-overlay-background-color-hover"},{description:"Background color of the overlay in active state",name:"--mdc-avatarbutton-overlay-background-color-active"}],cssParts:[{description:"The overlay part of the avatar button.",name:"overlay"},{description:"The main content of the avatar.",name:"content"},{description:"The photo part of the avatar.",name:"photo"},{description:"The presence indicator part of the avatar.",name:"presence"},{description:"The wrapper for the loading indicator of the avatar.",name:"loading-wrapper"},{description:"The loading indicator part of the avatar.",name:"loader"}],members:[{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"method",name:"setSize",privacy:"private",parameters:[{name:"size",type:{text:"AvatarSize"}}]},{kind:"field",name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,attribute:"src",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",attribute:"initials",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",attribute:"presence",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",attribute:"counter",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"isTyping",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",attribute:"is-typing",inheritedFrom:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the avatarbutton is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the avatarbutton.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the avatarbutton.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the avatarbutton receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],attributes:[{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,fieldName:"src",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",fieldName:"initials",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",fieldName:"presence",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"size",type:{text:"ButtonSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",fieldName:"counter",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"is-typing",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",fieldName:"isTyping",inheritedFrom:{name:"AvatarComponentMixin",module:"src/utils/mixins/AvatarComponentMixin.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"AvatarComponentMixin",module:"/src/utils/mixins/AvatarComponentMixin"},{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-avatarbutton",jsDoc:`/**
 * The \`mdc-avatarbutton\` component is an interactable version of the \`mdc-avatar\` component.
 *
 * This component is made by extending \`buttonsimple\` class.
 * The button component acts as a wrapper for the avatar component.
 *
 * To override styles of the avatar inside, use the specified css parts.
 *
 * @dependency mdc-avatar
 *
 * @event click - (React: onClick) This event is dispatched when the avatarbutton is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the avatarbutton.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the avatarbutton.
 * @event focus - (React: onFocus) This event is dispatched when the avatarbutton receives focus.
 *
 * @tagname mdc-avatarbutton
 *
 * @cssproperty --mdc-avatarbutton-overlay-background-color-rest - Background color of the overlay in rest state
 * @cssproperty --mdc-avatarbutton-overlay-background-color-hover - Background color of the overlay in hover state
 * @cssproperty --mdc-avatarbutton-overlay-background-color-active - Background color of the overlay in active state
 *
 * @csspart overlay - The overlay part of the avatar button.
 * @csspart content - The main content of the avatar.
 * @csspart photo - The photo part of the avatar.
 * @csspart presence - The presence indicator part of the avatar.
 * @csspart loading-wrapper - The wrapper for the loading indicator of the avatar.
 * @csspart loader - The loading indicator part of the avatar.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"AvatarButton",module:"components/avatarbutton/avatarbutton.component.js"}}]},{kind:"javascript-module",path:"components/badge/badge.component.js",declarations:[{kind:"class",description:"The `mdc-badge` component is a versatile UI element used to\ndisplay dot, icons, counters, success, warning and error type badge.\n\nSupported badge types:\n- `dot`: Displays a dot notification badge with a blue color.\n- `icon`: Displays a badge with a specified icon using the `icon-name` attribute.\n- `counter`: Displays a badge with a counter value. If the counter exceeds the `max-counter`,\nit shows `maxCounter+`. The maximum value of the counter is 999 and anything above that will be set to `999+`.\n- `success`: Displays a success badge with a check circle icon and green color.\n- `warning`: Displays a warning badge with a warning icon and yellow color.\n- `error`: Displays a error badge with a error legacy icon and red color.\n\nFor `icon`, `success`, `warning` and `error` types, the `mdc-icon` component is used to render the icon.\n\nFor the `counter` type, the `mdc-text` component is used to render the counter value.",name:"Badge",cssProperties:[{description:"The foreground color of the primary badge.",name:"--mdc-badge-primary-foreground-color"},{description:"The background color of the primary badge.",name:"--mdc-badge-primary-background-color"},{description:"The foreground color of the secondary badge.",name:"--mdc-badge-secondary-foreground-color"},{description:"The background color of the secondary badge.",name:"--mdc-badge-secondary-background-color"},{description:"The foreground color of the success badge.",name:"--mdc-badge-success-foreground-color"},{description:"The background color of the success badge.",name:"--mdc-badge-success-background-color"},{description:"The foreground color of the warning badge.",name:"--mdc-badge-warning-foreground-color"},{description:"The background color of the warning badge.",name:"--mdc-badge-warning-background-color"},{description:"The foreground color of the error badge.",name:"--mdc-badge-error-foreground-color"},{description:"The background color of the error badge.",name:"--mdc-badge-error-background-color"},{description:"The background color of the badge overlay.",name:"--mdc-badge-overlay-background-color"}],members:[{kind:"field",name:"type",type:{text:"BadgeType | undefined"},description:"Type of the badge\nCan be `dot` (notification) , `icon`, `counter`, `success`, `warning` or `error`.",attribute:"type",reflects:!0},{kind:"field",name:"variant",type:{text:"IconVariant"},description:"Type of the variant can be `primary` or `secondary`.\nIt defines the background and foreground color of the icon.",default:"primary",attribute:"variant",reflects:!0},{kind:"field",name:"counter",type:{text:"number | undefined"},description:"Counter is the number which can be provided in the badge.",attribute:"counter"},{kind:"field",name:"maxCounter",type:{text:"number"},description:"The maximum number can be set up to 999, anything above that will be rendered as _999+_.\nThe max counter can be `9`, `99` or `999`.",default:"99",attribute:"max-counter",reflects:!0},{kind:"field",name:"overlay",type:{text:"boolean"},default:"false",description:`Overlay is to add a thin outline to the badge.
This will help distinguish between the badge and the button,
where the badge will be layered on top of a button.`,attribute:"overlay"},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"method",name:"getCounterText",privacy:"private",return:{type:{text:""}},parameters:[{name:"maxCounter",type:{text:"number"},description:"the maximum limit which can be displayed on the badge"},{name:"counter",optional:!0,type:{text:"number"},description:"the number to be displayed on the badge"}],description:"If `type` is set to `counter` and if `counter` is greater than `maxCounter`,\nthen it will return a string the maxCounter value as string.\nOtherwise, it will return a string representation of `counter`.\nIf `counter` is not a number, it will return an empty string."},{kind:"method",name:"getBadgeIcon",privacy:"private",return:{type:{text:""}},parameters:[{name:"iconName",type:{text:"string"},description:"the name of the icon from the icon set"},{name:"backgroundClassPostfix",type:{text:"string"},description:"postfix for the class to style the badge icon."}],description:"Method to generate the badge icon."},{kind:"method",name:"getBadgeDot",privacy:"private",return:{type:{text:""}},description:"Method to generate the badge dot template."},{kind:"method",name:"getBadgeCounterText",privacy:"private",return:{type:{text:""}},description:"Method to generate the badge text and counter template."},{kind:"method",name:"setRoleByAriaLabel",privacy:"private",return:{type:{text:"void"}},description:`Method to set the role based on the aria-label provided.
If the aria-label is provided, the role of the element will be 'img'.
Otherwise, the role will be null.`},{kind:"method",name:"getBadgeContentBasedOnType",privacy:"private",return:{type:{text:""}},description:`Generates the badge content based on the badge type.
Utilizes various helper methods to create the appropriate badge template based on the
current badge type. Supports 'dot', 'icon', 'counter', 'success', 'warning', and 'error'
types, returning the corresponding template result for each type.`},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}}],attributes:[{name:"type",type:{text:"BadgeType | undefined"},description:"Type of the badge\nCan be `dot` (notification) , `icon`, `counter`, `success`, `warning` or `error`.",fieldName:"type"},{name:"variant",type:{text:"IconVariant"},description:"Type of the variant can be `primary` or `secondary`.\nIt defines the background and foreground color of the icon.",default:"primary",fieldName:"variant"},{name:"counter",type:{text:"number | undefined"},description:"Counter is the number which can be provided in the badge.",fieldName:"counter"},{name:"max-counter",type:{text:"number"},description:"The maximum number can be set up to 999, anything above that will be rendered as _999+_.\nThe max counter can be `9`, `99` or `999`.",default:"99",fieldName:"maxCounter"},{name:"overlay",type:{text:"boolean"},default:"false",description:`Overlay is to add a thin outline to the badge.
This will help distinguish between the badge and the button,
where the badge will be layered on top of a button.`,fieldName:"overlay"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-badge",jsDoc:"/**\n * The `mdc-badge` component is a versatile UI element used to\n * display dot, icons, counters, success, warning and error type badge.\n *\n * Supported badge types:\n * - `dot`: Displays a dot notification badge with a blue color.\n * - `icon`: Displays a badge with a specified icon using the `icon-name` attribute.\n * - `counter`: Displays a badge with a counter value. If the counter exceeds the `max-counter`,\n * it shows `maxCounter+`. The maximum value of the counter is 999 and anything above that will be set to `999+`.\n * - `success`: Displays a success badge with a check circle icon and green color.\n * - `warning`: Displays a warning badge with a warning icon and yellow color.\n * - `error`: Displays a error badge with a error legacy icon and red color.\n *\n * For `icon`, `success`, `warning` and `error` types, the `mdc-icon` component is used to render the icon.\n *\n * For the `counter` type, the `mdc-text` component is used to render the counter value.\n *\n * @dependency mdc-icon\n * @dependency mdc-text\n *\n * @tagname mdc-badge\n *\n * @cssproperty --mdc-badge-primary-foreground-color - The foreground color of the primary badge.\n * @cssproperty --mdc-badge-primary-background-color - The background color of the primary badge.\n * @cssproperty --mdc-badge-secondary-foreground-color - The foreground color of the secondary badge.\n * @cssproperty --mdc-badge-secondary-background-color - The background color of the secondary badge.\n * @cssproperty --mdc-badge-success-foreground-color - The foreground color of the success badge.\n * @cssproperty --mdc-badge-success-background-color - The background color of the success badge.\n * @cssproperty --mdc-badge-warning-foreground-color - The foreground color of the warning badge.\n * @cssproperty --mdc-badge-warning-background-color - The background color of the warning badge.\n * @cssproperty --mdc-badge-error-foreground-color - The foreground color of the error badge.\n * @cssproperty --mdc-badge-error-background-color - The background color of the error badge.\n * @cssproperty --mdc-badge-overlay-background-color - The background color of the badge overlay.\n */",customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Badge",module:"components/badge/badge.component.js"}}]},{kind:"javascript-module",path:"components/brandvisual/brandvisual.component.js",declarations:[{kind:"class",description:"The `mdc-brandvisual` component is responsible for rendering logos dynamically & ensures they are\ndisplayed correctly within applications.\n\nFeatures:\n- Dynamically loads brandvisuals based on the `name` attribute.\n- Emits a `load` event when the brandvisual is successfully fetched.\n- Emits an `error` event when the brandvisual import fails.\n- Supports accessibility best practices.\n- Used for brand representation within the design system.",name:"Brandvisual",members:[{kind:"field",name:"brandVisualData",type:{text:"Element | TemplateResult | undefined"},privacy:"private"},{kind:"field",name:"name",type:{text:"BrandVisualNames | undefined"},description:"Name of the brandVisual (= filename)",attribute:"name",reflects:!0},{kind:"field",name:"altText",type:{text:"string | undefined"},description:`Alt text for the brandvisual image for accessibility.
This will only be set if the brandvisual is an image (png).`,attribute:"altText",reflects:!0},{kind:"method",name:"getBrandVisualData",privacy:"private"},{kind:"method",name:"injectTemplateAttributes",privacy:"private",return:{type:{text:"Element | TemplateResult"}},parameters:[{name:"litTemplate",type:{text:"TemplateResult"}},{name:"tag",type:{text:"string"}},{name:"props",type:{text:"any"}}]},{kind:"method",name:"injectHtmlAttributes",privacy:"private",return:{type:{text:"Element"}},parameters:[{name:"html",type:{text:"Element"}},{name:"props",type:{text:"imageProps"}}]},{kind:"method",name:"handleBrandVisualLoadedSuccess",privacy:"private",parameters:[{name:"brandVisualHtml",type:{text:"TemplateResult"},description:"The brandvisual html element which has been fetched from the brandvisual provider."}],description:`Sets the brandVisualData state to the fetched brandvisual.
Dispatches a 'load' event on the component once the brandvisual has been successfully loaded.`},{kind:"method",name:"handleBrandVisualLoadedFailure",privacy:"private",parameters:[{name:"error",type:{text:"unknown"}}],description:`Dispatches an 'error' event on the component when the brandvisual import has failed.
This event bubbles and is cancelable.
The error detail is set to the error object.`}],events:[{description:"(React: onLoad) This event is dispatched when the brandvisual has been successfully loaded.",name:"load",reactName:"onLoad"},{description:"(React: onError) This event is dispatched when the brandvisual fetching has failed.",name:"error",reactName:"onError"}],attributes:[{name:"name",type:{text:"BrandVisualNames | undefined"},description:"Name of the brandVisual (= filename)",fieldName:"name"},{name:"altText",type:{text:"string | undefined"},description:`Alt text for the brandvisual image for accessibility.
This will only be set if the brandvisual is an image (png).`,fieldName:"altText"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-brandvisual",jsDoc:`/**
 * The \`mdc-brandvisual\` component is responsible for rendering logos dynamically & ensures they are
 * displayed correctly within applications.
 *
 * Features:
 * - Dynamically loads brandvisuals based on the \`name\` attribute.
 * - Emits a \`load\` event when the brandvisual is successfully fetched.
 * - Emits an \`error\` event when the brandvisual import fails.
 * - Supports accessibility best practices.
 * - Used for brand representation within the design system.
 *
 * @tagname mdc-brandvisual
 *
 * @event load - (React: onLoad) This event is dispatched when the brandvisual has been successfully loaded.
 * @event error - (React: onError) This event is dispatched when the brandvisual fetching has failed.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Brandvisual",module:"components/brandvisual/brandvisual.component.js"}}]},{kind:"javascript-module",path:"components/bullet/bullet.component.js",declarations:[{kind:"class",description:`Bullet component, which is a visual marker
and be used to organize and present items in a list format.`,name:"Bullet",cssProperties:[{description:"background color of the bullet",name:"--mdc-bullet-background-color"},{description:"small size value of the bullet",name:"--mdc-bullet-size-small"},{description:"medium size value of the bullet",name:"--mdc-bullet-size-medium"},{description:"large size value of the bullet",name:"--mdc-bullet-size-large"}],members:[{kind:"field",name:"size",type:{text:"Size"},privacy:"public",description:`Size of the bullet

Possible values: 'small', 'medium', 'large'`,default:"small",attribute:"size",reflects:!0}],attributes:[{name:"size",type:{text:"Size"},description:`Size of the bullet

Possible values: 'small', 'medium', 'large'`,default:"small",fieldName:"size"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-bullet",jsDoc:`/**
 * Bullet component, which is a visual marker
 * and be used to organize and present items in a list format.
 *
 * @tagname mdc-bullet
 *
 * @cssproperty --mdc-bullet-background-color - background color of the bullet
 * @cssproperty --mdc-bullet-size-small - small size value of the bullet
 * @cssproperty --mdc-bullet-size-medium - medium size value of the bullet
 * @cssproperty --mdc-bullet-size-large - large size value of the bullet
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Bullet",module:"components/bullet/bullet.component.js"}}]},{kind:"javascript-module",path:"components/button/button.component.js",declarations:[{kind:"class",description:`\`mdc-button\` is a component that can be configured in various ways to suit different use cases.

Button Variants:
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.

Button Colors:
- **Positive**: Green color.
- **Negative**: Red color.
- **Accent**: Blue color.
- **Promotional**: Purple color.
- **Default**: White color.

Button Sizes (in REM units):
- **Pill button**: 40, 32, 28, 24.
- **Icon button**: 64, 52, 40, 32, 28, 24.
- **Tertiary icon button**: 20.

Button Types:
- **Pill button**: A button that contains text value. Commonly used for call to action, tags, or filters.
- **Pill button with icons**: A button containing an icon either on the left or right side of the button.
- **Icon button**: A button represented by just an icon without any text.
The type of button is inferred based on the presence of slot and/or prefix and postfix icons/slots.`,name:"Button",cssParts:[{description:"Text label of the button, passed in default slot",name:"button-text"},{description:"Content before the text label, passed in `prefix` slot",name:"prefix"},{description:"Content after the text label, passed in `postfix` slot",name:"postfix"}],slots:[{description:"Text label of the button.",name:""},{description:"Content to be displayed before the text label.",name:"prefix"},{description:"Content to be displayed after the text label.",name:"postfix"}],members:[{kind:"field",name:"size",type:{text:"ButtonSize"},description:`Button sizing is based on the button type.
- **Pill button**: 40, 32, 28, 24.
- **Icon button**: 64, 52, 40, 32, 28, 24.
- Tertiary icon button can also be 20.`,default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"inverted",type:{text:"boolean"},description:"The button color can be inverted by setting the inverted attribute to true.\n\nOnly applies when variant is set to `primary`, color is set to `default`\nand button is not `active`.",default:"false",attribute:"inverted",reflects:!0},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"inferFilledIconName",privacy:"private",parameters:[{name:"active",optional:!0,type:{text:"boolean"},description:"The active state."}],description:`Modifies the icon name based on the active state.
If the button is active, the icon name is suffixed with '-filled'.
If the button is inactive, the icon name is restored to its original value.
If '-filled' icon is not available, the icon name remains unchanged.`},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,attribute:"prefix-icon",reflects:!0,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"postfixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,attribute:"postfix-icon",reflects:!0,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",attribute:"variant",inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",attribute:"color",inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setVariant",privacy:"protected",parameters:[{name:"variant",type:{text:"ButtonVariant"},description:"The variant to set."}],description:`Sets the variant attribute for the button component.
If the provided variant is not included in the BUTTON_VARIANTS,
it defaults to the value specified in DEFAULTS.VARIANT.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setColor",privacy:"protected",parameters:[{name:"color",type:{text:"ButtonColor"},description:"The color to set."}],description:`Sets the color attribute for the button.
Defaults to DEFAULTS.COLOR if invalid or for tertiary button.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setSize",privacy:"protected",parameters:[{name:"size",type:{text:"PillButtonSize | IconButtonSize"},description:"The size to set."}],description:`Sets the size attribute for the button component.
Validates the size based on the button type (icon, pill, or tertiary).
Defaults to DEFAULTS.SIZE if invalid.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"inferButtonType",privacy:"protected",description:"Infers the type of button based on the presence of slot and/or prefix and postfix icons.",parameters:[{description:"default slot of button",name:"slot"}],inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],attributes:[{name:"size",type:{text:"ButtonSize"},description:`Button sizing is based on the button type.
- **Pill button**: 40, 32, 28, 24.
- **Icon button**: 64, 52, 40, 32, 28, 24.
- Tertiary icon button can also be 20.`,default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"inverted",type:{text:"boolean"},description:"The button color can be inverted by setting the inverted attribute to true.\n\nOnly applies when variant is set to `primary`, color is set to `default`\nand button is not `active`.",default:"false",fieldName:"inverted"},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,fieldName:"prefixIcon",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"postfix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,fieldName:"postfixIcon",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",fieldName:"variant",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",fieldName:"color",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"ButtonComponentMixin",module:"/src/utils/mixins/ButtonComponentMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-button",jsDoc:`/**
 * \`mdc-button\` is a component that can be configured in various ways to suit different use cases.
 *
 * Button Variants:
 * - **Primary**: Solid background color.
 * - **Secondary**: Transparent background with a solid border.
 * - **Tertiary**: No background or border, appears as plain text but retains all button functionalities.
 *
 * Button Colors:
 * - **Positive**: Green color.
 * - **Negative**: Red color.
 * - **Accent**: Blue color.
 * - **Promotional**: Purple color.
 * - **Default**: White color.
 *
 * Button Sizes (in REM units):
 * - **Pill button**: 40, 32, 28, 24.
 * - **Icon button**: 64, 52, 40, 32, 28, 24.
 * - **Tertiary icon button**: 20.
 *
 * Button Types:
 * - **Pill button**: A button that contains text value. Commonly used for call to action, tags, or filters.
 * - **Pill button with icons**: A button containing an icon either on the left or right side of the button.
 * - **Icon button**: A button represented by just an icon without any text.
 * The type of button is inferred based on the presence of slot and/or prefix and postfix icons/slots.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-button
 *
 * @slot - Text label of the button.
 * @slot prefix - Content to be displayed before the text label.
 * @slot postfix - Content to be displayed after the text label.
 *
 * @csspart button-text - Text label of the button, passed in default slot
 * @csspart prefix - Content before the text label, passed in \`prefix\` slot
 * @csspart postfix - Content after the text label, passed in \`postfix\` slot
 */`,customElement:!0,events:[{description:"(React: onClick) This event is dispatched when the button is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the button.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the button.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the button receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Button",module:"components/button/button.component.js"}}]},{kind:"javascript-module",path:"components/buttongroup/buttongroup.component.js",declarations:[{kind:"class",description:`buttongroup component, is a styled wrapper for multiple buttons.
It can support icon buttons, combination of icon and pill buttons, and text buttons.
They are available in horizontal and vertical orientation.`,name:"ButtonGroup",cssProperties:[{description:"The border radius of the buttongroup",name:"--mdc-buttongroup-border-radius"},{description:"The border color of the buttongroup",name:"--mdc-buttongroup-border-color"},{description:"The color of the divider between buttons within the buttongroup",name:"--mdc-buttongroup-divider-color"}],slots:[{description:"This is a default/unnamed slot, which contains the buttons",name:"default"}],members:[{kind:"field",name:"orientation",type:{text:"ButtonGroupOrientation"},description:"Orientation of the buttongroup.",default:"'horizontal'",attribute:"orientation",reflects:!0},{kind:"field",name:"variant",type:{text:"ButtonGroupVariant"},description:"Variant of the buttons within the buttongroup.",default:"'primary'",attribute:"variant",reflects:!0},{kind:"field",name:"size",type:{text:"ButtonGroupSize"},description:"Size of the buttons within the buttongroup.",default:"'28'",attribute:"size",reflects:!0},{kind:"field",name:"compact",type:{text:"boolean"},default:"false",description:`When this is true, the buttons within the buttongroup will be compact.
i.e. Irrespective of the size of the buttons, they will have a height of 24px.`,attribute:"compact",reflects:!0}],attributes:[{name:"orientation",type:{text:"ButtonGroupOrientation"},description:"Orientation of the buttongroup.",default:"'horizontal'",fieldName:"orientation"},{name:"variant",type:{text:"ButtonGroupVariant"},description:"Variant of the buttons within the buttongroup.",default:"'primary'",fieldName:"variant"},{name:"size",type:{text:"ButtonGroupSize"},description:"Size of the buttons within the buttongroup.",default:"'28'",fieldName:"size"},{name:"compact",type:{text:"boolean"},default:"false",description:`When this is true, the buttons within the buttongroup will be compact.
i.e. Irrespective of the size of the buttons, they will have a height of 24px.`,fieldName:"compact"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-buttongroup",jsDoc:`/**
 * buttongroup component, is a styled wrapper for multiple buttons.
 * It can support icon buttons, combination of icon and pill buttons, and text buttons.
 * They are available in horizontal and vertical orientation.
 *
 * @tagname mdc-buttongroup
 *
 * @slot default - This is a default/unnamed slot, which contains the buttons
 *
 * @cssproperty --mdc-buttongroup-border-radius - The border radius of the buttongroup
 * @cssproperty --mdc-buttongroup-border-color - The border color of the buttongroup
 * @cssproperty --mdc-buttongroup-divider-color - The color of the divider between buttons within the buttongroup
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ButtonGroup",module:"components/buttongroup/buttongroup.component.js"}}]},{kind:"javascript-module",path:"components/buttonlink/buttonlink.component.js",declarations:[{kind:"class",description:"`mdc-buttonlink` combines the functional behavior of `mdc-linksimple` with the visual and structural\nfeatures of `mdc-button`. This includes support for variants, sizing, and optional\nprefix and postfix icons via slots.\n\n### Features:\n- Behaves like an link while visually resembling a button.\n- Supports slots for `prefix-icon` and `postfix-icon`.\n- Customizable size, color, and variant through attributes.\n- Inherits accessibility and keyboard interaction support from `mdc-linksimple`.",name:"ButtonLink",members:[{kind:"field",name:"size",type:{text:"PillButtonSize | IconButtonSize"},description:`ButtonLink sizing is based on the buttonlink type.
- **Pill buttonlink**: 40, 32, 28, 24.
- **Icon buttonlink**: 64, 52, 40, 32, 28, 24.
- Tertiary icon buttonlink can also be 20.`,default:"32",attribute:"size",reflects:!0},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the buttonlink is soft disabled.
When set to \`true\`, the buttonlink appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the buttonlink behaves like a disabled buttonlink, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The buttonlink element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the buttonlink.
When soft-disabled, the buttonlink looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,attribute:"prefix-icon",reflects:!0,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"postfixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,attribute:"postfix-icon",reflects:!0,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",attribute:"variant",inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",attribute:"color",inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setVariant",privacy:"protected",parameters:[{name:"variant",type:{text:"ButtonVariant"},description:"The variant to set."}],description:`Sets the variant attribute for the button component.
If the provided variant is not included in the BUTTON_VARIANTS,
it defaults to the value specified in DEFAULTS.VARIANT.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setColor",privacy:"protected",parameters:[{name:"color",type:{text:"ButtonColor"},description:"The color to set."}],description:`Sets the color attribute for the button.
Defaults to DEFAULTS.COLOR if invalid or for tertiary button.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"setSize",privacy:"protected",parameters:[{name:"size",type:{text:"PillButtonSize | IconButtonSize"},description:"The size to set."}],description:`Sets the size attribute for the button component.
Validates the size based on the button type (icon, pill, or tertiary).
Defaults to DEFAULTS.SIZE if invalid.`,inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"method",name:"inferButtonType",privacy:"protected",description:"Infers the type of button based on the presence of slot and/or prefix and postfix icons.",parameters:[{description:"default slot of button",name:"slot"}],inheritedFrom:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",attribute:"inline",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",attribute:"inverted",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",attribute:"href",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",attribute:"target",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",attribute:"rel",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"method",name:"handleNavigation",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"e",type:{text:"MouseEvent | KeyboardEvent"}}],inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"disabled",type:{text:"boolean"},description:"Whether the element should be disabled"}],description:"Sets or removes `aria-disabled` and updates `tabIndex` to reflect\nthe disabled state. When disabled, the element becomes unfocusable;\nwhen enabled, the previous `tabIndex` is restored.",inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}}],events:[{description:"(React: onClick) Fired when the user activates the buttonLink using a mouse or assistive technology.",name:"click",reactName:"onClick",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onKeyDown) Fired when the user presses a key while the buttonLink has focus.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onFocus) Fired when the buttonLink receives keyboard or mouse focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onBlur) Fired when the buttonLink loses keyboard or mouse focus.",name:"blur",reactName:"onBlur",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}],attributes:[{name:"size",type:{text:"PillButtonSize | IconButtonSize"},description:`ButtonLink sizing is based on the buttonlink type.
- **Pill buttonlink**: 40, 32, 28, 24.
- **Icon buttonlink**: 64, 52, 40, 32, 28, 24.
- Tertiary icon buttonlink can also be 20.`,default:"32",fieldName:"size"},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the buttonlink is soft disabled.
When set to \`true\`, the buttonlink appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the buttonlink behaves like a disabled buttonlink, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled"},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,fieldName:"prefixIcon",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"postfix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,fieldName:"postfixIcon",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",fieldName:"variant",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",fieldName:"color",inheritedFrom:{name:"ButtonComponentMixin",module:"src/utils/mixins/ButtonComponentMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",fieldName:"inline",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",fieldName:"inverted",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",fieldName:"href",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",fieldName:"target",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",fieldName:"rel",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}],mixins:[{name:"ButtonComponentMixin",module:"/src/utils/mixins/ButtonComponentMixin"}],superclass:{name:"Linksimple",module:"/src/components/linksimple/linksimple.component"},tagName:"mdc-buttonlink",jsDoc:`/**
 * \`mdc-buttonlink\` combines the functional behavior of \`mdc-linksimple\` with the visual and structural
 * features of \`mdc-button\`. This includes support for variants, sizing, and optional
 * prefix and postfix icons via slots.
 *
 * ### Features:
 * - Behaves like an link while visually resembling a button.
 * - Supports slots for \`prefix-icon\` and \`postfix-icon\`.
 * - Customizable size, color, and variant through attributes.
 * - Inherits accessibility and keyboard interaction support from \`mdc-linksimple\`.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-buttonlink
 *
 * @event click - (React: onClick) Fired when the user activates the buttonLink using a mouse or assistive technology.
 * @event keydown - (React: onKeyDown) Fired when the user presses a key while the buttonLink has focus.
 * @event focus - (React: onFocus) Fired when the buttonLink receives keyboard or mouse focus.
 * @event blur - (React: onBlur) Fired when the buttonLink loses keyboard or mouse focus.
 *
 */`,customElement:!0,cssProperties:[{description:"Border radius of the link.",name:"--mdc-link-border-radius",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the active state.",name:"--mdc-link-color-active",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the disabled state.",name:"--mdc-link-color-disabled",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the hover state.",name:"--mdc-link-color-hover",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the normal state.",name:"--mdc-link-color-normal",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the active state.",name:"--mdc-link-inverted-color-active",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the disabled state.",name:"--mdc-link-inverted-color-disabled",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the hover state.",name:"--mdc-link-inverted-color-hover",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the normal state.",name:"--mdc-link-inverted-color-normal",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"ButtonLink",module:"components/buttonlink/buttonlink.component.js"}}]},{kind:"javascript-module",path:"components/buttonsimple/buttonsimple.component.js",declarations:[{kind:"class",description:"`mdc-buttonsimple` is a component that can be configured in various ways to suit different use cases.\nIt is used as an internal component and is not intended to be used directly by consumers.\nConsumers should use the `mdc-button` component instead.",name:"Buttonsimple",members:[{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0},{kind:"method",name:"executeAction",privacy:"protected"},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button."},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`},{kind:"method",name:"triggerClickEvent",privacy:"private"},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],events:[{description:"(React: onClick) This event is dispatched when the button is clicked.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the button.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onKeyUp) This event is dispatched when a key is released on the button.",name:"keyup",reactName:"onKeyUp"},{description:"(React: onFocus) This event is dispatched when the button receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active"},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled"},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size"},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role"},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey"},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type"},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name"},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"},{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-buttonsimple",jsDoc:`/**
 * \`mdc-buttonsimple\` is a component that can be configured in various ways to suit different use cases.
 * It is used as an internal component and is not intended to be used directly by consumers.
 * Consumers should use the \`mdc-button\` component instead.
 *
 * @event click - (React: onClick) This event is dispatched when the button is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the button.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the button.
 * @event focus - (React: onFocus) This event is dispatched when the button receives focus.
 *
 * @tagname mdc-buttonsimple
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}]},{kind:"javascript-module",path:"components/card/card.component.js",declarations:[{kind:"class",description:`The card component allows users to organize information in a structured and tangible
format that is visually appealing. \`mdc-card\` is a static component that supports
the following features:
- Image
- Header
   - Icon
   - Title
   - Subtitle
- Body

The card can either be vertically or horizontally oriented. The vertical card has a min-width of 20rem and the horizontal card has a min-width of 40rem.

There are 2 variants for the card that represent the border styling - 'border' and 'ghost'.

To make this card interactive, use the following slots:
- \`icon-button\`: This slot supports action icon buttons in the header section (maximum of 3 buttons).
- \`footer-link\`: This slot is for passing \`mdc-link\` component within the footer section.
- \`footer-button-primary\`: This slot is for passing primary variant of \`mdc-button\` component within the footer section.
- \`footer-button-secondary\`: This slot is for passing secondary variant of \`mdc-button\` component
within the footer section.

Interactive card additionally supports 'promotional' variant that represents the border styling - 'promotional'.`,name:"Card",cssProperties:[{description:"The width of the card",name:"--mdc-card-width"}],cssParts:[{description:"The header part of the card",name:"header"},{description:"The icon part of the card header",name:"icon"},{description:"The body part of the card",name:"body"},{description:"The image part of the card",name:"image"},{description:"The footer part of the card",name:"footer"},{description:"The link part of the card footer",name:"footer-link"},{description:"The primary button part of the card footer",name:"footer-button-primary"},{description:"The secondary button part of the card footer",name:"footer-button-secondary"},{description:"The icon button part of the card header",name:"icon-button"},{description:"The text part of the card",name:"text"}],slots:[{description:"This slot is for passing the content before the body",name:"before-body"},{description:"This slot is for passing the text content for the card",name:"body"},{description:"This slot is for passing the content after the body",name:"after-body"},{description:"This slot is for passing `mdc-link` component within the footer section.",name:"footer-link"},{description:"This slot is for passing primary variant of `mdc-button` component within the footer section.",name:"footer-button-primary"},{description:"This slot is for passing secondary variant of `mdc-button` component within the footer section.",name:"footer-button-secondary"},{description:" This slot is for passing custom footer content. Only use this if really needed, using the footer-link and footer-button slots is preferred.",name:"footer"}],members:[{kind:"method",name:"renderHeader",privacy:"protected",description:"Renders the header of the card if title is provided",return:{type:{text:""}}},{kind:"field",name:"cardTitle",type:{text:"string"},default:"''",description:"The title of the card - part of header section",attribute:"card-title",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",attribute:"subtitle",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"imageSrc",type:{text:"string"},default:"''",description:"The image source URL to render on the card",attribute:"image-src",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"imageAlt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",attribute:"image-alt",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",attribute:"variant",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",attribute:"orientation",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"titleTagName",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"title-tag-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"subtitle-tag-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderImage",privacy:"protected",description:"Renders the image on the card if image source is provided",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderIcon",privacy:"protected",description:"Renders the icon on the card if icon name is provided",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderTitle",privacy:"protected",description:"Renders the title and subtitle on the card",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}},inheritedFrom:{name:"FooterMixin",module:"utils/mixins/FooterMixin.js"}}],mixins:[{name:"CardComponentMixin",module:"/src/utils/mixins/CardComponentMixin"},{name:"FooterMixin",module:"/src/utils/mixins/FooterMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-card",jsDoc:`/**
 * The card component allows users to organize information in a structured and tangible
 * format that is visually appealing. \`mdc-card\` is a static component that supports
 * the following features:
 * - Image
 * - Header
 *    - Icon
 *    - Title
 *    - Subtitle
 * - Body
 *
 * The card can either be vertically or horizontally oriented. The vertical card has a min-width of 20rem and the horizontal card has a min-width of 40rem.
 *
 * There are 2 variants for the card that represent the border styling - 'border' and 'ghost'.
 *
 * To make this card interactive, use the following slots:
 * - \`icon-button\`: This slot supports action icon buttons in the header section (maximum of 3 buttons).
 * - \`footer-link\`: This slot is for passing \`mdc-link\` component within the footer section.
 * - \`footer-button-primary\`: This slot is for passing primary variant of \`mdc-button\` component within the footer section.
 * - \`footer-button-secondary\`: This slot is for passing secondary variant of \`mdc-button\` component
 * within the footer section.
 *
 * Interactive card additionally supports 'promotional' variant that represents the border styling - 'promotional'.
 *
 * @slot before-body - This slot is for passing the content before the body
 * @slot body - This slot is for passing the text content for the card
 * @slot after-body - This slot is for passing the content after the body
 * @slot footer-link - This slot is for passing \`mdc-link\` component within the footer section.
 * @slot footer-button-primary - This slot is for passing primary variant of
 * \`mdc-button\` component within the footer section.
 * @slot footer-button-secondary - This slot is for passing secondary variant of \`mdc-button\` component
 * within the footer section.
 * @slot footer -  This slot is for passing custom footer content. Only use this if really needed,
 * using the footer-link and footer-button slots is preferred.
 *
 * @csspart header - The header part of the card
 * @csspart icon - The icon part of the card header
 * @csspart body - The body part of the card
 * @csspart image - The image part of the card
 * @csspart footer - The footer part of the card
 * @csspart footer-link - The link part of the card footer
 * @csspart footer-button-primary - The primary button part of the card footer
 * @csspart footer-button-secondary - The secondary button part of the card footer
 * @csspart icon-button - The icon button part of the card header
 * @csspart text - The text part of the card
 *
 * @tagname mdc-card
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @cssproperty --mdc-card-width - The width of the card
 *
 */`,customElement:!0,attributes:[{name:"card-title",type:{text:"string"},default:"''",description:"The title of the card - part of header section",fieldName:"cardTitle",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",fieldName:"subtitle",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"image-src",type:{text:"string"},default:"''",description:"The image source URL to render on the card",fieldName:"imageSrc",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"image-alt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",fieldName:"imageAlt",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",fieldName:"variant",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",fieldName:"orientation",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"title-tag-name",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"titleTagName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"subtitle-tag-name",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"subtitleTagName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Card",module:"components/card/card.component.js"}}]},{kind:"javascript-module",path:"components/cardbutton/cardbutton.component.js",declarations:[{kind:"class",description:`cardbutton component looks like a card and behaves as a button component.

**Note**: This is a single selection card i.e. interacting anywhere on the card would trigger the click event.
Make sure to pass only non-interactable elements within the slots.`,name:"CardButton",cssProperties:[{description:"The width of the card",name:"--mdc-card-width"}],cssParts:[{description:"The header part of the card",name:"header"},{description:"The icon part of the card header",name:"icon"},{description:"The body part of the card",name:"body"},{description:"The image part of the card",name:"image"},{description:"The footer part of the card",name:"footer"},{description:"The link part of the card footer",name:"footer-link"},{description:"The primary button part of the card footer",name:"footer-button-primary"},{description:"The secondary button part of the card footer",name:"footer-button-secondary"},{description:"The icon button part of the card header",name:"icon-button"},{description:"The text part of the card",name:"text"}],slots:[{description:"This slot is for passing the content before the body",name:"before-body"},{description:"This slot is for passing the text content for the card",name:"body"},{description:"This slot is for passing the content after the body",name:"after-body"},{description:"This slot is for passing `mdc-link` component within the footer section.",name:"footer-link"},{description:"This slot is for passing primary variant of `mdc-button` component within the footer section.",name:"footer-button-primary"}],members:[{kind:"method",name:"renderHeader",privacy:"protected",description:"Renders the header of the card if title is provided",return:{type:{text:""}}},{kind:"field",name:"cardTitle",type:{text:"string"},default:"''",description:"The title of the card - part of header section",attribute:"card-title",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",attribute:"subtitle",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"imageSrc",type:{text:"string"},default:"''",description:"The image source URL to render on the card",attribute:"image-src",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"imageAlt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",attribute:"image-alt",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",attribute:"variant",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",attribute:"orientation",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"titleTagName",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"title-tag-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"subtitle-tag-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",reflects:!0,inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderImage",privacy:"protected",description:"Renders the image on the card if image source is provided",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderIcon",privacy:"protected",description:"Renders the icon on the card if icon name is provided",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"method",name:"renderTitle",privacy:"protected",description:"Renders the title and subtitle on the card",return:{type:{text:""}},inheritedFrom:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) Event that gets dispatched when the card is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the card. It fires the click event when enter key is used.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the card. It fires the click event when space key is used.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) Event that gets dispatched when the card receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"CardComponentMixin",module:"/src/utils/mixins/CardComponentMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-cardbutton",jsDoc:`/**
 * cardbutton component looks like a card and behaves as a button component.
 *
 * **Note**: This is a single selection card i.e. interacting anywhere on the card would trigger the click event.
 * Make sure to pass only non-interactable elements within the slots.
 *
 * @tagname mdc-cardbutton
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @event click - (React: onClick) Event that gets dispatched when the card is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the card.
 * It fires the click event when enter key is used.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the card.
 * It fires the click event when space key is used.
 * @event focus - (React: onFocus) Event that gets dispatched when the card receives focus.
 *
 * @slot before-body - This slot is for passing the content before the body
 * @slot body - This slot is for passing the text content for the card
 * @slot after-body - This slot is for passing the content after the body
 * @slot footer-link - This slot is for passing \`mdc-link\` component within the footer section.
 * @slot footer-button-primary - This slot is for passing primary variant of \`mdc-button\` component within the footer section.
 *
 * @csspart header - The header part of the card
 * @csspart icon - The icon part of the card header
 * @csspart body - The body part of the card
 * @csspart image - The image part of the card
 * @csspart footer - The footer part of the card
 * @csspart footer-link - The link part of the card footer
 * @csspart footer-button-primary - The primary button part of the card footer
 * @csspart footer-button-secondary - The secondary button part of the card footer
 * @csspart icon-button - The icon button part of the card header
 * @csspart text - The text part of the card
 *
 * @cssproperty --mdc-card-width - The width of the card
 */`,customElement:!0,attributes:[{name:"card-title",type:{text:"string"},default:"''",description:"The title of the card - part of header section",fieldName:"cardTitle",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",fieldName:"subtitle",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"image-src",type:{text:"string"},default:"''",description:"The image source URL to render on the card",fieldName:"imageSrc",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"image-alt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",fieldName:"imageAlt",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",fieldName:"variant",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",fieldName:"orientation",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"title-tag-name",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"titleTagName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"subtitle-tag-name",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"subtitleTagName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"CardComponentMixin",module:"src/utils/mixins/CardComponentMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"CardButton",module:"components/cardbutton/cardbutton.component.js"}}]},{kind:"javascript-module",path:"components/cardcheckbox/cardcheckbox.component.js",declarations:[{kind:"class",description:`cardcheckbox component extends \`mdc-card\` and supports checkbox selection interaction addtionally.

While using this component within a form or group of cards, make sure cards are in a role = "checkbox-group".
This card would have events for selected and unselected (similar to checkbox)

**Note**: This is a single selection card i.e. interacting anywhere on the card would toggle the checked state.
Make sure to pass only non-interactable elements within the slots.

Make sure to pass the \`card-title\` mandatorily for this card.`,name:"CardCheckbox",cssProperties:[{description:"The width of the card",name:"--mdc-card-width",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],cssParts:[{description:"The header part of the card",name:"header",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The icon part of the card header",name:"icon",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The body part of the card",name:"body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The image part of the card",name:"image",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The footer part of the card",name:"footer",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The link part of the card footer",name:"footer-link",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The primary button part of the card footer",name:"footer-button-primary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The secondary button part of the card footer",name:"footer-button-secondary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The icon button part of the card header",name:"icon-button",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The text part of the card",name:"text",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The check part of the card",name:"check"},{description:"The check icon part of the card",name:"check-icon"},{description:"The check icon button part of the card",name:"check-icon-button"}],slots:[{description:"This slot is for passing the content before the body",name:"before-body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing the text content for the card",name:"body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing the content after the body",name:"after-body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing `mdc-link` component within the footer section.",name:"footer-link",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing primary variant of `mdc-button` component within the footer section.",name:"footer-button-primary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing secondary variant of `mdc-button` component within the footer section.",name:"footer-button-secondary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:" This slot is for passing custom footer content. Only use this if really needed, using the footer-link and footer-button slots is preferred.",name:"footer",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"The checked state of the card",attribute:"checked",reflects:!0},{kind:"field",name:"selectionType",type:{text:"SelectionType"},description:"The selection type of the card. It can either be set to 'check' or 'checkbox'",default:"'check'",attribute:"selection-type",reflects:!0},{kind:"method",name:"toggleChecked",privacy:"private",description:"Toggles the checked state"},{kind:"method",name:"toggleOnEnter",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event"}],description:"Toggles the checked state when enter key is used"},{kind:"method",name:"toggleOnSpace",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event"}],description:"Toggles the checked state when space key is used"},{kind:"method",name:"renderSelection",privacy:"private",description:"Renders the selection icon or checkbox based on the selection type",return:{type:{text:""}}},{kind:"method",name:"renderHeader",privacy:"protected",description:"Renders the header of the card",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"cardTitle",type:{text:"string"},default:"''",description:"The title of the card - part of header section",attribute:"card-title",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",attribute:"subtitle",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"imageSrc",type:{text:"string"},default:"''",description:"The image source URL to render on the card",attribute:"image-src",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"imageAlt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",attribute:"image-alt",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",attribute:"variant",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",attribute:"orientation",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"titleTagName",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"title-tag-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"subtitle-tag-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderImage",privacy:"protected",description:"Renders the image on the card if image source is provided",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderIcon",privacy:"protected",description:"Renders the icon on the card if icon name is provided",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderTitle",privacy:"protected",description:"Renders the title and subtitle on the card",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) Event that gets dispatched when the card's checked state changes.",reactName:"onChange"},{description:"(React: onClick) Event that gets dispatched when the card is clicked. It toggles the checked state.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the card. It toggles the checked state when enter key is used.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onKeyUp) This event is dispatched when a key is released on the card. It toggles the checked state when space key is used.",name:"keyup",reactName:"onKeyUp"},{description:"(React: onFocus) Event that gets dispatched when the card receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"The checked state of the card",fieldName:"checked"},{name:"selection-type",type:{text:"SelectionType"},description:"The selection type of the card. It can either be set to 'check' or 'checkbox'",default:"'check'",fieldName:"selectionType"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"card-title",type:{text:"string"},default:"''",description:"The title of the card - part of header section",fieldName:"cardTitle",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",fieldName:"subtitle",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"image-src",type:{text:"string"},default:"''",description:"The image source URL to render on the card",fieldName:"imageSrc",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"image-alt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",fieldName:"imageAlt",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",fieldName:"variant",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",fieldName:"orientation",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"title-tag-name",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"titleTagName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"subtitle-tag-name",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"subtitleTagName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"},{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"}],superclass:{name:"Card",module:"/src/components/card/card.component"},tagName:"mdc-cardcheckbox",jsDoc:`/**
 * cardcheckbox component extends \`mdc-card\` and supports checkbox selection interaction addtionally.
 *
 * While using this component within a form or group of cards, make sure cards are in a role = "checkbox-group".
 * This card would have events for selected and unselected (similar to checkbox)
 *
 * **Note**: This is a single selection card i.e. interacting anywhere on the card would toggle the checked state.
 * Make sure to pass only non-interactable elements within the slots.
 *
 * Make sure to pass the \`card-title\` mandatorily for this card.
 *
 * @tagname mdc-cardcheckbox
 *
 * @dependency mdc-icon
 * @dependency mdc-staticcheckbox
 * @dependency mdc-text
 *
 * @slot before-body - This slot is for passing the content before the body
 * @slot body - This slot is for passing the text content for the card
 * @slot after-body - This slot is for passing the content after the body
 * @slot footer-link - This slot is for passing \`mdc-link\` component within the footer section.
 * @slot footer-button-primary - This slot is for passing primary variant of \`mdc-button\` component within the footer section.
 *
 * @csspart header - The header part of the card
 * @csspart icon - The icon part of the card header
 * @csspart body - The body part of the card
 * @csspart image - The image part of the card
 * @csspart footer - The footer part of the card
 * @csspart footer-link - The link part of the card footer
 * @csspart footer-button-primary - The primary button part of the card footer
 * @csspart footer-button-secondary - The secondary button part of the card footer
 * @csspart icon-button - The icon button part of the card header
 * @csspart text - The text part of the card
 * @csspart check - The check part of the card
 * @csspart check-icon - The check icon part of the card
 * @csspart check-icon-button - The check icon button part of the card
 *
 * @cssproperty --mdc-card-width - The width of the card
 *
 * @event click - (React: onClick) Event that gets dispatched when the card is clicked. It toggles the checked state.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the card.
 * It toggles the checked state when enter key is used.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the card.
 * It toggles the checked state when space key is used.
 * @event focus - (React: onFocus) Event that gets dispatched when the card receives focus.
 * @event change - (React: onChange) Event that gets dispatched when the card's checked state changes.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"CardCheckbox",module:"components/cardcheckbox/cardcheckbox.component.js"}}]},{kind:"javascript-module",path:"components/cardradio/cardradio.component.js",declarations:[{kind:"class",description:`cardradio component extends \`mdc-card\` and supports radio selection interaction addtionally.

While using this component within a form or group of cards, make sure cards are in a role = "radio-group".
This card would have events for selected and unselected (similar to radio)

**Note**: This is a single selection card i.e. interacting anywhere on the card would toggle the checked state.
Make sure to pass only non-interactable elements within the slots.

Make sure to pass the \`card-title\` mandatorily for this card.`,name:"CardRadio",cssProperties:[{description:"The width of the card",name:"--mdc-card-width",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],cssParts:[{description:"The header part of the card",name:"header",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The icon part of the card header",name:"icon",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The body part of the card",name:"body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The image part of the card",name:"image",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The footer part of the card",name:"footer",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The link part of the card footer",name:"footer-link",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The primary button part of the card footer",name:"footer-button-primary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The secondary button part of the card footer",name:"footer-button-secondary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The icon button part of the card header",name:"icon-button",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The text part of the card",name:"text",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"The check part of the card",name:"check"},{description:"The check icon part of the card",name:"check-icon"},{description:"The check icon button part of the card",name:"check-icon-button"}],slots:[{description:"This slot is for passing the content before the body",name:"before-body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing the text content for the card",name:"body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing the content after the body",name:"after-body",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing `mdc-link` component within the footer section.",name:"footer-link",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing primary variant of `mdc-button` component within the footer section.",name:"footer-button-primary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:"This slot is for passing secondary variant of `mdc-button` component within the footer section.",name:"footer-button-secondary",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{description:" This slot is for passing custom footer content. Only use this if really needed, using the footer-link and footer-button slots is preferred.",name:"footer",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"The checked state of the card",attribute:"checked",reflects:!0},{kind:"field",name:"name",type:{text:"string"},default:"''",description:"The name of the radio.",attribute:"name"},{kind:"method",name:"getAllCardsWithinSameGroup",privacy:"private",return:{type:{text:"CardRadio[]"}},description:"Returns all cards within the same group (name)."},{kind:"method",name:"toggleChecked",privacy:"private",return:{type:{text:"void"}},description:`Handles the change event on the radio element.
This will toggle the state of the radio element.
Dispatches the change event.`},{kind:"method",name:"setDisabled",return:{type:{text:"void"}},parameters:[{name:"disabled",type:{text:"boolean"}}]},{kind:"method",name:"updateCardRadio",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"cards",type:{text:"CardRadio[]"}},{name:"index",type:{text:"number"}}]},{kind:"method",name:"toggleOnEnter",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event"}],description:"Toggles the checked state when enter key is used"},{kind:"method",name:"toggleOnSpace",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event"}],description:"Toggles the checked state when space key is used"},{kind:"method",name:"renderHeader",privacy:"protected",description:"Renders the header of the card",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"cardTitle",type:{text:"string"},default:"''",description:"The title of the card - part of header section",attribute:"card-title",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",attribute:"subtitle",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"imageSrc",type:{text:"string"},default:"''",description:"The image source URL to render on the card",attribute:"image-src",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"imageAlt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",attribute:"image-alt",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",attribute:"variant",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",attribute:"orientation",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"titleTagName",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"title-tag-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"subtitle-tag-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",reflects:!0,inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderImage",privacy:"protected",description:"Renders the image on the card if image source is provided",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderIcon",privacy:"protected",description:"Renders the icon on the card if icon name is provided",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderTitle",privacy:"protected",description:"Renders the title and subtitle on the card",return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}},{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}},inheritedFrom:{name:"Card",module:"components/card/card.component.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) Event that gets dispatched when the card's checked state changes.",reactName:"onChange"},{description:"(React: onClick) Event that gets dispatched when the card is clicked. It toggles the checked state.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the card. It toggles the checked state when enter key is used.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onKeyUp) This event is dispatched when a key is released on the card. It toggles the checked state when space key is used.",name:"keyup",reactName:"onKeyUp"},{description:"(React: onFocus) Event that gets dispatched when the card receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"The checked state of the card",fieldName:"checked"},{name:"name",type:{text:"string"},default:"''",description:"The name of the radio.",fieldName:"name"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"card-title",type:{text:"string"},default:"''",description:"The title of the card - part of header section",fieldName:"cardTitle",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",fieldName:"subtitle",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"image-src",type:{text:"string"},default:"''",description:"The image source URL to render on the card",fieldName:"imageSrc",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"image-alt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",fieldName:"imageAlt",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",fieldName:"variant",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",fieldName:"orientation",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"title-tag-name",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"titleTagName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"subtitle-tag-name",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"subtitleTagName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"Card",module:"src/components/card/card.component.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"},{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"}],superclass:{name:"Card",module:"/src/components/card/card.component"},tagName:"mdc-cardradio",jsDoc:`/**
 * cardradio component extends \`mdc-card\` and supports radio selection interaction addtionally.
 *
 * While using this component within a form or group of cards, make sure cards are in a role = "radio-group".
 * This card would have events for selected and unselected (similar to radio)
 *
 * **Note**: This is a single selection card i.e. interacting anywhere on the card would toggle the checked state.
 * Make sure to pass only non-interactable elements within the slots.
 *
 * Make sure to pass the \`card-title\` mandatorily for this card.
 *
 * @tagname mdc-cardradio
 *
 * @dependency mdc-icon
 * @dependency mdc-staticradio
 * @dependency mdc-text
 *
 * @slot before-body - This slot is for passing the content before the body
 * @slot body - This slot is for passing the text content for the card
 * @slot after-body - This slot is for passing the content after the body
 * @slot footer-link - This slot is for passing \`mdc-link\` component within the footer section.
 * @slot footer-button-primary - This slot is for passing primary variant of \`mdc-button\` component within the footer section.
 *
 * @csspart header - The header part of the card
 * @csspart icon - The icon part of the card header
 * @csspart body - The body part of the card
 * @csspart image - The image part of the card
 * @csspart footer - The footer part of the card
 * @csspart footer-link - The link part of the card footer
 * @csspart footer-button-primary - The primary button part of the card footer
 * @csspart footer-button-secondary - The secondary button part of the card footer
 * @csspart icon-button - The icon button part of the card header
 * @csspart text - The text part of the card
 * @csspart check - The check part of the card
 * @csspart check-icon - The check icon part of the card
 * @csspart check-icon-button - The check icon button part of the card
 *
 * @cssproperty --mdc-card-width - The width of the card
 *
 * @event click - (React: onClick) Event that gets dispatched when the card is clicked. It toggles the checked state.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the card.
 * It toggles the checked state when enter key is used.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the card.
 * It toggles the checked state when space key is used.
 * @event focus - (React: onFocus) Event that gets dispatched when the card receives focus.
 * @event change - (React: onChange) Event that gets dispatched when the card's checked state changes.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"CardRadio",module:"components/cardradio/cardradio.component.js"}}]},{kind:"javascript-module",path:"components/checkbox/checkbox.component.js",declarations:[{kind:"class",description:`Checkboxes allow users to select multiple options from a list or turn an item/feature on or off.
These are often used in forms, settings, and selections in lists.

A checkbox component contains an optional label and an optional helper text.

To create a group of checkboxes, use the FormFieldGroup component.`,name:"Checkbox",cssProperties:[{description:"Allows customization of the background color on hover.",name:"--mdc-checkbox-background-color-hover"},{description:"Background color for a selected checkbox when hovered.",name:"--mdc-checkbox-checked-background-color-hover"},{description:"Background color for a selected checkbox when pressed.",name:"--mdc-checkbox-checked-pressed-icon-color"},{description:"Background color for a selected checkbox when pressed.",name:"--mdc-checkbox-pressed-icon-color"},{description:"Background color for a selected checkbox when disabled.",name:"--mdc-checkbox-disabled-checked-icon-color"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is selected or unselected.",attribute:"checked",reflects:!0},{kind:"field",name:"indeterminate",type:{text:"boolean"},default:"false",description:`This property is used to determine the parent checkbox in a nested checkbox group.
If any one of the children is unselected, then the parent checkbox will be indeterminate.
If all children are either selected or unselected, then the parent checkbox will not be indeterminate.`,attribute:"indeterminate",reflects:!0},{kind:"field",name:"autofocus",type:{text:"boolean"},default:"false",description:`Automatically focus on the element when the page loads.
[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)`,attribute:"autofocus",reflects:!0},{kind:"method",name:"setFormValue",privacy:"private",description:`Updates the form value to reflect the current state of the checkbox.
If checked, the value is set to either the user-provided value or 'on' if no value is provided.
If unchecked, the value is set to null.`},{kind:"method",name:"manageRequired",privacy:"private",description:`Manages the required state of the checkbox.
If the checkbox is not checked and the required property is set, then the checkbox is invalid.`},{kind:"method",name:"toggleState",privacy:"private",return:{type:{text:"void"}},description:`Toggles the state of the checkbox element.
If the element is not disabled, then
the checked property is toggled and the indeterminate property is set to false.`},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the checkbox.
When the user presses Enter, the form is submitted.`},{kind:"method",name:"handleChange",privacy:"public",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"}}],description:`Toggles the state of the checkbox element.
and dispatch the new change event.`},{kind:"field",name:"renderLabelAndHelperText",privacy:"private"},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{type:{text:"EventConstructor"}},{description:"(React: onChange) Event that gets dispatched when the checkbox state changes.",name:"change",reactName:"onChange"},{description:"(React: onFocus) Event that gets dispatched when the checkbox receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is selected or unselected.",fieldName:"checked"},{name:"indeterminate",type:{text:"boolean"},default:"false",description:`This property is used to determine the parent checkbox in a nested checkbox group.
If any one of the children is unselected, then the parent checkbox will be indeterminate.
If all children are either selected or unselected, then the parent checkbox will not be indeterminate.`,fieldName:"indeterminate"},{name:"autofocus",type:{text:"boolean"},default:"false",description:`Automatically focus on the element when the page loads.
[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)`,fieldName:"autofocus"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper/formfieldwrapper.component"},tagName:"mdc-checkbox",jsDoc:`/**
 * Checkboxes allow users to select multiple options from a list or turn an item/feature on or off.
 * These are often used in forms, settings, and selections in lists.
 *
 * A checkbox component contains an optional label and an optional helper text.
 *
 * To create a group of checkboxes, use the FormFieldGroup component.
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-staticcheckbox
 * @dependency mdc-text
 * @dependency mdc-toggletip
 *
 * @tagname mdc-checkbox
 *
 * @event change - (React: onChange) Event that gets dispatched when the checkbox state changes.
 * @event focus - (React: onFocus) Event that gets dispatched when the checkbox receives focus.
 *
 * @cssproperty --mdc-checkbox-background-color-hover - Allows customization of the background color on hover.
 * @cssproperty --mdc-checkbox-checked-background-color-hover - Background color for a selected checkbox when hovered.
 * @cssproperty --mdc-checkbox-checked-pressed-icon-color - Background color for a selected checkbox when pressed.
 * @cssproperty --mdc-checkbox-pressed-icon-color - Background color for a selected checkbox when pressed.
 * @cssproperty --mdc-checkbox-disabled-checked-icon-color - Background color for a selected checkbox when disabled.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Checkbox",module:"components/checkbox/checkbox.component.js"}}]},{kind:"javascript-module",path:"components/chip/chip.component.js",declarations:[{kind:"class",description:`mdc-chip is an interactive element that can be used to represent a chip. It supports a leading icon along with label.
Consumers can wrap this component around a tooltip to provide additional context.

It is recommended to keep the label text for the chip component concise and compact.
For best results, we recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.

This component is built by extending Buttonsimple.`,name:"Chip",cssProperties:[{description:"The color of the chip.",name:"--mdc-chip-color"},{description:"The border color of the chip.",name:"--mdc-chip-border-color"},{description:"The background color of the chip.",name:"--mdc-chip-background-color"}],cssParts:[{description:"The label part of the chip.",name:"label"}],members:[{kind:"field",name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",attribute:"color",reflects:!0},{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,attribute:"label"},{kind:"method",name:"renderIcon",privacy:"private",description:"Renders the icon element if available.",return:{type:{text:""}}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the chip is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the chip.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the chip.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the chip receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],attributes:[{name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",fieldName:"color"},{name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,fieldName:"label"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-chip",jsDoc:`/**
 * mdc-chip is an interactive element that can be used to represent a chip. It supports a leading icon along with label.
 * Consumers can wrap this component around a tooltip to provide additional context.
 *
 * It is recommended to keep the label text for the chip component concise and compact.
 * For best results, we recommend limiting the <b>maximum length of the label text to 20 characters</b>,
 * including empty spaces to split words.
 *
 * This component is built by extending Buttonsimple.
 *
 * @tagname mdc-chip
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @cssproperty --mdc-chip-color - The color of the chip.
 * @cssproperty --mdc-chip-border-color - The border color of the chip.
 * @cssproperty --mdc-chip-background-color - The background color of the chip.
 *
 * @csspart label - The label part of the chip.
 *
 * @event click - (React: onClick) This event is dispatched when the chip is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the chip.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the chip.
 * @event focus - (React: onFocus) This event is dispatched when the chip receives focus.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Chip",module:"components/chip/chip.component.js"}}]},{kind:"javascript-module",path:"components/coachmark/coachmark.component.js",declarations:[{kind:"class",description:`Coachmark component based on top of the popover component,
with the default value of certain properties changed.`,name:"Coachmark",cssProperties:[{description:"radius of the arrow border",name:"--mdc-popover-arrow-border-radius",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border of the arrow",name:"--mdc-popover-arrow-border",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"primary background color of the popover",name:"--mdc-popover-primary-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border color of the popover",name:"--mdc-popover-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted background color of the popover",name:"--mdc-popover-inverted-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted border color of the popover",name:"--mdc-popover-inverted-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted text color of the popover",name:"--mdc-popover-inverted-text-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"elevation of the popover",name:"--mdc-popover-elevation-3",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max width of the popover",name:"--mdc-popover-max-width",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max height of the popover",name:"--mdc-popover-max-height",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],slots:[{description:"Default slot for modal container",name:"",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],members:[{kind:"field",name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Coachmark to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"manual",attribute:"trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"showArrow",type:{text:"boolean"},description:"The arrow visibility of the Coachmark.",default:"true",attribute:"show-arrow",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButton",type:{text:"boolean"},description:"The close button visibility of the Coachmark.",default:"true",attribute:"close-button",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"disableAriaExpanded",type:{text:"boolean"},description:"Disable aria-expanded attribute on trigger element.",default:"true",attribute:"disable-aria-expanded",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"zIndex",type:{text:"number"},description:`IMPLEMENT THIS IN YOUR COMPONENT.

The z-index of the component where the backdrop will be attached to.
The backdrop itself will have a z-index of \`zIndex - 1\`.`,default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"preventScroll",type:{text:"boolean"},description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"prevent-scroll",reflects:!0,privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"field",name:"focusTrap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"focus-trap",reflects:!0,privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",attribute:"id",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,attribute:"triggerID",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",attribute:"placement",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",attribute:"color",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",attribute:"visible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",attribute:"offset",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryRoot",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",attribute:"boundary-root",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryPadding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",attribute:"boundary-padding",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",attribute:"interactive",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",attribute:"delay",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnEscape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",attribute:"hide-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"propagateEventOnEscape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",attribute:"propagate-event-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnBlur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",attribute:"hide-on-blur",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnOutsideClick",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",attribute:"hide-on-outside-click",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusBackToTrigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",attribute:"focus-back-to-trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",attribute:"backdrop",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",attribute:"backdrop-append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",attribute:"is-backdrop-invisible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",attribute:"flip",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",attribute:"size",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"appendTo",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",attribute:"append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",attribute:"close-button-aria-label",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",attribute:"strategy",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",attribute:"role",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,attribute:"aria-labelledby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaDescribedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",attribute:"aria-describedby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"keepConnectedTooltipClosed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,attribute:"keep-connected-tooltip-closed",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"arrowElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"storeConnectedTooltip",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setupTriggerRelatedElement",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cleanupTrigger",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"setupTriggerListeners",privacy:"private",description:`Sets up the trigger related event listeners, based on the trigger type.
Includes fallback for mouseenter trigger to also handle focusin for non-interactive popovers.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeTriggerListeners",privacy:"private",description:"Removes the trigger related event listeners.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeAllListeners",privacy:"private",description:"Removes all event listeners related to the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onOutsidePopoverClick",privacy:"protected",description:"Handles the outside click event to close the popover.",parameters:[{description:"The mouse event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onEscapeKeydown",privacy:"private",description:`Handles the escape keydown event to close the popover.

This method is attached to the document.`,parameters:[{description:"The keyboard event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onPopoverFocusOut",privacy:"private",description:"Handles the popover focus out event.",parameters:[{description:"The focus event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isOpenUpdated",privacy:"protected",parameters:[{name:"oldValue",type:{text:"boolean"},description:"The old value of the visible property."},{name:"newValue",type:{text:"boolean"},description:"The new value of the visible property."}],description:`Handles the popover visibility change and position the popover.
Handles the exit event to close the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseEnter",privacy:"private",description:"Handles mouse enter event on the trigger element.\nThis method sets the `isHovered` flag to true and shows the popover",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseLeave",privacy:"private",description:"Handles mouse leave event on the trigger element.\nThis method sets the `isHovered` flag to false and starts the close delay\ntimer to hide the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusOut",privacy:"private",description:`Handles focus out event on the trigger element.
This method checks if the popover is not hovered and hides the popover.
If the popover is hovered, it will not hide the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusIn",privacy:"private",description:`Handles focus in event on the trigger element.
This method checks if the trigger element has visible focus or is being hovered.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"startCloseDelay",privacy:"private",description:`Starts the close delay timer.
If the popover is not interactive, it will close the popover after the delay.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cancelCloseDelay",privacy:"private",description:"Cancels the close delay timer.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"show",privacy:"public",description:"Shows the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hide",privacy:"public",description:"Hides the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"togglePopoverVisible",privacy:"public",description:"Toggles the popover visibility.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"positionPopover",privacy:"private",description:`Positions the popover based on the trigger element.
It also handles the flip, size and arrow placement.
It uses the floating-ui/dom library to calculate the position.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"findClosestPopover",privacy:"protected",description:`Finds the closest popover to the passed element in the DOM tree.

Useful when need to find the parent popover in a nested popover scenario.`,parameters:[{description:"The element to start searching from.",name:"element"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"utils",default:"new PopoverUtils(this)",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}}],events:[{description:"(React: onShown) This event is dispatched when the coachmark is shown",name:"shown",reactName:"onShown",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onHidden) This event is dispatched when the coachmark is hidden",name:"hidden",reactName:"onHidden",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onCreated) This event is dispatched when the coachmark is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onDestroyed) This event is dispatched when the coachmark is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],attributes:[{name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Coachmark to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"manual",fieldName:"trigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"show-arrow",type:{text:"boolean"},description:"The arrow visibility of the Coachmark.",default:"true",fieldName:"showArrow",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button",type:{text:"boolean"},description:"The close button visibility of the Coachmark.",default:"true",fieldName:"closeButton",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"disable-aria-expanded",type:{text:"boolean"},description:"Disable aria-expanded attribute on trigger element.",default:"true",fieldName:"disableAriaExpanded",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"FocusTrapMixin",module:"src/utils/mixins/FocusTrapMixin.ts"}},{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",fieldName:"id",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,fieldName:"triggerID",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",fieldName:"placement",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",fieldName:"color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",fieldName:"visible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",fieldName:"offset",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-root",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",fieldName:"boundaryRoot",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-padding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",fieldName:"boundaryPadding",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",fieldName:"focusTrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"prevent-scroll",type:{text:"boolean"},description:"Prevent outside scrolling when popover is shown.",default:"false",fieldName:"preventScroll",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",fieldName:"interactive",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",fieldName:"delay",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-escape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",fieldName:"hideOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"propagate-event-on-escape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",fieldName:"propagateEventOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-blur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",fieldName:"hideOnBlur",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-outside-click",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",fieldName:"hideOnOutsideClick",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-back-to-trigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",fieldName:"focusBackToTrigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",fieldName:"backdrop",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop-append-to",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",fieldName:"backdropAppendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"is-backdrop-invisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",fieldName:"isBackdropInvisible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",fieldName:"flip",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",fieldName:"size",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"z-index",type:{text:"number"},description:"The z-index of the popover.",default:"1000",fieldName:"zIndex",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"append-to",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",fieldName:"appendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",fieldName:"closeButtonAriaLabel",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",fieldName:"strategy",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",fieldName:"role",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,fieldName:"ariaLabelledby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",fieldName:"ariaDescribedby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"keep-connected-tooltip-closed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,fieldName:"keepConnectedTooltipClosed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],superclass:{name:"Popover",module:"/src/components/popover/popover.component"},tagName:"mdc-coachmark",jsDoc:`/**
 * Coachmark component based on top of the popover component,
 * with the default value of certain properties changed.
 *
 * @dependency mdc-popover
 *
 * @tagname mdc-coachmark
 *
 * @event shown - (React: onShown) This event is dispatched when the coachmark is shown
 * @event hidden - (React: onHidden) This event is dispatched when the coachmark is hidden
 * @event created - (React: onCreated) This event is dispatched when the coachmark is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched when the coachmark is
 * destroyed (removed from the DOM)
 *
 * @cssproperty --mdc-popover-arrow-border-radius - radius of the arrow border
 * @cssproperty --mdc-popover-arrow-border - border of the arrow
 * @cssproperty --mdc-popover-primary-background-color - primary background color of the popover
 * @cssproperty --mdc-popover-border-color - border color of the popover
 * @cssproperty --mdc-popover-inverted-background-color - inverted background color of the popover
 * @cssproperty --mdc-popover-inverted-border-color - inverted border color of the popover
 * @cssproperty --mdc-popover-inverted-text-color - inverted text color of the popover
 * @cssproperty --mdc-popover-elevation-3 - elevation of the popover
 *
 * @slot - Default slot for modal container
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Coachmark",module:"components/coachmark/coachmark.component.js"}}]},{kind:"javascript-module",path:"components/combobox/combobox.component.js",declarations:[{kind:"class",description:"combobox component, which ...",name:"Combobox",cssProperties:[{description:"Description of the CSS custom property",name:"--custom-property-name"}],slots:[{description:"This is a default/unnamed slot",name:"default"}],members:[],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-combobox",jsDoc:`/**
 * combobox component, which ...
 *
 * @tagname mdc-combobox
 *
 * @slot default - This is a default/unnamed slot
 *
 * @cssproperty --custom-property-name - Description of the CSS custom property
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Combobox",module:"components/combobox/combobox.component.js"}}]},{kind:"javascript-module",path:"components/dialog/dialog.component.js",declarations:[{kind:"class",description:`Dialog component is a modal dialog that can be used to display information or prompt the user for input.
It can be used to create custom dialogs where content for the body and footer actions is provided by the consumer.
The dialog is available in 5 sizes: small, medium, large, xlarge and fullscreen. It may also receive custom styling/sizing.
The dialog interrupts the user and will block interaction with the rest of the application until it is closed.

The dialog can be controlled solely through the \`visible\` property, no trigger element is required.
If a \`triggerId\` is provided, the dialog will manage focus with that element, otherwise it will
remember the previously focused element before the dialog was opened.

The dialog is a controlled component, meaning it does not have its own state management for visibility.
Use the \`visible\` property to control the visibility of the dialog.
Use the \`onClose\` event to handle the close action of the dialog (fired when Close button is clicked
or Escape is pressed).

Dialog component have 2 variants: default and promotional.

**Accessibility notes for consuming (have to be explicitly set when you consume the component)**

- The dialog should have an aria-label or aria-labelledby attribute to provide a label for screen readers.
- Use aria-labelledby to reference the ID of the element that labels the dialog when there is no visible title.

**Note: Programmatic show/hide requires the ? prefix on the visible attribute**
- Use \`?visible=true/false\` as an attribute instead of \`visible=true/false\`
- Reference docs for more info: https://lit.dev/docs/templates/expressions/#boolean-attribute-expressions`,name:"Dialog",cssProperties:[{description:"primary background color of the dialog",name:"--mdc-dialog-primary-background-color"},{description:"border color of the dialog",name:"--mdc-dialog-border-color"},{description:"text color of the header/title of the dialog",name:"--mdc-dialog-header-text-color"},{description:"text color of the below header description of the dialog",name:"--mdc-dialog-description-text-color"},{description:"elevation of the dialog",name:"--mdc-dialog-elevation-3"},{description:"width of the dialog",name:"--mdc-dialog-width"}],slots:[{description:"Slot for the dialog header content. This can be used to pass custom header content.",name:"header-prefix"},{description:"Slot for the dialog body content",name:"dialog-body"},{description:"This slot is for passing `mdc-link` component within the footer section.",name:"footer-link"},{description:"This slot is for passing secondary variant of `mdc-button` component within the footer section.",name:"footer-button-secondary"},{description:"This slot is for passing primary variant of `mdc-button` component within the footer section.",name:"footer-button-primary"},{description:" This slot is for passing custom footer content. Only use this if really needed, using the footer-link and footer-button slots is preferred",name:"footer"}],members:[{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the dialog",attribute:"id",reflects:!0},{kind:"field",name:"triggerId",type:{text:"string | undefined"},description:"The ID of the element that triggers the dialog",default:"undefined",attribute:"triggerId",reflects:!0},{kind:"field",name:"visible",type:{text:"boolean"},description:`The visibility of the dialog

Dialog is a controlled component, visible is the only property that controls the visibility of the dialog.`,default:"false",attribute:"visible",reflects:!0},{kind:"field",name:"zIndex",type:{text:"number"},description:"The z-index of the dialog\n\nThe backdrop will have z-index of `zIndex - 1`",default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"BackdropMixin",module:"utils/mixins/BackdropMixin.js"}},{kind:"field",name:"size",type:{text:"DialogSize"},description:"The size of the dialog, can be 'small' (432px width), 'medium' (656px width), 'large' (992px width), 'xlarge' (90% width) or 'fullscreen' (100% width).",default:"small",attribute:"size",reflects:!0},{kind:"field",name:"variant",type:{text:"DialogVariant"},description:"The variant of the dialog, can be 'default' or 'promotional'",default:"default",attribute:"variant",reflects:!0},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"Defines a string value for the aria-label attribute for close button accessibility",attribute:"close-button-aria-label"},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Defines a string value for the aria-label attribute when header is not used",attribute:"aria-label",reflects:!0},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-labelledby attribute that refers to the element
labeling the dialog for accessibility`,attribute:"aria-labelledby",reflects:!0},{kind:"field",name:"ariaDescribedBy",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-describedby attribute that refers to the element
describing the dialog for accessibility`,attribute:"aria-describedby",reflects:!0},{kind:"field",name:"ariaDescription",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-description attribute that refers to the element
describing the dialog for accessibility`,attribute:"aria-description",reflects:!0},{kind:"field",name:"headerText",type:{text:"string | undefined"},description:"Defines a string value to display as the title of the dialog",attribute:"header-text",reflects:!0},{kind:"field",name:"descriptionText",type:{text:"string | undefined"},description:"Defines a string value to display as the under-header description of the dialog",attribute:"description-text",reflects:!0},{kind:"field",name:"headerTagName",type:{text:"string"},description:"The html tag to be used for the header text",attribute:"header-tag-name",reflects:!0},{kind:"field",name:"descriptionTagName",type:{text:"string"},description:"The html tag to be used for the below-header description text",attribute:"description-tag-name",reflects:!0},{kind:"field",name:"role",type:{text:"DialogRole"},description:"Role of the dialog",default:"dialog",attribute:"role",reflects:!0},{kind:"field",name:"disableAriaHasPopup",type:{text:"boolean"},description:`Disable setting the aria-haspopup attribute on trigger element.
Make sure to set this to true when the popover is extended and its role
is not 'dialog' or 'alertdialog' i.e. listbox, menu, etc.`,default:"false",attribute:"disable-aria-haspopup",reflects:!0},{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected",description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

NOTE: this should only be disabled in rare cases! By default a Modal Dialog
should trap focus always.`,default:"true",attribute:"focus-trap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"closeDialog",privacy:"private",description:`Fired when Close Button is clicked or Escape key is pressed.
This method dispatches the close event. Setting visible to false
has to be done by the consumer of the component.`},{kind:"method",name:"isOpenUpdated",privacy:"private",parameters:[{name:"oldValue",type:{text:"boolean | undefined"},description:"The old value of the visible property."},{name:"newValue",type:{text:"boolean"},description:"The new value of the visible property."}],description:`Handles the dialog visibility change.
Handles the exit event to close the dialog.`},{kind:"field",name:"preventScroll",type:{text:"boolean"},privacy:"protected",description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`,inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}},inheritedFrom:{name:"FooterMixin",module:"utils/mixins/FooterMixin.js"}}],events:[{description:"(React: onShown) Dispatched when the dialog is shown",name:"shown",reactName:"onShown"},{description:"(React: onHidden) Dispatched when the dialog is hidden",name:"hidden",reactName:"onHidden"},{description:"(React: onCreated) Dispatched when the dialog is created (added to the DOM)",name:"created",reactName:"onCreated"},{description:"(React: onDestroyed) Dispatched when the dialog is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed"},{description:"(React: onClose) Dispatched when the Close Button is clicked or Escape key is pressed (this does not hide the dialog)",name:"close",reactName:"onClose"}],attributes:[{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the dialog",fieldName:"id"},{name:"triggerId",type:{text:"string | undefined"},description:"The ID of the element that triggers the dialog",default:"undefined",fieldName:"triggerId"},{name:"visible",type:{text:"boolean"},description:`The visibility of the dialog

Dialog is a controlled component, visible is the only property that controls the visibility of the dialog.`,default:"false",fieldName:"visible"},{name:"z-index",type:{text:"number"},description:"The z-index of the dialog\n\nThe backdrop will have z-index of `zIndex - 1`",default:"1000",fieldName:"zIndex"},{name:"size",type:{text:"DialogSize"},description:"The size of the dialog, can be 'small' (432px width), 'medium' (656px width), 'large' (992px width), 'xlarge' (90% width) or 'fullscreen' (100% width).",default:"small",fieldName:"size"},{name:"variant",type:{text:"DialogVariant"},description:"The variant of the dialog, can be 'default' or 'promotional'",default:"default",fieldName:"variant"},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"Defines a string value for the aria-label attribute for close button accessibility",fieldName:"closeButtonAriaLabel"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Defines a string value for the aria-label attribute when header is not used",fieldName:"ariaLabel"},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-labelledby attribute that refers to the element
labeling the dialog for accessibility`,fieldName:"ariaLabelledby"},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-describedby attribute that refers to the element
describing the dialog for accessibility`,fieldName:"ariaDescribedBy"},{name:"aria-description",type:{text:"string | null"},default:"null",description:`Defines a string value for the aria-description attribute that refers to the element
describing the dialog for accessibility`,fieldName:"ariaDescription"},{name:"header-text",type:{text:"string | undefined"},description:"Defines a string value to display as the title of the dialog",fieldName:"headerText"},{name:"description-text",type:{text:"string | undefined"},description:"Defines a string value to display as the under-header description of the dialog",fieldName:"descriptionText"},{name:"header-tag-name",type:{text:"string"},description:"The html tag to be used for the header text",fieldName:"headerTagName"},{name:"description-tag-name",type:{text:"string"},description:"The html tag to be used for the below-header description text",fieldName:"descriptionTagName"},{name:"role",type:{text:"DialogRole"},description:"Role of the dialog",default:"dialog",fieldName:"role"},{name:"disable-aria-haspopup",type:{text:"boolean"},description:`Disable setting the aria-haspopup attribute on trigger element.
Make sure to set this to true when the popover is extended and its role
is not 'dialog' or 'alertdialog' i.e. listbox, menu, etc.`,default:"false",fieldName:"disableAriaHasPopup"},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

NOTE: this should only be disabled in rare cases! By default a Modal Dialog
should trap focus always.`,default:"true",fieldName:"focusTrap"},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"FocusTrapMixin",module:"src/utils/mixins/FocusTrapMixin.ts"}}],mixins:[{name:"BackdropMixin",module:"/src/utils/mixins/BackdropMixin"},{name:"PreventScrollMixin",module:"/src/utils/mixins/PreventScrollMixin"},{name:"FocusTrapMixin",module:"/src/utils/mixins/FocusTrapMixin"},{name:"FooterMixin",module:"/src/utils/mixins/FooterMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-dialog",jsDoc:`/**
 * Dialog component is a modal dialog that can be used to display information or prompt the user for input.
 * It can be used to create custom dialogs where content for the body and footer actions is provided by the consumer.
 * The dialog is available in 5 sizes: small, medium, large, xlarge and fullscreen. It may also receive custom styling/sizing.
 * The dialog interrupts the user and will block interaction with the rest of the application until it is closed.
 *
 * The dialog can be controlled solely through the \`visible\` property, no trigger element is required.
 * If a \`triggerId\` is provided, the dialog will manage focus with that element, otherwise it will
 * remember the previously focused element before the dialog was opened.
 *
 * The dialog is a controlled component, meaning it does not have its own state management for visibility.
 * Use the \`visible\` property to control the visibility of the dialog.
 * Use the \`onClose\` event to handle the close action of the dialog (fired when Close button is clicked
 * or Escape is pressed).
 *
 * Dialog component have 2 variants: default and promotional.
 *
 * **Accessibility notes for consuming (have to be explicitly set when you consume the component)**
 *
 * - The dialog should have an aria-label or aria-labelledby attribute to provide a label for screen readers.
 * - Use aria-labelledby to reference the ID of the element that labels the dialog when there is no visible title.
 *
 * **Note: Programmatic show/hide requires the ? prefix on the visible attribute**
 * - Use \`?visible=true/false\` as an attribute instead of \`visible=true/false\`
 * - Reference docs for more info: https://lit.dev/docs/templates/expressions/#boolean-attribute-expressions
 *
 * @dependency mdc-button
 * @dependency mdc-text
 *
 * @tagname mdc-dialog
 *
 * @event shown - (React: onShown) Dispatched when the dialog is shown
 * @event hidden - (React: onHidden) Dispatched when the dialog is hidden
 * @event created - (React: onCreated) Dispatched when the dialog is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) Dispatched when the dialog is destroyed (removed from the DOM)
 * @event close - (React: onClose) Dispatched when the Close Button is clicked or Escape key is pressed
 * (this does not hide the dialog)
 *
 * @cssproperty --mdc-dialog-primary-background-color - primary background color of the dialog
 * @cssproperty --mdc-dialog-border-color - border color of the dialog
 * @cssproperty --mdc-dialog-header-text-color - text color of the header/title of the dialog
 * @cssproperty --mdc-dialog-description-text-color - text color of the below header description of the dialog
 * @cssproperty --mdc-dialog-elevation-3 - elevation of the dialog
 * @cssproperty --mdc-dialog-width - width of the dialog
 *
 * @slot header-prefix - Slot for the dialog header content. This can be used to pass custom header content.
 * @slot dialog-body - Slot for the dialog body content
 * @slot footer-link - This slot is for passing \`mdc-link\` component within the footer section.
 * @slot footer-button-secondary - This slot is for passing secondary variant of \`mdc-button\` component
 * within the footer section.
 * @slot footer-button-primary - This slot is for passing primary variant of
 * \`mdc-button\` component within the footer section.
 * @slot footer -  This slot is for passing custom footer content. Only use this if really needed,
 * using the footer-link and footer-button slots is preferred
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Dialog",module:"components/dialog/dialog.component.js"}}]},{kind:"javascript-module",path:"components/divider/divider.component.js",declarations:[{kind:"class",description:`\`mdc-divider\` is a component that provides a line to separate and organize content.
It can also include a button or text positioned centrally, allowing users to interact with the layout.

**Divider Orientation:**
- **Horizontal**: A thin, horizontal line.
- **Vertical**: A thin, vertical line.

**Divider Variants:**
- **solid**: Solid line.
- **gradient**: Gradient Line.

**Divider Types:**
- The type of divider is inferred based on the kind of slot present.
 - **Primary**: A simple horizontal or vertical divider.
 - **Text**: A horizontal divider with a text label in the center.
 - **Grabber Button**: A horizontal or vertical divider with a styled button in the center.

**Accessibility:**
- When the slot is replaced by an \`mdc-button\`:
  - \`aria-label\` should be passed to the \`mdc-button\`.
  - \`aria-expanded\` should be passed to the \`mdc-button\`.

**Notes:**
- If the slot is replaced by an invalid tag name or contains multiple elements,
  the divider defaults to the **Primary** type.
- To override the styles of the divider, use the provided CSS custom properties.`,name:"Divider",cssProperties:[{description:"background color of the divider",name:"--mdc-divider-background-color"},{description:"width of the divider",name:"--mdc-divider-width"},{description:"gradient of the horizontal divider",name:"--mdc-divider-horizontal-gradient"},{description:"gradient of the vertical divider",name:"--mdc-divider-vertical-gradient"},{description:"font size of label in the text divider",name:"--mdc-divider-text-size"},{description:"font color of label in the text divider",name:"--mdc-divider-text-color"},{description:"left and right margin of label in the text divider",name:"--mdc-divider-text-margin"},{description:"line height of label in the text divider",name:"--mdc-divider-text-line-height"},{description:"background color of the grabber button in rest state",name:"--mdc-divider-grabber-button-background-color-normal"},{description:"background color of the grabber button in hover state",name:"--mdc-divider-grabber-button-background-color-hover"},{description:"background color of the grabber button in pressed state",name:"--mdc-divider-grabber-button-background-color-pressed"},{description:"border color of the grabber button",name:"--mdc-divider-grabber-button-border-color"},{description:"border radius of the grabber button",name:"--mdc-divider-grabber-button-border-radius"}],members:[{kind:"field",name:"orientation",type:{text:"DividerOrientation"},description:`Two orientations of divider
- **horizontal**: A thin, horizontal line with 0.0625rem width.
- **vertical**: A thin, vertical line with 0.0625rem width.

Note: We do not support "Vertical Text Divider" as of now.`,default:"horizontal",attribute:"orientation",reflects:!0},{kind:"field",name:"variant",type:{text:"DividerVariant"},description:`Two variants of divider
- **solid**: Solid line.
- **gradient**: Gradient Line that fades on either sides of the divider.`,default:"solid",attribute:"variant",reflects:!0},{kind:"field",name:"arrowDirection",type:{text:"Directions"},description:`Direction of the arrow icon, if applicable.
- **positive**
- **negative**

Note: Positive and Negative directions are defined based on Cartesian plane.`,default:"'negative'",attribute:"arrow-direction",reflects:!0},{kind:"field",name:"buttonPosition",type:{text:"Directions"},description:`Position of the button, if applicable.
- **positive**
- **negative**

Note: Positive and Negative directions are defined based on Cartesian plane.`,default:"'negative'",attribute:"button-position",reflects:!0},{kind:"method",name:"setVariant",privacy:"private",parameters:[{name:"variant",type:{text:"DividerVariant"},description:"The variant to set."}],description:`Sets the variant attribute for the divider component.
If the provided variant is not included in the DIVIDER_VARIANT,
it defaults to the value specified in DEFAULTS.VARIANT.`},{kind:"method",name:"setOrientation",privacy:"private",parameters:[{name:"orientation",type:{text:"DividerOrientation"},description:"The orientation to set."}],description:`Sets the orientation attribute for the divider component.
If the provided orientation is not included in the DIVIDER_ORIENTATION,
it defaults to the value specified in DEFAULTS.ORIENTATION.`},{kind:"method",name:"ensureValidDirections",privacy:"private",description:`Sets the buttonPosition and arrowDirection attribute for the divider component.
If the provided buttonPosition and arrowDirection are not included in the DIRECTIONS,
it defaults to the value specified in DIRECTIONS based on the ORIENTATION.`,parameters:[{description:"The buttonPosition to set.",name:"buttonPosition"},{description:"The arrowDirection to set.",name:"arrowDirection"}]},{kind:"method",name:"setGrabberButton",privacy:"private",return:{type:{text:"void"}},description:"Configures the grabber button within the divider.\n\n- Sets the `prefix-icon` attribute for the grabber button based\non the `arrow-direction` and `orientation` properties.\n\nThis method updates the DOM element dynamically if a grabber button is present."},{kind:"method",name:"getArrowIcon",privacy:"private",return:{type:{text:""}},description:"Determines the arrow icon based on the consumer-defined `arrowDirection`."},{kind:"method",name:"inferDividerType",privacy:"private",description:"Infers the type of divider based on the kind of slot present.",parameters:[{description:"default slot of divider",name:"slot"}]}],attributes:[{name:"orientation",type:{text:"DividerOrientation"},description:`Two orientations of divider
- **horizontal**: A thin, horizontal line with 0.0625rem width.
- **vertical**: A thin, vertical line with 0.0625rem width.

Note: We do not support "Vertical Text Divider" as of now.`,default:"horizontal",fieldName:"orientation"},{name:"variant",type:{text:"DividerVariant"},description:`Two variants of divider
- **solid**: Solid line.
- **gradient**: Gradient Line that fades on either sides of the divider.`,default:"solid",fieldName:"variant"},{name:"arrow-direction",type:{text:"Directions"},description:`Direction of the arrow icon, if applicable.
- **positive**
- **negative**

Note: Positive and Negative directions are defined based on Cartesian plane.`,default:"'negative'",fieldName:"arrowDirection"},{name:"button-position",type:{text:"Directions"},description:`Position of the button, if applicable.
- **positive**
- **negative**

Note: Positive and Negative directions are defined based on Cartesian plane.`,default:"'negative'",fieldName:"buttonPosition"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-divider",jsDoc:`/**
 * \`mdc-divider\` is a component that provides a line to separate and organize content.
 * It can also include a button or text positioned centrally, allowing users to interact with the layout.
 *
 * **Divider Orientation:**
 * - **Horizontal**: A thin, horizontal line.
 * - **Vertical**: A thin, vertical line.
 *
 * **Divider Variants:**
 * - **solid**: Solid line.
 * - **gradient**: Gradient Line.
 *
 * **Divider Types:**
 * - The type of divider is inferred based on the kind of slot present.
 *  - **Primary**: A simple horizontal or vertical divider.
 *  - **Text**: A horizontal divider with a text label in the center.
 *  - **Grabber Button**: A horizontal or vertical divider with a styled button in the center.
 *
 * **Accessibility:**
 * - When the slot is replaced by an \`mdc-button\`:
 *   - \`aria-label\` should be passed to the \`mdc-button\`.
 *   - \`aria-expanded\` should be passed to the \`mdc-button\`.
 *
 * **Notes:**
 * - If the slot is replaced by an invalid tag name or contains multiple elements,
 *   the divider defaults to the **Primary** type.
 * - To override the styles of the divider, use the provided CSS custom properties.
 *
 * @tagname mdc-divider
 *
 * @cssproperty --mdc-divider-background-color - background color of the divider
 * @cssproperty --mdc-divider-width - width of the divider
 * @cssproperty --mdc-divider-horizontal-gradient - gradient of the horizontal divider
 * @cssproperty --mdc-divider-vertical-gradient - gradient of the vertical divider
 * @cssproperty --mdc-divider-text-size - font size of label in the text divider
 * @cssproperty --mdc-divider-text-color - font color of label in the text divider
 * @cssproperty --mdc-divider-text-margin - left and right margin of label in the text divider
 * @cssproperty --mdc-divider-text-line-height - line height of label in the text divider
 * @cssproperty --mdc-divider-grabber-button-background-color-normal - background color of the grabber button
 *  in rest state
 * @cssproperty --mdc-divider-grabber-button-background-color-hover - background color of the grabber button
 *  in hover state
 * @cssproperty --mdc-divider-grabber-button-background-color-pressed - background color of the grabber button
 *  in pressed state
 * @cssproperty --mdc-divider-grabber-button-border-color - border color of the grabber button
 * @cssproperty --mdc-divider-grabber-button-border-radius - border radius of the grabber button
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Divider",module:"components/divider/divider.component.js"}}]},{kind:"javascript-module",path:"components/filterchip/filterchip.component.js",declarations:[{kind:"class",description:`mdc-filterchip component is an interactive chip that consumers can use to select or deselect.
They can be found with lists or tables as quick filters.

This component is built on top of the mdc-chip component.`,name:"FilterChip",cssProperties:[{description:"The color of the chip.",name:"--mdc-chip-color",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}},{description:"The border color of the chip.",name:"--mdc-chip-border-color",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}},{description:"The background color of the chip.",name:"--mdc-chip-background-color",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}}],cssParts:[{description:"The label part of the chip.",name:"label",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}}],members:[{kind:"field",name:"selected",type:{text:"boolean"},default:"false",description:"The selected state of the filterchip.",attribute:"selected",reflects:!0},{kind:"method",name:"setSelected",privacy:"private",parameters:[{name:"selected",type:{text:"boolean"},description:"The selected state of the filterchip."}],description:`Sets the selected state of the filterchip along with the icon.
aria-pressed attribute is also set to true or false.`},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"},return:{type:{text:"void"}}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",attribute:"color",reflects:!0,inheritedFrom:{name:"Chip",module:"components/chip/chip.component.js"}},{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,attribute:"label",inheritedFrom:{name:"Chip",module:"components/chip/chip.component.js"}},{kind:"method",name:"renderIcon",privacy:"private",description:"Renders the icon element if available.",return:{type:{text:""}},inheritedFrom:{name:"Chip",module:"components/chip/chip.component.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the chip is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the chip.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the chip.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the chip receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],attributes:[{name:"selected",type:{text:"boolean"},default:"false",description:"The selected state of the filterchip.",fieldName:"selected"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",fieldName:"color",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}},{name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,fieldName:"label",inheritedFrom:{name:"Chip",module:"src/components/chip/chip.component.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],superclass:{name:"Chip",module:"/src/components/chip/chip.component"},tagName:"mdc-filterchip",jsDoc:`/**
 * mdc-filterchip component is an interactive chip that consumers can use to select or deselect.
 * They can be found with lists or tables as quick filters.
 *
 * This component is built on top of the mdc-chip component.
 *
 * @tagname mdc-filterchip
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @csspart label - The label part of the chip.
 *
 * @cssproperty --mdc-chip-color - The color of the chip.
 * @cssproperty --mdc-chip-border-color - The border color of the chip.
 * @cssproperty --mdc-chip-background-color - The background color of the chip.
 *
 * @event click - (React: onClick) This event is dispatched when the chip is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the chip.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the chip.
 * @event focus - (React: onFocus) This event is dispatched when the chip receives focus.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"FilterChip",module:"components/filterchip/filterchip.component.js"}}]},{kind:"javascript-module",path:"components/formfieldgroup/formfieldgroup.component.js",declarations:[{kind:"class",description:`\`mdc-formfieldgroup\` component, groups the form field components together.
All passed in children will have a gap of 12px (0.75rem) each applied.

This component is specifically for creating a \`checkbox\` group and a \`toggle\` group component.
For the radiogroup use the RadioGroup component instead.

The header text and description text are displayed above the items with accessible labels.<br/>
The consumer has to provide atleast the header-text or the aria-label,
like one of them <b>has</b> to be passed in always, otherwise its not accessible.

The role will be set to \`group\`.
The aria-label will be set with the data-aria-label property.
The aria-labelledby will be set with the header id which contains the header text information.
The aria-describedby will be set with the description id which contains the description text information.`,name:"FormfieldGroup",slots:[{description:"This is a default slot for checkbox or toggle components.",name:"default"}],members:[{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],mixins:[{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper/formfieldwrapper.component"},tagName:"mdc-formfieldgroup",jsDoc:`/**
 * \`mdc-formfieldgroup\` component, groups the form field components together.
 * All passed in children will have a gap of 12px (0.75rem) each applied.
 *
 * This component is specifically for creating a \`checkbox\` group and a \`toggle\` group component.
 * For the radiogroup use the RadioGroup component instead.
 *
 * The header text and description text are displayed above the items with accessible labels.<br/>
 * The consumer has to provide atleast the header-text or the aria-label,
 * like one of them <b>has</b> to be passed in always, otherwise its not accessible.
 *
 * The role will be set to \`group\`.
 * The aria-label will be set with the data-aria-label property.
 * The aria-labelledby will be set with the header id which contains the header text information.
 * The aria-describedby will be set with the description id which contains the description text information.
 *
 * @tagname mdc-formfieldgroup
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-toggletip
 *
 * @slot default - This is a default slot for checkbox or toggle components.
 */`,customElement:!0,attributes:[{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"FormfieldGroup",module:"components/formfieldgroup/formfieldgroup.component.js"}}]},{kind:"javascript-module",path:"components/formfieldwrapper/formfieldwrapper.component.js",declarations:[{kind:"class",description:`formfieldwrapper is a component that contains the label and helper/validation text
 that can be configured in various ways to suit different use cases (most of the input related components).
It is used as an internal component and is not intended to be used directly by consumers.`,name:"FormfieldWrapper",members:[{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],attributes:[{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label"},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required"},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType"},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText"},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText"},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement"},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-formfieldwrapper",jsDoc:`/**
 * formfieldwrapper is a component that contains the label and helper/validation text
 *  that can be configured in various ways to suit different use cases (most of the input related components).
 * It is used as an internal component and is not intended to be used directly by consumers.
 *
 * @tagname mdc-formfieldwrapper
 *
 * @dependency mdc-text
 * @dependency mdc-icon
 * @dependency mdc-button
 * @dependency mdc-toggletip
 *
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}]},{kind:"javascript-module",path:"components/icon/icon.component.js",declarations:[{kind:"class",description:`Icon component that dynamically displays SVG icons based on a valid name.

This component must be mounted within an \`IconProvider\` component.

The \`IconProvider\` defines the source URL from which icons are consumed.
The \`Icon\` component accepts a \`name\` attribute, which corresponds to
the file name of the icon to be loaded from the specified URL.

Once fetched, the icon will be rendered. If the fetching process is unsuccessful,
no icon will be displayed.

The \`size\` attribute allows for dynamic sizing of the icon based on the provided
\`length-unit\` attribute. This unit can either come from the \`IconProvider\`
or can be overridden for each individual icon. For example:
if \`size = 1\` and \`length-unit = 'em'\`, the dimensions of the icon will be
\`width: 1em; height: 1em\`.

Regarding accessibility, there are three types of icons: decorative, informative and informative standalone.

### Decorative Icons
- Decorative icons do not convey any essential information to the content of a page.
- They should be hidden from screen readers (SR) to prevent confusion for users.
- For decorative icons, an \`aria-label\` is not required, and the \`role\` will be set to null.

### Informative Icons
- Informative icons convey important information that is not adequately represented
  by surrounding text or components.
- They provide valuable context and must be announced by assistive technologies.
- For informative icons, an \`aria-label\` is required, and the \`role\` will be set to "img" automatically.
- If an \`aria-label\` is provided, the role will be set to 'img'; if it is absent,
  the role will be unset.

### Informative Standalone Icons
- If an icon is informative (as mentioned above) and does not belong to a button (=standalone), it must
have a Tooltip that describes what it means.
- For informative standalone icons, an \`aria-label\` & \`tabindex="0"\` is required,
and the \`role\` will be set to "img" automatically.
- **Only use this when a Icon is standalone and is not part of a button or other interactive elements.**`,name:"Icon",cssProperties:[{description:"Allows customization of the default fill color.",name:"--mdc-icon-fill-color"},{description:"Allows customization of the icon size.",name:"--mdc-icon-size"},{description:"Allows customization of the icon border radius.",name:"--mdc-icon-border-radius"}],cssParts:[{description:"The svg inside the icon element.",name:"icon"}],members:[{kind:"field",name:"iconData",type:{text:"HTMLElement | undefined"},privacy:"private"},{kind:"field",name:"lengthUnitFromContext",type:{text:"string | undefined"},privacy:"private"},{kind:"field",name:"sizeFromContext",type:{text:"number | undefined"},privacy:"private"},{kind:"field",name:"name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename)",attribute:"name",reflects:!0},{kind:"field",name:"size",type:{text:"number | undefined"},description:"Size of the icon (works in combination with length unit)",attribute:"size"},{kind:"field",name:"lengthUnit",type:{text:"string | undefined"},description:"Length unit attribute for overriding length-unit from `IconProvider`",attribute:"length-unit"},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"field",name:"ariaLabelledBy",type:{text:"string | null"},default:"null",description:"Aria-labelledby attribute to be set for accessibility",attribute:"aria-labelledby"},{kind:"field",name:"iconProviderContext",privacy:"private",readonly:!0},{kind:"field",name:"abortController",type:{text:"AbortController | undefined"},privacy:"private",default:"new AbortController()"},{kind:"method",name:"prepareIconElement",privacy:"private",parameters:[{name:"iconData",type:{text:"string"},description:"The icon string to be parsed"}],description:`Parse the icon string to an html element, set the attributes and
return the icon element`,return:{type:{text:""}}},{kind:"method",name:"getIconData",privacy:"private",description:`Fetches the icon (currently only svg) and sets state and attributes once fetched successfully

This method uses abortController.signal to cancel the fetch request when the component is disconnected or updated.
If the request is aborted after the fetch() call has been fulfilled but before the response body has been read,
then attempting to read the response body will reject with an AbortError exception.`},{kind:"method",name:"handleIconLoadedSuccess",privacy:"private",parameters:[{name:"iconHtml",type:{text:"HTMLElement"},description:"The icon html element which has been fetched from the icon provider."}],description:`Sets the iconData state to the fetched icon.
Dispatches a 'load' event on the component once the icon has been successfully loaded.`},{kind:"method",name:"handleIconLoadedFailure",privacy:"private",parameters:[{name:"error",type:{text:"unknown"}}],description:`Dispatches an 'error' event on the component when the icon fetching has failed.
This event bubbles and is cancelable.
The error detail is set to the error object.`},{kind:"method",name:"updateSize",privacy:"private",description:"Updates the size by setting the width and height"},{kind:"field",name:"computedIconSize",privacy:"private",readonly:!0}],attributes:[{name:"name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename)",fieldName:"name"},{name:"size",type:{text:"number | undefined"},description:"Size of the icon (works in combination with length unit)",fieldName:"size"},{name:"length-unit",type:{text:"string | undefined"},description:"Length unit attribute for overriding length-unit from `IconProvider`",fieldName:"lengthUnit"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:"Aria-labelledby attribute to be set for accessibility",fieldName:"ariaLabelledBy"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-icon",jsDoc:`/**
 * Icon component that dynamically displays SVG icons based on a valid name.
 *
 * This component must be mounted within an \`IconProvider\` component.
 *
 * The \`IconProvider\` defines the source URL from which icons are consumed.
 * The \`Icon\` component accepts a \`name\` attribute, which corresponds to
 * the file name of the icon to be loaded from the specified URL.
 *
 * Once fetched, the icon will be rendered. If the fetching process is unsuccessful,
 * no icon will be displayed.
 *
 * The \`size\` attribute allows for dynamic sizing of the icon based on the provided
 * \`length-unit\` attribute. This unit can either come from the \`IconProvider\`
 * or can be overridden for each individual icon. For example:
 * if \`size = 1\` and \`length-unit = 'em'\`, the dimensions of the icon will be
 * \`width: 1em; height: 1em\`.
 *
 * Regarding accessibility, there are three types of icons: decorative, informative and informative standalone.
 *
 * ### Decorative Icons
 * - Decorative icons do not convey any essential information to the content of a page.
 * - They should be hidden from screen readers (SR) to prevent confusion for users.
 * - For decorative icons, an \`aria-label\` is not required, and the \`role\` will be set to null.
 *
 * ### Informative Icons
 * - Informative icons convey important information that is not adequately represented
 *   by surrounding text or components.
 * - They provide valuable context and must be announced by assistive technologies.
 * - For informative icons, an \`aria-label\` is required, and the \`role\` will be set to "img" automatically.
 * - If an \`aria-label\` is provided, the role will be set to 'img'; if it is absent,
 *   the role will be unset.
 *
 * ### Informative Standalone Icons
 * - If an icon is informative (as mentioned above) and does not belong to a button (=standalone), it must
 * have a Tooltip that describes what it means.
 * - For informative standalone icons, an \`aria-label\` & \`tabindex="0"\` is required,
 * and the \`role\` will be set to "img" automatically.
 * - **Only use this when a Icon is standalone and is not part of a button or other interactive elements.**
 *
 * @tagname mdc-icon
 *
 * @cssproperty --mdc-icon-fill-color - Allows customization of the default fill color.
 * @cssproperty --mdc-icon-size - Allows customization of the icon size.
 * @cssproperty --mdc-icon-border-radius - Allows customization of the icon border radius.
 *
 * @csspart icon - The svg inside the icon element.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Icon",module:"components/icon/icon.component.js"}}]},{kind:"javascript-module",path:"components/iconprovider/iconprovider.component.js",declarations:[{kind:"class",description:"IconProvider component, which allows to be consumed from sub components\n(see `providerUtils.consume` for how to consume)\n\nAttribute `iconSet` can be set to either `momentum-icons` or `custom-icons`.\nIf `momentum-icons` is selected, the icons will be fetched from the\nMomentum Design System icon set per a dynamic JS Import (no need to provide a URL).\nThis requires the consumer to have the `@momentum-designs` package installed and the\nbuild tooling needs to support dynamic imports.\n\nIf `custom-icons` is selected, the icons will be fetched from the provided URL.\nThis requires the consumer to provide a URL from which the icons will be fetched and\nthe consumer needs to make sure to bundle the icons in the application.\n\nIf `cacheStrategy` is provided (only works with iconSet = `custom-icons`), the\nIconProvider will cache the icons in the selected cache (either web-api-cache or in-memory-cache),\nto avoid fetching the same icon multiple times over the network.\nThis is useful when the same icon is used multiple times in the application.\nTo consider:\n- The `in-memory-cache` is not persisted and will be lost when the\nIconProvider is removed from the DOM.\n- The `web-api-cache` is persisted, but only works in https environments\n(https://developer.mozilla.org/en-US/docs/Web/API/Cache).",name:"IconProvider",slots:[{description:"children",name:""}],members:[{kind:"field",name:"Context",privacy:"public",static:!0,description:"Context object of the IconProvider, to be consumed by child components",readonly:!0},{kind:"field",name:"iconSet",type:{text:"IconSet | undefined"},description:`Icon set to be used

If \`momentum-icons\` is selected, the icons will be fetched from the
Momentum Design System icon set per a dynamic JS Import (no need to provide a URL).
This requires the consumer to have the \`@momentum-designs\` package installed and the
build tooling needs to support dynamic imports.

If \`custom-icons\` is selected, the icons will be fetched from the provided URL.
This requires the consumer to provide a URL from which the icons will be fetched and
the consumer needs to make sure to bundle the icons in the application.`,default:"momentum-icons",attribute:"icon-set",reflects:!0},{kind:"field",name:"url",type:{text:"string | undefined"},description:"Url of where icons will be fetched from\n(if Icon set is `custom-icons`, this will be the base url)",attribute:"url"},{kind:"field",name:"fileExtension",type:{text:"string | undefined"},description:"File extension of icons\n(if Icon set is `custom-icons`, this will be the file extension for icons)",default:"svg",attribute:"file-extension",reflects:!0},{kind:"field",name:"lengthUnit",type:{text:"string"},description:"Length unit used for sizing of icons",default:"em",attribute:"length-unit",reflects:!0},{kind:"field",name:"size",type:{text:"number | undefined"},description:`The default size of the icon.
If not set, it falls back to the size defined by the length unit.`,default:"1",attribute:"size",reflects:!0},{kind:"field",name:"cacheStrategy",type:{text:"CacheStrategy | undefined"},description:"Icons Cache Strategy to use\n\n**Can only be used if Icon set is `custom-icons`**\n\nChoose `in-memory-cache` to cache icons in a JS cache (in-memory cache).\nChoose `web-cache-api` to cache icons using the Web Cache API.\n\nNOTE: `cache-name` must be provided if `cache-strategy` is provided.\n\nIf not provided or invalid value provided, the icons will not be cached.",default:"undefined",attribute:"cache-strategy"},{kind:"field",name:"cacheName",type:{text:"string | undefined"},description:`Icons Cache Name to use (cache strategy must be provided)

If provided, Icons inside the provider will be cached in the
cache (determined by \`cache-strategy\`) with the provided name.

NOTE: \`cache-name\` requires \`cache-strategy\` to be set.

If not provided, the icons will not be cached.`,default:"undefined",attribute:"cache-name"},{kind:"method",name:"updateValuesInContext",privacy:"private"},{kind:"method",name:"updateContext",privacy:"protected",return:{type:{text:"void"}}}],attributes:[{name:"icon-set",type:{text:"IconSet | undefined"},description:`Icon set to be used

If \`momentum-icons\` is selected, the icons will be fetched from the
Momentum Design System icon set per a dynamic JS Import (no need to provide a URL).
This requires the consumer to have the \`@momentum-designs\` package installed and the
build tooling needs to support dynamic imports.

If \`custom-icons\` is selected, the icons will be fetched from the provided URL.
This requires the consumer to provide a URL from which the icons will be fetched and
the consumer needs to make sure to bundle the icons in the application.`,default:"momentum-icons",fieldName:"iconSet"},{name:"url",type:{text:"string | undefined"},description:"Url of where icons will be fetched from\n(if Icon set is `custom-icons`, this will be the base url)",fieldName:"url"},{name:"file-extension",type:{text:"string | undefined"},description:"File extension of icons\n(if Icon set is `custom-icons`, this will be the file extension for icons)",default:"svg",fieldName:"fileExtension"},{name:"length-unit",type:{text:"string"},description:"Length unit used for sizing of icons",default:"em",fieldName:"lengthUnit"},{name:"size",type:{text:"number | undefined"},description:`The default size of the icon.
If not set, it falls back to the size defined by the length unit.`,default:"1",fieldName:"size"},{name:"cache-strategy",type:{text:"CacheStrategy | undefined"},description:"Icons Cache Strategy to use\n\n**Can only be used if Icon set is `custom-icons`**\n\nChoose `in-memory-cache` to cache icons in a JS cache (in-memory cache).\nChoose `web-cache-api` to cache icons using the Web Cache API.\n\nNOTE: `cache-name` must be provided if `cache-strategy` is provided.\n\nIf not provided or invalid value provided, the icons will not be cached.",default:"undefined",fieldName:"cacheStrategy"},{name:"cache-name",type:{text:"string | undefined"},description:`Icons Cache Name to use (cache strategy must be provided)

If provided, Icons inside the provider will be cached in the
cache (determined by \`cache-strategy\`) with the provided name.

NOTE: \`cache-name\` requires \`cache-strategy\` to be set.

If not provided, the icons will not be cached.`,default:"undefined",fieldName:"cacheName"}],superclass:{name:"Provider",module:"/src/models"},tagName:"mdc-iconprovider",jsDoc:`/**
 * IconProvider component, which allows to be consumed from sub components
 * (see \`providerUtils.consume\` for how to consume)
 *
 * Attribute \`iconSet\` can be set to either \`momentum-icons\` or \`custom-icons\`.
 * If \`momentum-icons\` is selected, the icons will be fetched from the
 * Momentum Design System icon set per a dynamic JS Import (no need to provide a URL).
 * This requires the consumer to have the \`@momentum-designs\` package installed and the
 * build tooling needs to support dynamic imports.
 *
 * If \`custom-icons\` is selected, the icons will be fetched from the provided URL.
 * This requires the consumer to provide a URL from which the icons will be fetched and
 * the consumer needs to make sure to bundle the icons in the application.
 *
 * If \`cacheStrategy\` is provided (only works with iconSet = \`custom-icons\`), the
 * IconProvider will cache the icons in the selected cache (either web-api-cache or in-memory-cache),
 * to avoid fetching the same icon multiple times over the network.
 * This is useful when the same icon is used multiple times in the application.
 * To consider:
 * - The \`in-memory-cache\` is not persisted and will be lost when the
 * IconProvider is removed from the DOM.
 * - The \`web-api-cache\` is persisted, but only works in https environments
 * (https://developer.mozilla.org/en-US/docs/Web/API/Cache).
 *
 * @tagname mdc-iconprovider
 *
 * @slot - children
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"IconProvider",module:"components/iconprovider/iconprovider.component.js"}}]},{kind:"javascript-module",path:"components/input/input.component.js",declarations:[{kind:"class",description:`mdc-input is a component that allows users to input text.
 It contains:
- label field - describe the input field.
- input field - contains the value
- help text or validation message - displayed below the input field.
- trailing button - it displays a clear the input field.
- prefix text - displayed before the input field.
- leading icon - displayed before the input field.
- clear-aria-label - aria label for the trailing button.
- all the attributes of the input field.`,name:"Input",cssProperties:[{description:"Border color for the input container when disabled",name:"--mdc-input-disabled-border-color"},{description:"Text color for the input field when disabled",name:"--mdc-input-disabled-text-color"},{description:"Background color for the input field when disabled",name:"--mdc-input-disabled-background-color"},{description:"Border color for the input container",name:"--mdc-input-border-color"},{description:"Text color for the input field",name:"--mdc-input-text-color"},{description:"Background color for the input field",name:"--mdc-input-background-color"},{description:"Background color for the selected text",name:"--mdc-input-selection-background-color"},{description:"Text color for the selected text",name:"--mdc-input-selection-text-color"},{description:"Text color for the help text",name:"--mdc-input-support-text-color"},{description:"Background color for the input field when hovered",name:"--mdc-input-hover-background-color"},{description:"Background color for the input field when focused",name:"--mdc-input-focused-background-color"},{description:"Border color for the input container when focused",name:"--mdc-input-focused-border-color"},{description:"Border color for the input container when error",name:"--mdc-input-error-border-color"},{description:"Border color for the input container when warning",name:"--mdc-input-warning-border-color"},{description:"Border color for the input container when success",name:"--mdc-input-success-border-color"},{description:"Border color for the input container when primary",name:"--mdc-input-primary-border-color"}],members:[{kind:"field",name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",attribute:"placeholder"},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",attribute:"readonly"},{kind:"field",name:"prefixText",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,attribute:"prefix-text"},{kind:"field",name:"leadingIcon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",attribute:"leading-icon"},{kind:"field",name:"trailingButton",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",attribute:"trailing-button"},{kind:"field",name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",attribute:"maxlength"},{kind:"field",name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",attribute:"minlength"},{kind:"field",name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",attribute:"autocapitalize"},{kind:"field",name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",attribute:"autocomplete"},{kind:"field",name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',attribute:"dirname"},{kind:"field",name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,attribute:"pattern"},{kind:"field",name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,attribute:"list"},{kind:"field",name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",attribute:"size"},{kind:"field",name:"clearAriaLabel",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",attribute:"clear-aria-label"},{kind:"method",name:"setInputValidity",privacy:"private"},{kind:"method",name:"updateValue",privacy:"private",description:`Updates the value of the input field.
Sets the form value.`,return:{type:{text:""}}},{kind:"method",name:"onInput",privacy:"private",description:`Handles the input event of the input field.
Updates the value and sets the validity of the input field.`},{kind:"method",name:"onChange",privacy:"private",parameters:[{name:"event",type:{text:"Event"},description:"Event which contains information about the value change."}],description:`Handles the change event of the input field.
Updates the value and sets the validity of the input field.

The 'change' event does not bubble up through the shadow DOM as it was not composed.
Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`},{kind:"method",name:"handleKeyDown",privacy:"protected",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"Keyboard event"}],description:`Handles the keydown event of the input field.
If the key pressed is 'Enter', it submits the form.`},{kind:"method",name:"renderLeadingIcon",privacy:"protected",description:`Renders the leading icon before the input field.
If the leading icon is not set, it will not be displayed.`,return:{type:{text:""}}},{kind:"method",name:"renderPrefixText",privacy:"protected",description:`Renders the prefix text before the input field.
If the prefix text is more than 10 characters,
- it will not be displayed.
- the validation messsage will be displayed.

 Note: We are setting aria-hidden so that the screen reader does not read the prefix text.
 The consumers should set the appropriate aria-label for the input field using 'data-aria-label' attribute.`,return:{type:{text:""}}},{kind:"method",name:"clearInputText",privacy:"protected",description:"Clears the input field."},{kind:"method",name:"renderTrailingButton",privacy:"protected",parameters:[{name:"show",default:"false"}],description:"Renders the trailing button to clear the input field if the trailingButton is set to true.",return:{type:{text:""}}},{kind:"method",name:"renderInputElement",privacy:"protected",parameters:[{name:"type",type:{text:"InputType"}},{name:"hidePlaceholder",default:"false"}]},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{type:{text:"EventConstructor"}},{name:"clear",type:{text:"CustomEvent"},description:"(React: onClear) This event is dispatched when the input text is cleared.",reactName:"onClear"},{description:"(React: onInput) This event is dispatched when the value of the input field changes (every press).",name:"input",reactName:"onInput"},{description:"(React: onChange) This event is dispatched when the value of the input field changes (on blur).",name:"change",reactName:"onChange"},{description:"(React: onFocus) This event is dispatched when the input receives focus.",name:"focus",reactName:"onFocus"},{description:"(React: onBlur) This event is dispatched when the input loses focus.",name:"blur",reactName:"onBlur"}],attributes:[{name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",fieldName:"placeholder"},{name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",fieldName:"readonly"},{name:"prefix-text",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,fieldName:"prefixText"},{name:"leading-icon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",fieldName:"leadingIcon"},{name:"trailing-button",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",fieldName:"trailingButton"},{name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",fieldName:"maxlength"},{name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",fieldName:"minlength"},{name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",fieldName:"autocapitalize"},{name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",fieldName:"autocomplete"},{name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',fieldName:"dirname"},{name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,fieldName:"pattern"},{name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,fieldName:"list"},{name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",fieldName:"size"},{name:"clear-aria-label",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",fieldName:"clearAriaLabel"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper"},tagName:"mdc-input",jsDoc:`/**
 * mdc-input is a component that allows users to input text.
 *  It contains:
 * - label field - describe the input field.
 * - input field - contains the value
 * - help text or validation message - displayed below the input field.
 * - trailing button - it displays a clear the input field.
 * - prefix text - displayed before the input field.
 * - leading icon - displayed before the input field.
 * - clear-aria-label - aria label for the trailing button.
 * - all the attributes of the input field.
 *
 * @tagname mdc-input
 *
 * @event input - (React: onInput) This event is dispatched when the value of the input field changes (every press).
 * @event change - (React: onChange) This event is dispatched when the value of the input field changes (on blur).
 * @event focus - (React: onFocus) This event is dispatched when the input receives focus.
 * @event blur - (React: onBlur) This event is dispatched when the input loses focus.
 * @event clear - (React: onClear) This event is dispatched when the input text is cleared.
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-button
 * @dependency mdc-toggletip
 *
 * @cssproperty --mdc-input-disabled-border-color - Border color for the input container when disabled
 * @cssproperty --mdc-input-disabled-text-color - Text color for the input field when disabled
 * @cssproperty --mdc-input-disabled-background-color - Background color for the input field when disabled
 * @cssproperty --mdc-input-border-color - Border color for the input container
 * @cssproperty --mdc-input-text-color - Text color for the input field
 * @cssproperty --mdc-input-background-color - Background color for the input field
 * @cssproperty --mdc-input-selection-background-color - Background color for the selected text
 * @cssproperty --mdc-input-selection-text-color - Text color for the selected text
 * @cssproperty --mdc-input-support-text-color - Text color for the help text
 * @cssproperty --mdc-input-hover-background-color - Background color for the input field when hovered
 * @cssproperty --mdc-input-focused-background-color - Background color for the input field when focused
 * @cssproperty --mdc-input-focused-border-color - Border color for the input container when focused
 * @cssproperty --mdc-input-error-border-color - Border color for the input container when error
 * @cssproperty --mdc-input-warning-border-color - Border color for the input container when warning
 * @cssproperty --mdc-input-success-border-color - Border color for the input container when success
 * @cssproperty --mdc-input-primary-border-color - Border color for the input container when primary
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Input",module:"components/input/input.component.js"}}]},{kind:"javascript-module",path:"components/inputchip/inputchip.component.js",declarations:[{kind:"class",description:`mdc-inputchip component is an interactive chip that consumers can use to represent an input.

- It supports a leading icon along with label.
- It supports an error state for validation.
- It supports a close button to remove the chip.`,name:"InputChip",cssProperties:[{description:"The color of the chip.",name:"--mdc-chip-color"},{description:"The border color of the chip.",name:"--mdc-chip-border-color"},{description:"The background color of the chip.",name:"--mdc-chip-background-color"}],cssParts:[{description:"The label part of the chip.",name:"label"},{description:"The icon part of the chip.",name:"icon"},{description:"The close icon part of the chip.",name:"close-icon"}],members:[{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The label of the inputchip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,attribute:"label"},{kind:"field",name:"error",type:{text:"boolean"},default:"false",description:"The error state of the inputchip.",attribute:"error"},{kind:"field",name:"clearAriaLabel",type:{text:"string"},default:"''",description:"The aria-label of the close button.",attribute:"clear-aria-label"},{kind:"method",name:"renderIcon",privacy:"private",description:"Renders the icon element if available.",return:{type:{text:""}}},{kind:"method",name:"handleClose",privacy:"private",description:"Handles the behavior of the close button on click event.",parameters:[{description:"The event object.",name:"event"}]},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],events:[{name:"remove",type:{text:"CustomEvent"},description:"This event is dispatched when the close button is activated. It bubbles and is composed.",reactName:"onRemove"}],attributes:[{name:"label",type:{text:"string"},default:"''",description:`The label of the inputchip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,fieldName:"label"},{name:"error",type:{text:"boolean"},default:"false",description:"The error state of the inputchip.",fieldName:"error"},{name:"clear-aria-label",type:{text:"string"},default:"''",description:"The aria-label of the close button.",fieldName:"clearAriaLabel"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"},{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-inputchip",jsDoc:`/**
 * mdc-inputchip component is an interactive chip that consumers can use to represent an input.
 *
 * - It supports a leading icon along with label.
 * - It supports an error state for validation.
 * - It supports a close button to remove the chip.
 *
 * @tagname mdc-inputchip
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @event remove - This event is dispatched when the close button is activated. It bubbles and is composed.
 *
 * @csspart label - The label part of the chip.
 * @csspart icon - The icon part of the chip.
 * @csspart close-icon - The close icon part of the chip.
 *
 * @cssproperty --mdc-chip-color - The color of the chip.
 * @cssproperty --mdc-chip-border-color - The border color of the chip.
 * @cssproperty --mdc-chip-background-color - The background color of the chip.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"InputChip",module:"components/inputchip/inputchip.component.js"}}]},{kind:"javascript-module",path:"components/link/link.component.js",declarations:[{kind:"class",description:"`mdc-link` component can be used to navigate to a different page\nwithin the application or to an external site. It can be used to link to\nemails or phone numbers.\n\nThe `children` of the link component is expected to be the text content.\n\nFor `icon`, the `mdc-icon` component is used to render the icon.",name:"Link",members:[{kind:"field",name:"size",type:{text:"LinkSize"},description:`Size of the link.
Acceptable values include:

- 'small'
- 'midsize'
- 'large'`,default:"large",attribute:"size",reflects:!0},{kind:"method",name:"getIconSize",privacy:"private",return:{type:{text:""}},description:"Method to get the size of the trailing icon based on the link size."},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}},{kind:"field",name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",attribute:"inline",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",attribute:"inverted",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",attribute:"href",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",attribute:"target",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"field",name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",attribute:"rel",reflects:!0,inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"method",name:"handleNavigation",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"e",type:{text:"MouseEvent | KeyboardEvent"}}],inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"disabled",type:{text:"boolean"},description:"Whether the element should be disabled"}],description:"Sets or removes `aria-disabled` and updates `tabIndex` to reflect\nthe disabled state. When disabled, the element becomes unfocusable;\nwhen enabled, the previous `tabIndex` is restored.",inheritedFrom:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}}],events:[{description:"(React: onClick) Fired when the user activates the Link using a mouse or assistive technology.",name:"click",reactName:"onClick",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onKeyDown) Fired when the user presses a key while the Link has focus.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onFocus) Fired when the Link receives keyboard or mouse focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"(React: onBlur) Fired when the Link loses keyboard or mouse focus.",name:"blur",reactName:"onBlur",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}],attributes:[{name:"size",type:{text:"LinkSize"},description:`Size of the link.
Acceptable values include:

- 'small'
- 'midsize'
- 'large'`,default:"large",fieldName:"size"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}},{name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",fieldName:"inline",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",fieldName:"inverted",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",fieldName:"href",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",fieldName:"target",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",fieldName:"rel",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Linksimple",module:"/src/components/linksimple/linksimple.component"},tagName:"mdc-link",jsDoc:`/**
 * \`mdc-link\` component can be used to navigate to a different page
 * within the application or to an external site. It can be used to link to
 * emails or phone numbers.
 *
 * The \`children\` of the link component is expected to be the text content.
 *
 * For \`icon\`, the \`mdc-icon\` component is used to render the icon.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-link
 *
 * @event click - (React: onClick) Fired when the user activates the Link using a mouse or assistive technology.
 * @event keydown - (React: onKeyDown) Fired when the user presses a key while the Link has focus.
 * @event focus - (React: onFocus) Fired when the Link receives keyboard or mouse focus.
 * @event blur - (React: onBlur) Fired when the Link loses keyboard or mouse focus.
 */`,customElement:!0,cssProperties:[{description:"Border radius of the link.",name:"--mdc-link-border-radius",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the active state.",name:"--mdc-link-color-active",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the disabled state.",name:"--mdc-link-color-disabled",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the hover state.",name:"--mdc-link-color-hover",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the link’s child content in the normal state.",name:"--mdc-link-color-normal",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the active state.",name:"--mdc-link-inverted-color-active",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the disabled state.",name:"--mdc-link-inverted-color-disabled",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the hover state.",name:"--mdc-link-inverted-color-hover",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}},{description:"Color of the inverted link’s child content in the normal state.",name:"--mdc-link-inverted-color-normal",inheritedFrom:{name:"Linksimple",module:"src/components/linksimple/linksimple.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Link",module:"components/link/link.component.js"}}]},{kind:"javascript-module",path:"components/linkbutton/linkbutton.component.js",declarations:[{kind:"class",description:"`mdc-linkbutton` visually mimics a hyperlink while functioning as a button. It blends the appearance of `mdc-link` with the accessibility and interaction capabilities of `mdc-button`.\n\n### Features:\n- Looks like a link, behaves like a button.\n- Supports slots for a text label and an optional trailing icon.\n- Inherits accessibility and keyboard interaction behavior from `mdc-buttonsimple`.",name:"LinkButton",cssProperties:[{description:"Border radius of the linkbutton.",name:"--mdc-link-border-radius"},{description:"Color of the linkbutton’s child content in the active state.",name:"--mdc-link-color-active"},{description:"Color of the linkbutton’s child content in the disabled state.",name:"--mdc-link-color-disabled"},{description:"Color of the linkbutton’s child content in the hover state.",name:"--mdc-link-color-hover"},{description:"Color of the linkbutton’s child content in the normal state.",name:"--mdc-link-color-normal"},{description:"Color of the inverted linkbutton’s child content in the active state.",name:"--mdc-link-inverted-color-active"},{description:"Color of the inverted linkbutton’s child content in the disabled state.",name:"--mdc-link-inverted-color-disabled"},{description:"Color of the inverted linkbutton’s child content in the hover state.",name:"--mdc-link-inverted-color-hover"},{description:"Color of the inverted linkbutton’s child content in the normal state.",name:"--mdc-link-inverted-color-normal"}],slots:[{description:"Text label of the linkbutton.",name:""}],members:[{kind:"field",name:"size",type:{text:"ButtonSize"},description:`Sets the size of the linkbutton.
Acceptable values: 
- 12
- 14
- 16`,default:"16",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"inline",type:{text:"boolean"},description:"The linkbutton can be inline or standalone.",default:"false",attribute:"inline",reflects:!0},{kind:"field",name:"inverted",type:{text:"boolean"},description:"The linkbutton color can be inverted by setting the inverted attribute to true.",default:"false",attribute:"inverted",reflects:!0},{kind:"method",name:"setSize",privacy:"private",parameters:[{name:"size",type:{text:"LinkButtonSize"},description:"The desired link size."}],description:"Sets the `size` attribute for the linkbutton, falling back to the default if the value is invalid."},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element"},{name:"active",optional:!0,type:{text:"boolean"},description:"The active state of the element"}],description:"Sets the ariaStateKey attributes based on the active state of the button.",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the linkbutton is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the linkbutton.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the linkbutton.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the linkbutton receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],attributes:[{name:"size",type:{text:"ButtonSize"},description:`Sets the size of the linkbutton.
Acceptable values: 
- 12
- 14
- 16`,default:"16",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"inline",type:{text:"boolean"},description:"The linkbutton can be inline or standalone.",default:"false",fieldName:"inline"},{name:"inverted",type:{text:"boolean"},description:"The linkbutton color can be inverted by setting the inverted attribute to true.",default:"false",fieldName:"inverted"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"active",type:{text:"boolean | undefined"},description:`The button's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.

This attribute is used to set the provided \`ariaStateKey\` to true or false.`,default:"undefined",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-linkbutton",jsDoc:`/**
 * \`mdc-linkbutton\` visually mimics a hyperlink while functioning as a button. It blends the appearance of \`mdc-link\` with the accessibility and interaction capabilities of \`mdc-button\`.
 *
 * ### Features:
 * - Looks like a link, behaves like a button.
 * - Supports slots for a text label and an optional trailing icon.
 * - Inherits accessibility and keyboard interaction behavior from \`mdc-buttonsimple\`.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-linkbutton
 *
 * @slot - Text label of the linkbutton.
 *
 * @event click - (React: onClick) This event is dispatched when the linkbutton is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the linkbutton.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the linkbutton.
 * @event focus - (React: onFocus) This event is dispatched when the linkbutton receives focus.
 *
 * @cssproperty --mdc-link-border-radius - Border radius of the linkbutton.
 * @cssproperty --mdc-link-color-active - Color of the linkbutton’s child content in the active state.
 * @cssproperty --mdc-link-color-disabled - Color of the linkbutton’s child content in the disabled state.
 * @cssproperty --mdc-link-color-hover - Color of the linkbutton’s child content in the hover state.
 * @cssproperty --mdc-link-color-normal - Color of the linkbutton’s child content in the normal state.
 * @cssproperty --mdc-link-inverted-color-active - Color of the inverted linkbutton’s child content in the active state.
 * @cssproperty --mdc-link-inverted-color-disabled - Color of the inverted linkbutton’s child content in the disabled state.
 * @cssproperty --mdc-link-inverted-color-hover - Color of the inverted linkbutton’s child content in the hover state.
 * @cssproperty --mdc-link-inverted-color-normal - Color of the inverted linkbutton’s child content in the normal state.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"LinkButton",module:"components/linkbutton/linkbutton.component.js"}}]},{kind:"javascript-module",path:"components/linksimple/linksimple.component.js",declarations:[{kind:"class",description:"`mdc-linksimple` is a lightweight link component that can be used to navigate\nwithin the application or to an external URL. It does not have any predefined default size.\n\nThe `children` of the `mdc-linksimple` component can be customized to suit\ndifferent use cases, including text, icons, or other inline content. For the child to be an icon,\nthe `mdc-icon` component should be used to render.",name:"Linksimple",cssProperties:[{description:"Border radius of the link.",name:"--mdc-link-border-radius"},{description:"Color of the link’s child content in the active state.",name:"--mdc-link-color-active"},{description:"Color of the link’s child content in the disabled state.",name:"--mdc-link-color-disabled"},{description:"Color of the link’s child content in the hover state.",name:"--mdc-link-color-hover"},{description:"Color of the link’s child content in the normal state.",name:"--mdc-link-color-normal"},{description:"Color of the inverted link’s child content in the active state.",name:"--mdc-link-inverted-color-active"},{description:"Color of the inverted link’s child content in the disabled state.",name:"--mdc-link-inverted-color-disabled"},{description:"Color of the inverted link’s child content in the hover state.",name:"--mdc-link-inverted-color-hover"},{description:"Color of the inverted link’s child content in the normal state.",name:"--mdc-link-inverted-color-normal"}],members:[{kind:"field",name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",attribute:"inline",reflects:!0},{kind:"field",name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",attribute:"inverted",reflects:!0},{kind:"field",name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",attribute:"href",reflects:!0},{kind:"field",name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",attribute:"target",reflects:!0},{kind:"field",name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",attribute:"rel",reflects:!0},{kind:"method",name:"handleNavigation",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"e",type:{text:"MouseEvent | KeyboardEvent"}}]},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"disabled",type:{text:"boolean"},description:"Whether the element should be disabled"}],description:"Sets or removes `aria-disabled` and updates `tabIndex` to reflect\nthe disabled state. When disabled, the element becomes unfocusable;\nwhen enabled, the previous `tabIndex` is restored."},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}}],events:[{description:"(React: onClick) Fired when the user activates the buttonLink using a mouse or assistive technology.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) Fired when the user presses a key while the buttonLink has focus.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onFocus) Fired when the buttonLink receives keyboard or mouse focus.",name:"focus",reactName:"onFocus"},{description:"(React: onBlur) Fired when the buttonLink loses keyboard or mouse focus.",name:"blur",reactName:"onBlur"}],attributes:[{name:"inline",type:{text:"boolean"},description:"The link can be inline or standalone.",default:"false",fieldName:"inline"},{name:"inverted",type:{text:"boolean"},description:"The link color can be inverted by setting the inverted attribute to true.",default:"false",fieldName:"inverted"},{name:"href",type:{text:"string"},default:"'#'",description:"Href for navigation. The URL that the hyperlink points to",fieldName:"href"},{name:"target",type:{text:"string"},default:"'_self'",description:"Optional target: _blank, _self, _parent, _top and _unfencedTop",fieldName:"target"},{name:"rel",type:{text:"string | undefined"},description:"Optional rel attribute that defines the relationship of the linked URL as space-separated link types.",fieldName:"rel"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"},{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-linksimple",jsDoc:`/**
 * \`mdc-linksimple\` is a lightweight link component that can be used to navigate
 * within the application or to an external URL. It does not have any predefined default size.
 *
 * The \`children\` of the \`mdc-linksimple\` component can be customized to suit
 * different use cases, including text, icons, or other inline content. For the child to be an icon,
 * the \`mdc-icon\` component should be used to render.
 *
 * @tagname mdc-linksimple
 *
 * @event click - (React: onClick) Fired when the user activates the buttonLink using a mouse or assistive technology.
 * @event keydown - (React: onKeyDown) Fired when the user presses a key while the buttonLink has focus.
 * @event focus - (React: onFocus) Fired when the buttonLink receives keyboard or mouse focus.
 * @event blur - (React: onBlur) Fired when the buttonLink loses keyboard or mouse focus.
 *
 * @cssproperty --mdc-link-border-radius - Border radius of the link.
 * @cssproperty --mdc-link-color-active - Color of the link’s child content in the active state.
 * @cssproperty --mdc-link-color-disabled - Color of the link’s child content in the disabled state.
 * @cssproperty --mdc-link-color-hover - Color of the link’s child content in the hover state.
 * @cssproperty --mdc-link-color-normal - Color of the link’s child content in the normal state.
 * @cssproperty --mdc-link-inverted-color-active - Color of the inverted link’s child content in the active state.
 * @cssproperty --mdc-link-inverted-color-disabled - Color of the inverted link’s child content in the disabled state.
 * @cssproperty --mdc-link-inverted-color-hover - Color of the inverted link’s child content in the hover state.
 * @cssproperty --mdc-link-inverted-color-normal - Color of the inverted link’s child content in the normal state.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Linksimple",module:"components/linksimple/linksimple.component.js"}}]},{kind:"javascript-module",path:"components/list/list.component.js",declarations:[{kind:"class",description:"mdc-list component is used to display a group of list items. It is used as a container to wrap other list items.\n\nTo add a header to the list, use the `mdc-listheader` component and place it in the `list-header` slot.\n`mdc-listitem` components can be placed in the default slot.",name:"List",cssParts:[{description:"The container slot around the list items",name:"container"}],slots:[{description:"This is a default/unnamed slot, where listitems can be placed.",name:"default"},{description:"This slot is used to pass a header for the list, which can be a `mdc-listheader` component.",name:"list-header"}],members:[{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the list element.
If the key is 'ArrowUp' or 'ArrowDown', it focuses to the previous or next list item
and sets the active tabindex of the list item.
Prevents the default event behavior.`},{kind:"method",name:"getCurrentIndex",privacy:"private",return:{type:{text:""}},parameters:[{name:"target",type:{text:"EventTarget | null"},description:"The target element to find the index of."}],description:`Returns the index of the given target in the listItems array.
If the target is not a list item, but a child element of a list item,
it returns the index of the parent list item.`},{kind:"method",name:"getNewIndexBasedOnKey",privacy:"private",return:{type:{text:""}},parameters:[{name:"key",type:{text:"string"},description:"The key that was pressed."},{name:"currentIndex",type:{text:"number"},description:"The current index of the focused list item."},{name:"wrappedDivsCount",type:{text:"number"},description:"The total number of list items."}],description:`Calculates a new index based on the pressed keyboard key.
Supports navigation keys for moving focus within a list.`},{kind:"method",name:"handleMouseClick",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event."}],description:"Handles the mouse click event on the list element.\nFinds the index of the target element in the list items array and calls\n`resetTabIndexAndSetActiveTabIndex` with that index."},{kind:"method",name:"resetTabIndexAndSetActiveTabIndex",privacy:"private",parameters:[{name:"newIndex",type:{text:"number"},description:"The index of the new active element in the list."}],description:`Resets all list items tabindex to -1 and sets the tabindex of the
element at the given index to 0, effectively setting the active
element. This is used when navigating the list via keyboard.`}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-list",jsDoc:`/**
 * mdc-list component is used to display a group of list items. It is used as a container to wrap other list items.
 *
 * To add a header to the list, use the \`mdc-listheader\` component and place it in the \`list-header\` slot.
 * \`mdc-listitem\` components can be placed in the default slot.
 *
 * @tagname mdc-list
 *
 * @slot default - This is a default/unnamed slot, where listitems can be placed.
 * @slot list-header - This slot is used to pass a header for the list, which can be a \`mdc-listheader\` component.
 *
 * @csspart container - The container slot around the list items
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"List",module:"components/list/list.component.js"}}]},{kind:"javascript-module",path:"components/listbox/listbox.component.js",declarations:[{kind:"class",description:`listbox component presents a list of options and allows a user to select one of them.

Notes:
- This is a standalone listbox component. Select has its own mdc-selectlistbox component.
- this component has name and value attributes and also emits change event,
  but it is not a form control (yet).`,name:"ListBox",cssProperties:[{description:"max height of the listbox",name:"--mdc-listbox-max-height"}],cssParts:[{description:"The container of the listbox",name:"container"}],slots:[{description:"This is a default/unnamed slot, where options and optgroups are placed",name:"default"}],members:[{kind:"field",name:"name",type:{text:"undefined | string | undefined"},default:"undefined",description:"The name attribute is used to identify the listbox",attribute:"name",reflects:!0},{kind:"field",name:"value",type:{text:"undefined | string | undefined"},default:"undefined",description:"The value attribute is used to represent the last selected option's value in the listbox.",attribute:"value",reflects:!0},{kind:"method",name:"setSelectedOption",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"option",optional:!0,type:{text:"Option | null"},description:"The option element in DOM which gets selected."},{name:"fireEvent",default:"true",description:"A boolean flag to indicate whether to fire the change event or not."},{name:"updateOptions",default:"true",description:"Whether update the other options or not"}],description:"When an option is selected, this method updates local and options' DOM state and fires the change event."},{kind:"method",name:"updateSelectedInChildOptions",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"selectedOption",optional:!0,type:{text:"Option | null"},description:"The option which gets selected"}],description:"Update all options selection state in the DDM."},{kind:"method",name:"fireEvents",privacy:"private",return:{type:{text:"void"}},description:"Dispatch change event when an option is selected."},{kind:"method",name:"getCurrentIndex",privacy:"private",return:{type:{text:""}},parameters:[{name:"target",type:{text:"EventTarget | null"},description:"The target element that triggered the event."}],description:"Retrieves the current index of the item that triggered the event.",inheritedFrom:{name:"ListNavigationMixin",module:"utils/mixins/ListNavigationMixin.js"}},{kind:"method",name:"resetTabIndexes",privacy:"protected",parameters:[{name:"index",type:{text:"number"},description:"The index of the currently focused item."}],description:"Reset all tabindex to -1 and set the tabindex of the current item to 0",inheritedFrom:{name:"ListNavigationMixin",module:"utils/mixins/ListNavigationMixin.js"}},{kind:"method",name:"resetTabIndexAndSetFocus",privacy:"protected",parameters:[{name:"newIndex",type:{text:"number"},description:"The index of the new item to focus."},{name:"oldIndex",optional:!0,type:{text:"number"},description:"The index of the currently focused item."},{name:"focusNewItem",default:"true",description:"Call focus() on the new item or not. It should be false during firstUpdate"}],description:"Resets the tabindex of the currently focused item and sets focus to a new item.",return:{type:{text:""}},inheritedFrom:{name:"ListNavigationMixin",module:"utils/mixins/ListNavigationMixin.js"}},{kind:"method",name:"resolveDirectionKey",privacy:"private",parameters:[{name:"key",type:{text:"string"},description:"The key pressed by the user."},{name:"isRtl",type:{text:"boolean"},description:"A boolean indicating if the layout is right-to-left (RTL)."}],description:`Resolves the key pressed by the user based on the direction of the layout.
This method is used to handle keyboard navigation in a right-to-left (RTL) layout.
It checks if the layout is RTL and adjusts the arrow keys accordingly.
For example, in RTL, the left arrow key behaves like the right arrow key and vice versa.`,return:{type:{text:""}},inheritedFrom:{name:"ListNavigationMixin",module:"utils/mixins/ListNavigationMixin.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) This event is emitted when the selected item changed",reactName:"onChange"}],attributes:[{name:"name",type:{text:"undefined | string | undefined"},default:"undefined",description:"The name attribute is used to identify the listbox",fieldName:"name"},{name:"value",type:{text:"undefined | string | undefined"},default:"undefined",description:"The value attribute is used to represent the last selected option's value in the listbox.",fieldName:"value"}],mixins:[{name:"ListNavigationMixin",module:"/src/utils/mixins/ListNavigationMixin"},{name:"CaptureDestroyEventForChildElement",module:"/src/utils/mixins/lifecycle/CaptureDestroyEventForChildElement"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-listbox",jsDoc:`/**
 * listbox component presents a list of options and allows a user to select one of them.
 *
 * Notes:
 * - This is a standalone listbox component. Select has its own mdc-selectlistbox component.
 * - this component has name and value attributes and also emits change event,
 *   but it is not a form control (yet).
 *
 * @dependency mdc-list
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-option
 * @dependency mdc-optgroup
 *
 * @tagname mdc-listbox
 *
 * @cssproperty --mdc-listbox-max-height - max height of the listbox
 *
 * @slot default - This is a default/unnamed slot, where options and optgroups are placed
 *
 * @csspart container - The container of the listbox
 *
 * @event change - (React: onChange) This event is emitted when the selected item changed
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ListBox",module:"components/listbox/listbox.component.js"}}]},{kind:"javascript-module",path:"components/listheader/listheader.component.js",declarations:[{kind:"class",description:`Listheader component is used to display a header in a list.
It can include icons before and after the header text, and allows for additional content via slots.`,name:"Listheader",cssProperties:[{description:"height of the header",name:"--mdc-listheader-height"},{description:"padding around the header content",name:"--mdc-listheader-padding"},{description:"gap between content",name:"--mdc-listheader-gap"}],slots:[{description:"to pass in actionable content like buttons or links",name:"default"}],members:[{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered before the text

If not provided, no icon will be rendered and text will be aligned to the start.`,attribute:"prefix-icon"},{kind:"field",name:"postfixIcon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered after the slot & text

If not provided, no icon will be rendered and content will be aligned to the end.`,attribute:"postfix-icon"},{kind:"field",name:"headerText",type:{text:"string | undefined"},description:"Text to be rendered in the header",attribute:"header-text"},{kind:"field",name:"disabled",type:{text:"boolean"},default:"false",description:`Disables the header, making it visually styled as disabled.

NOTE: slot content will still be interactive unless individually disabled.
Make sure to handle the disabled state of any actionable elements inside the slot.`,attribute:"disabled",reflects:!0}],attributes:[{name:"prefix-icon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered before the text

If not provided, no icon will be rendered and text will be aligned to the start.`,fieldName:"prefixIcon"},{name:"postfix-icon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered after the slot & text

If not provided, no icon will be rendered and content will be aligned to the end.`,fieldName:"postfixIcon"},{name:"header-text",type:{text:"string | undefined"},description:"Text to be rendered in the header",fieldName:"headerText"},{name:"disabled",type:{text:"boolean"},default:"false",description:`Disables the header, making it visually styled as disabled.

NOTE: slot content will still be interactive unless individually disabled.
Make sure to handle the disabled state of any actionable elements inside the slot.`,fieldName:"disabled"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-listheader",jsDoc:`/**
 * Listheader component is used to display a header in a list.
 * It can include icons before and after the header text, and allows for additional content via slots.
 *
 * @tagname mdc-listheader
 *
 * @slot default - to pass in actionable content like buttons or links
 *
 * @cssproperty --mdc-listheader-height - height of the header
 * @cssproperty --mdc-listheader-padding - padding around the header content
 * @cssproperty --mdc-listheader-gap - gap between content
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Listheader",module:"components/listheader/listheader.component.js"}}]},{kind:"javascript-module",path:"components/listitem/listitem.component.js",declarations:[{kind:"class",description:`mdc-listitem component is used to display a label with different types of controls.
There can be three types of controls, a radio button, a checkbox on the
leading side and a toggle on the trailing side.
The list item can contain an avatar on the leading side and a badge on the trailing side.
Additionally, the list item can contain a side header and a subline text.

The leading and trailing slots can be used to display controls and text. <br/>
Based on the leading/trailing slot, the position of the controls and text can be adjusted. <br/>
Please use mdc-list as a parent element even when there is only listitem for a11y purpose.

**Note**: If a listitem contains a long text, it is recommended to create a tooltip for the listitem that displays the full text on hover.
Consumers need to add a unique ID to this listitem and use that ID in the tooltip's \`triggerID\` attribute. We are not creating the tooltip automatically, consumers need to add \`<mdc-tooltip>\` element manually and associate it with the listitem using the \`triggerID\` attribute.`,name:"ListItem",cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color"},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover"},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active"},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color"},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color"},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color"},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap"},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right"},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom"},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor"},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width"},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height"}],slots:[{description:"slot for list item controls to appear of leading end.",name:"leading-controls"},{description:"slot for list item primary label.",name:"leading-text-primary-label"},{description:"slot for list item secondary label.",name:"leading-text-secondary-label"},{description:"slot for list item tertiary label.",name:"leading-text-tertiary-label"},{description:"slot for list item side header text.",name:"trailing-text-side-header"},{description:"slot for list item subline text.",name:"trailing-text-subline"},{description:"slot for list item controls to appear of trailing end.",name:"trailing-controls"},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content"}],members:[{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event triggered when a key is pressed down."}],description:`Fires the click event when the enter or space key is pressed down.
This behavior is similar to a button click and key interaction.`},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item."},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content."},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot.",return:{type:{text:""}}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot.",return:{type:{text:""}}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}}],events:[{description:"(React: onClick) This event is dispatched when the listitem is clicked.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the listitem.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onKeyUp) This event is dispatched when a key is released on the listitem.",name:"keyup",reactName:"onKeyUp"},{description:"(React: onFocus) This event is dispatched when the listitem receives focus.",name:"focus",reactName:"onFocus"},{description:"(React: onEnabled) This event is dispatched after the listitem is enabled",name:"enabled",reactName:"onEnabled"},{description:"(React: onDisabled) This event is dispatched after the listitem is disabled",name:"disabled",reactName:"onDisabled"},{description:"(React: onCreated) This event is dispatched after the listitem is created (added to the DOM)",name:"created",reactName:"onCreated"},{description:"(React: onDestroyed) This event is dispatched after the listitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed"}],attributes:[{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant"},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label"},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel"},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel"},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText"},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText"},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"},{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"},{name:"LifeCycleMixin",module:"/src/utils/mixins/lifecycle/LifeCycleMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-listitem",jsDoc:`/**
 * mdc-listitem component is used to display a label with different types of controls.
 * There can be three types of controls, a radio button, a checkbox on the
 * leading side and a toggle on the trailing side.
 * The list item can contain an avatar on the leading side and a badge on the trailing side.
 * Additionally, the list item can contain a side header and a subline text.
 *
 * The leading and trailing slots can be used to display controls and text. <br/>
 * Based on the leading/trailing slot, the position of the controls and text can be adjusted. <br/>
 * Please use mdc-list as a parent element even when there is only listitem for a11y purpose.
 *
 * **Note**: If a listitem contains a long text, it is recommended to create a tooltip for the listitem that displays the full text on hover.
 * Consumers need to add a unique ID to this listitem and use that ID in the tooltip's \`triggerID\` attribute. We are not creating the tooltip automatically, consumers need to add \`<mdc-tooltip>\` element manually and associate it with the listitem using the \`triggerID\` attribute.
 *
 * @tagname mdc-listitem
 *
 * @dependency mdc-text
 *
 * @slot leading-controls - slot for list item controls to appear of leading end.
 * @slot leading-text-primary-label - slot for list item primary label.
 * @slot leading-text-secondary-label - slot for list item secondary label.
 * @slot leading-text-tertiary-label - slot for list item tertiary label.
 * @slot trailing-text-side-header - slot for list item side header text.
 * @slot trailing-text-subline - slot for list item subline text.
 * @slot trailing-controls - slot for list item controls to appear of trailing end.
 * @slot content - content slot can be used to override the content completely. Be aware that
 * this will override the default content of the list item.
 *
 * @cssproperty --mdc-listitem-default-background-color - Allows customization of the default background color.
 * @cssproperty --mdc-listitem-background-color-hover - Allows customization of the background color on hover.
 * @cssproperty --mdc-listitem-background-color-active - Allows customization of the background color when pressed.
 * @cssproperty --mdc-listitem-primary-label-color
 *  - Allows customization of the primary label, side header and subline text slot color.
 * @cssproperty --mdc-listitem-secondary-label-color
 *  - Allows customization of the secondary and tertiary label text slot color.
 * @cssproperty --mdc-listitem-disabled-color - Allows customization of the disabled color.
 * @cssproperty --mdc-listitem-column-gap - Allows customization of column gap.
 * @cssproperty --mdc-listitem-padding-left-right - Allows customization of padding left and right.
 * @cssproperty --mdc-listitem-padding-top-bottom - Allows customization of padding top and bottom.
 * @cssproperty --mdc-listitem-cursor - Allows customization of the cursor.
 * @cssproperty --mdc-listitem-width - Allows customization of the width of the list item.
 * @cssproperty --mdc-listitem-height - Allows customization of the height of the list item.
 *
 * @event click - (React: onClick) This event is dispatched when the listitem is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the listitem.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the listitem.
 * @event focus - (React: onFocus) This event is dispatched when the listitem receives focus.
 * @event enabled - (React: onEnabled) This event is dispatched after the listitem is enabled
 * @event disabled - (React: onDisabled) This event is dispatched after the listitem is disabled
 * @event created - (React: onCreated) This event is dispatched after the listitem is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched after the listitem is destroyed (removed from the DOM)
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ListItem",module:"components/listitem/listitem.component.js"}}]},{kind:"javascript-module",path:"components/marker/marker.component.js",declarations:[{kind:"class",description:`\`mdc-marker\`, which is a vertical line and
used to draw attention to specific parts of
the content or to signify important information.

**Marker Variants**:
- **solid**: Solid marker.
- **striped**: Striped marker.`,name:"Marker",cssProperties:[{description:"Allows customization of the default background color in solid variant.",name:"--mdc-marker-solid-background-color"},{description:"Allows customization of the default stripes in striped variant.",name:"--mdc-marker-striped-color"},{description:"Allows customization of the default background color in striped variant.",name:"--mdc-marker-striped-background-color"},{description:"Allows customization of the default width.",name:"--mdc-marker-width"}],members:[{kind:"field",name:"variant",type:{text:"MarkerVariants"},privacy:"public",description:`There are two variants of markers, each with a width of 0.25rem:
- **solid**: Solid marker.
- **striped**: Striped marker.`,default:"solid",attribute:"variant",reflects:!0}],attributes:[{name:"variant",type:{text:"MarkerVariants"},description:`There are two variants of markers, each with a width of 0.25rem:
- **solid**: Solid marker.
- **striped**: Striped marker.`,default:"solid",fieldName:"variant"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-marker",jsDoc:`/**
 * \`mdc-marker\`, which is a vertical line and
 * used to draw attention to specific parts of
 * the content or to signify important information.
 *
 * **Marker Variants**:
 * - **solid**: Solid marker.
 * - **striped**: Striped marker.
 *
 * @tagname mdc-marker
 *
 * @cssproperty --mdc-marker-solid-background-color - Allows customization of the default background color
 * in solid variant.
 * @cssproperty --mdc-marker-striped-color - Allows customization of the default stripes in striped variant.
 * @cssproperty --mdc-marker-striped-background-color - Allows customization of the default background color
 * in striped variant.
 * @cssproperty --mdc-marker-width - Allows customization of the default width.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Marker",module:"components/marker/marker.component.js"}}]},{kind:"javascript-module",path:"components/menubar/menubar.component.js",declarations:[{kind:"class",description:`Menubar is a navigational menu component that provides a vertical fixed list of menu items,
with support for nested submenus and keyboard navigation. It serves as a container
for menu items and manages their interaction patterns, including:
- Keyboard navigation (Arrow keys, Home, End)
- Menu item activation (Enter/Space)
- Submenu toggling (Right/Left arrow keys)
- Focus management
- Integration with MenuPopover for nested menus

A menubar will contain a set of menu items and their associated popovers.
Each menu item can have a popover for nested menus.

The component automatically handles ARIA attributes and follows WAI-ARIA menu design patterns.
It works in conjunction with \`mdc-menuitem\` and \`mdc-menupopover\` to create accessible menu structures.

**Note:** A menubar contains three types of menu items, including menuitem, menuitemradio and menuitemcheckbox. These menu items may optionally be nested in one or more group containers. Groups or items may optionally by separated with separator elements.

\`mdc-menubar\` contains a group that wraps all its chilren passed within the default slot. This has been added to ensure the right accessibility behavior while using screen readers.`,name:"MenuBar",slots:[{description:"Contains the menu items and their associated popovers",name:"default"}],members:[{kind:"field",name:"menusections",type:{text:"Array<HTMLElement>"}},{kind:"field",name:"menuItems",type:{text:"Array<HTMLElement>"},description:"Returns all menuitem elements, including those nested inside menusection.",readonly:!0},{kind:"method",name:"getAllPopovers",privacy:"private",return:{type:{text:"Element[]"}},description:"Returns all menupopovers, including direct and slotted ones ."},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"}},{description:"The target menu item that was clicked.",name:"target"}],description:`Closes all other submenus on the top level.
This method is used to ensure that only one topolevel submenu is open at a time.
It finds all other menu items with submenus and closes their submenus.`},{kind:"method",name:"resetTabIndexAndSetActiveTabIndex",privacy:"private",parameters:[{name:"menuItems",type:{text:"Array<HTMLElement>"}},{description:"The index of the new active element in the list.",name:"newIndex"}],description:`Resets all list items tabindex to -1 and sets the tabindex of the
element at the given index to 0, effectively setting the active
element. This is used when navigating the list via keyboard.`},{kind:"method",name:"getCurrentIndex",privacy:"private",return:{type:{text:"number"}},parameters:[{name:"target",type:{text:"EventTarget | null"}}]},{kind:"method",name:"getSubmenu",privacy:"private",return:{type:{text:"MenuPopover | undefined"}},parameters:[{name:"triggerId",type:{text:"string | null"}}]},{kind:"method",name:"showSubmenu",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"triggerId",type:{text:"string | null"}}]},{kind:"method",name:"updatePopoverPlacement",privacy:"private",return:{type:{text:"void"}}},{kind:"method",name:"updateTabIndexAndFocus",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"menuItems",type:{text:"HTMLElement[]"}},{name:"currentIndex",type:{text:"number"}},{name:"newIndex",type:{text:"number"}}]},{kind:"method",name:"navigateToMenuItem",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"currentIndex",type:{text:"number"}},{name:"direction",type:{text:"'prev' | 'next'"}},{name:"shouldOpenSubmenu",default:"false"}]},{kind:"method",name:"getKeyWithDirectionFix",privacy:"private",return:{type:{text:"string"}},parameters:[{name:"originalKey",type:{text:"string"}}]},{kind:"method",name:"isTopLevelMenuItem",privacy:"private",return:{type:{text:"boolean"}},parameters:[{name:"element",type:{text:"HTMLElement"}}],description:"Determines if a menuitem is a top-level menuitem (direct child of menubar or child of menusection whose parent is menubar)"},{kind:"method",name:"isNestedMenuItem",privacy:"private",return:{type:{text:"boolean"}},parameters:[{name:"element",type:{text:"HTMLElement"}}]},{kind:"method",name:"closeAllMenuPopovers",privacy:"private"},{kind:"method",name:"crossMenubarNavigationOnLeft",privacy:"private",return:{type:{text:"Promise<void>"}},parameters:[{name:"element",type:{text:"HTMLElement"}}]},{kind:"method",name:"crossMenubarNavigationOnRight",privacy:"private",return:{type:{text:"Promise<void>"}},parameters:[{name:"element",type:{text:"HTMLElement"}}]},{kind:"method",name:"getParentMenuItemIndex",privacy:"private",return:{type:{text:"number"}},parameters:[{name:"element",type:{text:"HTMLElement"}}]},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"Promise<void>"}},parameters:[{name:"event",type:{text:"KeyboardEvent"}}]}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-menubar",jsDoc:`/**
 * Menubar is a navigational menu component that provides a vertical fixed list of menu items,
 * with support for nested submenus and keyboard navigation. It serves as a container
 * for menu items and manages their interaction patterns, including:
 * - Keyboard navigation (Arrow keys, Home, End)
 * - Menu item activation (Enter/Space)
 * - Submenu toggling (Right/Left arrow keys)
 * - Focus management
 * - Integration with MenuPopover for nested menus
 *
 * A menubar will contain a set of menu items and their associated popovers.
 * Each menu item can have a popover for nested menus.
 *
 * The component automatically handles ARIA attributes and follows WAI-ARIA menu design patterns.
 * It works in conjunction with \`mdc-menuitem\` and \`mdc-menupopover\` to create accessible menu structures.
 *
 * **Note:** A menubar contains three types of menu items, including menuitem, menuitemradio and menuitemcheckbox. These menu items may optionally be nested in one or more group containers. Groups or items may optionally by separated with separator elements.
 *
 * \`mdc-menubar\` contains a group that wraps all its chilren passed within the default slot. This has been added to ensure the right accessibility behavior while using screen readers.
 *
 * @tagname mdc-menubar
 * @slot default - Contains the menu items and their associated popovers
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"MenuBar",module:"components/menubar/menubar.component.js"}}]},{kind:"javascript-module",path:"components/menuitem/menuitem.component.js",declarations:[{kind:"class",description:"menuitem component is inherited by listitem component with the role set `menuitem`.<br/>\nA menu item can contain an icon on the leading or trailing side.\n\nThe leading and trailing slots can be used to display controls and text.<br/>\nBased on the leading/trailing slot, the position of the controls and text can be adjusted.\n\nPlease use element with role=menu as a parent element even when there is only menuitem for a11y purpose.\nFor example mdc-menupopover or mdc-menubar.\n\nMenu item has `name` and `value` attribute that can be used to identify the menu item when it is selected.\n\n**Note**: If a menuitem contains a long text, it is recommended to create a tooltip for the menuitem that displays the full text on hover.\nConsumers need to add a unique ID to this menuitem and use that ID in the tooltip's `triggerID` attribute. We are not creating the tooltip automatically, consumers need to add `<mdc-tooltip>` element manually and associate it with the menuitem using the `triggerID` attribute.",name:"MenuItem",slots:[{description:"slot for menu item controls to appear of leading end.",name:"leading-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item primary label.",name:"leading-text-primary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item secondary label.",name:"leading-text-secondary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item tertiary label.",name:"leading-text-tertiary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item side header text.",name:"trailing-text-side-header",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item subline text.",name:"trailing-text-subline",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item controls to appear of trailing end.",name:"trailing-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],members:[{kind:"field",name:"arrowPosition",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",attribute:"arrow-position",reflects:!0},{kind:"field",name:"arrowDirection",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",attribute:"arrow-direction",reflects:!0},{kind:"field",name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",attribute:"name",reflects:!0},{kind:"field",name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,attribute:"value",reflects:!0},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keydown event for the menu item.
If the Enter key is pressed, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Enter key.

This follows the native behaviour, actionable element can be triggered by Enter
key on the keydown event.

Note: Action triggered by Space on the keyup event.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keyup event for the menu item.
If the Space key is released, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Space key.
It also prevents the default action of the Space key to avoid scrolling the page.

This follows the native behaviour, actionable element can be triggered by Space
key on the keyup event.

Note: Action triggered by Enter on the keydown event.`},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot and optionally the trailing arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot and optionally the leading arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the menuitem is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the menuitem.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the menuitem.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onFocus) This event is dispatched when the menuitem receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onEnabled) This event is dispatched after the menuitem is enabled",name:"enabled",reactName:"onEnabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDisabled) This event is dispatched after the menuitem is disabled",name:"disabled",reactName:"onDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onCreated) This event is dispatched after the menuitem is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDestroyed) This event is dispatched after the menuitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],attributes:[{name:"arrow-position",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",fieldName:"arrowPosition"},{name:"arrow-direction",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",fieldName:"arrowDirection"},{name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",fieldName:"name"},{name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,fieldName:"value"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],superclass:{name:"ListItem",module:"/src/components/listitem/listitem.component"},tagName:"mdc-menuitem",jsDoc:`/**
 * menuitem component is inherited by listitem component with the role set \`menuitem\`.<br/>
 * A menu item can contain an icon on the leading or trailing side.
 *
 * The leading and trailing slots can be used to display controls and text.<br/>
 * Based on the leading/trailing slot, the position of the controls and text can be adjusted.
 *
 * Please use element with role=menu as a parent element even when there is only menuitem for a11y purpose.
 * For example mdc-menupopover or mdc-menubar.
 *
 * Menu item has \`name\` and \`value\` attribute that can be used to identify the menu item when it is selected.
 *
 * **Note**: If a menuitem contains a long text, it is recommended to create a tooltip for the menuitem that displays the full text on hover.
 * Consumers need to add a unique ID to this menuitem and use that ID in the tooltip's \`triggerID\` attribute. We are not creating the tooltip automatically, consumers need to add \`<mdc-tooltip>\` element manually and associate it with the menuitem using the \`triggerID\` attribute.
 *
 * @dependency mdc-text
 * @dependency mdc-icon
 *
 * @tagname mdc-menuitem
 *
 * @slot leading-controls - slot for menu item controls to appear of leading end.
 * @slot leading-text-primary-label - slot for menu item primary label.
 * @slot leading-text-secondary-label - slot for menu item secondary label.
 * @slot leading-text-tertiary-label - slot for menu item tertiary label.
 * @slot trailing-text-side-header - slot for menu item side header text.
 * @slot trailing-text-subline - slot for menu item subline text.
 * @slot trailing-controls - slot for menu item controls to appear of trailing end.
 *
 * @event click - (React: onClick) This event is dispatched when the menuitem is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the menuitem.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the menuitem.
 * @event focus - (React: onFocus) This event is dispatched when the menuitem receives focus.
 * @event enabled - (React: onEnabled) This event is dispatched after the menuitem is enabled
 * @event disabled - (React: onDisabled) This event is dispatched after the menuitem is disabled
 * @event created - (React: onCreated) This event is dispatched after the menuitem is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched after the menuitem is destroyed (removed from the DOM)
 */`,customElement:!0,cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}}]},{kind:"javascript-module",path:"components/menuitemcheckbox/menuitemcheckbox.component.js",declarations:[{kind:"class",description:`A menuitemcheckbox component is a checkable menuitem.
There should be no focusable descendants inside this menuitemcheckbox component.

The \`checked\` attribute indicates whether the menuitemcheckbox is checked or not.

Menu item checkbox has \`name\` and \`value\` attribute that can be used to identify the menu item when it is selected.

The \`indicator\` attribute is used to differentiate between <b>checkbox</b>, <b>checkmark</b>, <b>toggle</b> and <b>none</b>.
By default, the \`indicator\` is set to <b>checkbox</b>.<br/>

The checkbox will always be positioned on the leading side of the menuitem label and
the toggle and checkmark will always be positioned on the trailing side.

The checkbox will have the possible states of \`true\` or \`false\`.
If the indicator is set to <b>checkmark</b> and if the \`checked\` attribute is set to \`true\`,
then the checkmark will be displayed. if not, then no indicator will be displayed.

The forth options for the \`indicator\` is <b>none</b>, which will not display any indicator at all.
It is intended to be used for customised menu items where the indicator is implemented differently.
For example, you can use a custom icon or a different visual element to indicate the state of the menu item.
Make sure the new indicator is accessible.

If you want only one item in a group to be checked, consider using menuitemradio component.`,name:"MenuItemCheckbox",slots:[{description:"slot for menu item checkbox controls to appear of leading end.",name:"leading-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox primary label.",name:"leading-text-primary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox secondary label.",name:"leading-text-secondary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox tertiary label.",name:"leading-text-tertiary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox side header text.",name:"trailing-text-side-header",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox subline text.",name:"trailing-text-subline",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item checkbox controls to appear of trailing end.",name:"trailing-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"The checked attribute is used to indicate that the menuitemcheckbox is checked or not.",attribute:"checked",reflects:!0},{kind:"field",name:"indicator",type:{text:"Indicator"},description:"The indicator attribute is used to differentiate between <b>checkbox</b> and <b>toggle</b>.",default:"'checkbox'",attribute:"indicator",reflects:!0},{kind:"method",name:"handleMouseClick",privacy:"private",description:"Handles click events to toggle checked state\nIf the menuitemcheckbox is disabled, it does nothing.\nIf the menuitemcheckbox is not disabled, it toggles the `checked` state between `true` and `false`."},{kind:"method",name:"staticCheckbox",privacy:"private",return:{type:{text:""}},description:`Returns a static checkbox element if the indicator is set to checkbox.
If the indicator is not set to checkbox, it returns nothing.`},{kind:"method",name:"staticToggle",privacy:"private",return:{type:{text:""}},description:`Returns a static toggle element if the indicator is set to toggle.
If the indicator is not set to toggle, it returns nothing.

The toggle will always be positioned on the trailing side of the menuitem label.`},{kind:"method",name:"getCheckmarkIcon",privacy:"private",return:{type:{text:""}},description:`Returns a checkmark icon if the indicator is set to checkmark and the checked state is true.
If the indicator is not set to checkmark or the checked state is false, it returns nothing.

The checkmark icon will always be positioned on the trailing side of the menuitem label.`},{kind:"field",name:"arrowPosition",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",attribute:"arrow-position",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"arrowDirection",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",attribute:"arrow-direction",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",attribute:"name",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,attribute:"value",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keydown event for the menu item.
If the Enter key is pressed, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Enter key.

This follows the native behaviour, actionable element can be triggered by Enter
key on the keydown event.

Note: Action triggered by Space on the keyup event.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keyup event for the menu item.
If the Space key is released, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Space key.
It also prevents the default action of the Space key to avoid scrolling the page.

This follows the native behaviour, actionable element can be triggered by Space
key on the keyup event.

Note: Action triggered by Enter on the keydown event.`,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot and optionally the trailing arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot and optionally the leading arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) This event is dispatched when the menuitemcheckbox changes.",reactName:"onChange"},{description:"(React: onClick) This event is dispatched when the menuitemcheckbox is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onFocus) This event is dispatched when the menuitemcheckbox receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the menuitem.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the menuitem.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onEnabled) This event is dispatched after the menuitem is enabled",name:"enabled",reactName:"onEnabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDisabled) This event is dispatched after the menuitem is disabled",name:"disabled",reactName:"onDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onCreated) This event is dispatched after the menuitem is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDestroyed) This event is dispatched after the menuitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"The checked attribute is used to indicate that the menuitemcheckbox is checked or not.",fieldName:"checked"},{name:"indicator",type:{text:"Indicator"},description:"The indicator attribute is used to differentiate between <b>checkbox</b> and <b>toggle</b>.",default:"'checkbox'",fieldName:"indicator"},{name:"arrow-position",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",fieldName:"arrowPosition",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"arrow-direction",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",fieldName:"arrowDirection",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",fieldName:"name",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,fieldName:"value",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],superclass:{name:"MenuItem",module:"/src/components/menuitem/menuitem.component"},tagName:"mdc-menuitemcheckbox",jsDoc:`/**
 * A menuitemcheckbox component is a checkable menuitem.
 * There should be no focusable descendants inside this menuitemcheckbox component.
 *
 * The \`checked\` attribute indicates whether the menuitemcheckbox is checked or not.
 *
 * Menu item checkbox has \`name\` and \`value\` attribute that can be used to identify the menu item when it is selected.
 *
 * The \`indicator\` attribute is used to differentiate between <b>checkbox</b>, <b>checkmark</b>, <b>toggle</b> and <b>none</b>.
 * By default, the \`indicator\` is set to <b>checkbox</b>.<br/>
 *
 * The checkbox will always be positioned on the leading side of the menuitem label and
 * the toggle and checkmark will always be positioned on the trailing side.
 *
 * The checkbox will have the possible states of \`true\` or \`false\`.
 * If the indicator is set to <b>checkmark</b> and if the \`checked\` attribute is set to \`true\`,
 * then the checkmark will be displayed. if not, then no indicator will be displayed.
 *
 * The forth options for the \`indicator\` is <b>none</b>, which will not display any indicator at all.
 * It is intended to be used for customised menu items where the indicator is implemented differently.
 * For example, you can use a custom icon or a different visual element to indicate the state of the menu item.
 * Make sure the new indicator is accessible.
 *
 * If you want only one item in a group to be checked, consider using menuitemradio component.
 *
 * @dependency mdc-staticcheckbox
 * @dependency mdc-statictoggle
 * @dependency mdc-icon
 *
 * @tagname mdc-menuitemcheckbox
 *
 * @slot leading-controls - slot for menu item checkbox controls to appear of leading end.
 * @slot leading-text-primary-label - slot for menu item checkbox primary label.
 * @slot leading-text-secondary-label - slot for menu item checkbox secondary label.
 * @slot leading-text-tertiary-label - slot for menu item checkbox tertiary label.
 * @slot trailing-text-side-header - slot for menu item checkbox side header text.
 * @slot trailing-text-subline - slot for menu item checkbox subline text.
 * @slot trailing-controls - slot for menu item checkbox controls to appear of trailing end.
 *
 * @event change - (React: onChange) This event is dispatched when the menuitemcheckbox changes.
 * @event click - (React: onClick) This event is dispatched when the menuitemcheckbox is clicked.
 * @event focus - (React: onFocus) This event is dispatched when the menuitemcheckbox receives focus.
 */`,customElement:!0,cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"MenuItemCheckbox",module:"components/menuitemcheckbox/menuitemcheckbox.component.js"}}]},{kind:"javascript-module",path:"components/menuitemradio/menuitemradio.component.js",declarations:[{kind:"class",description:`A menuitemradio component is a checkable menuitem that is used in a menu.
A menuitemradio should be checked only one at a time. <br/>
There should be no focusable descendants inside this menuitemradio component.

The \`checked\` menuitemradio attribute is used to indicate that the menuitemradio is checked or not.

Menu item radio has \`name\` and \`value\` attribute that can be used to identify the menu item when it is selected.

If you want more than one item in a group to be checked, consider using menuitemcheckbox component.

The \`indicator\` attribute is used to differentiate between <b>radio</b>, <b>checkmark</b> and <b>none</b>.
By default, the \`indicator\` is set to <b>radio</b>.<br/>

The checkbox will always be positioned on the leading side of the menuitem label and
the checkmark will always be positioned on the trailing side.

The radio will have the possible states of \`true\` or \`false\`.
If the indicator is set to <b>checkmark</b> and if the \`checked\` attribute is set to \`true\`,
then the checkmark will be displayed. if not, then no indicator will be displayed.

The third options for the \`indicator\` is <b>none</b>, which will not display any indicator at all.
It is intended to be used for customised menu items where the indicator is implemented differently.
For example, you can use a custom icon or a different visual element to indicate the state of the menu item.
Make sure the new indicator is accessible.`,name:"MenuItemRadio",slots:[{description:"slot for menu item radio controls to appear of leading end.",name:"leading-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio primary label.",name:"leading-text-primary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio secondary label.",name:"leading-text-secondary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio tertiary label.",name:"leading-text-tertiary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio side header text.",name:"trailing-text-side-header",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio subline text.",name:"trailing-text-subline",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item radio controls to appear of trailing end.",name:"trailing-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"The aria-checked attribute is used to indicate that the menuitemradio is checked or not.",attribute:"checked",reflects:!0},{kind:"field",name:"indicator",type:{text:"Indicator"},description:"The indicator attribute is used to differentiate between <b>radio</b>, <b>checkmark</b> and <b>none</b>.",default:"'radio'",attribute:"indicator",reflects:!0},{kind:"method",name:"getAllRadiosWithinSameGroup",privacy:"private",return:{type:{text:"MenuItemRadio[]"}},description:"Returns all radios within the same group (name)."},{kind:"method",name:"updateOtherRadiosCheckedState",privacy:"private",return:{type:{text:"void"}},description:"Updates the checked state of all other radios in the same group.\nThis method is called when a radio is clicked to ensure that only one radio in the group can be checked at a time.\nIt sets the `checked` property of all other radios in the same group to `false`."},{kind:"method",name:"handleMouseClick",privacy:"private",description:"Handles click events to set checked state and uncheck siblings in the same group and container.\nIf the menuitemradio is not checked, it sets its checked state to `true`\nand sets all other menuitemradio elements of the same group with checked state to `false`."},{kind:"method",name:"renderStaticRadio",privacy:"private",return:{type:{text:""}},description:`Returns a static checkbox element if the indicator is set to checkbox.
If the indicator is not set to checkbox, it returns nothing.`},{kind:"method",name:"renderCheckmarkIcon",privacy:"private",return:{type:{text:""}},description:`Returns a checkmark icon if the indicator is set to checkmark and the checked state is true.
If the indicator is not set to checkmark or the checked state is false, it returns nothing.

The checkmark icon will always be positioned on the trailing side of the menuitem label.`},{kind:"field",name:"arrowPosition",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",attribute:"arrow-position",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"arrowDirection",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",attribute:"arrow-direction",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",attribute:"name",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,attribute:"value",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keydown event for the menu item.
If the Enter key is pressed, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Enter key.

This follows the native behaviour, actionable element can be triggered by Enter
key on the keydown event.

Note: Action triggered by Space on the keyup event.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keyup event for the menu item.
If the Space key is released, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Space key.
It also prevents the default action of the Space key to avoid scrolling the page.

This follows the native behaviour, actionable element can be triggered by Space
key on the keyup event.

Note: Action triggered by Enter on the keydown event.`,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot and optionally the trailing arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot and optionally the leading arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) This event is dispatched when the menuitemradio changes.",reactName:"onChange"},{description:"(React: onClick) This event is dispatched when the menuitemradio is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onFocus) This event is dispatched when the menuitemradio receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the menuitem.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the menuitem.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onEnabled) This event is dispatched after the menuitem is enabled",name:"enabled",reactName:"onEnabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDisabled) This event is dispatched after the menuitem is disabled",name:"disabled",reactName:"onDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onCreated) This event is dispatched after the menuitem is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDestroyed) This event is dispatched after the menuitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"The aria-checked attribute is used to indicate that the menuitemradio is checked or not.",fieldName:"checked"},{name:"indicator",type:{text:"Indicator"},description:"The indicator attribute is used to differentiate between <b>radio</b>, <b>checkmark</b> and <b>none</b>.",default:"'radio'",fieldName:"indicator"},{name:"arrow-position",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",fieldName:"arrowPosition",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"arrow-direction",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",fieldName:"arrowDirection",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",fieldName:"name",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,fieldName:"value",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],superclass:{name:"MenuItem",module:"/src/components/menuitem/menuitem.component"},tagName:"mdc-menuitemradio",jsDoc:`/**
 * A menuitemradio component is a checkable menuitem that is used in a menu.
 * A menuitemradio should be checked only one at a time. <br/>
 * There should be no focusable descendants inside this menuitemradio component.
 *
 * The \`checked\` menuitemradio attribute is used to indicate that the menuitemradio is checked or not.
 *
 * Menu item radio has \`name\` and \`value\` attribute that can be used to identify the menu item when it is selected.
 *
 * If you want more than one item in a group to be checked, consider using menuitemcheckbox component.
 *
 * The \`indicator\` attribute is used to differentiate between <b>radio</b>, <b>checkmark</b> and <b>none</b>.
 * By default, the \`indicator\` is set to <b>radio</b>.<br/>
 *
 * The checkbox will always be positioned on the leading side of the menuitem label and
 * the checkmark will always be positioned on the trailing side.
 *
 * The radio will have the possible states of \`true\` or \`false\`.
 * If the indicator is set to <b>checkmark</b> and if the \`checked\` attribute is set to \`true\`,
 * then the checkmark will be displayed. if not, then no indicator will be displayed.
 *
 * The third options for the \`indicator\` is <b>none</b>, which will not display any indicator at all.
 * It is intended to be used for customised menu items where the indicator is implemented differently.
 * For example, you can use a custom icon or a different visual element to indicate the state of the menu item.
 * Make sure the new indicator is accessible.
 *
 * @dependency mdc-icon
 * @dependency mdc-staticradio
 * @dependency mdc-text
 * @dependency mdc-tooltip
 *
 * @tagname mdc-menuitemradio
 *
 * @slot leading-controls - slot for menu item radio controls to appear of leading end.
 * @slot leading-text-primary-label - slot for menu item radio primary label.
 * @slot leading-text-secondary-label - slot for menu item radio secondary label.
 * @slot leading-text-tertiary-label - slot for menu item radio tertiary label.
 * @slot trailing-text-side-header - slot for menu item radio side header text.
 * @slot trailing-text-subline - slot for menu item radio subline text.
 * @slot trailing-controls - slot for menu item radio controls to appear of trailing end.
 *
 * @event change - (React: onChange) This event is dispatched when the menuitemradio changes.
 * @event click - (React: onClick) This event is dispatched when the menuitemradio is clicked.
 * @event focus - (React: onFocus) This event is dispatched when the menuitemradio receives focus.
 */`,customElement:!0,cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"MenuItemRadio",module:"components/menuitemradio/menuitemradio.component.js"}}]},{kind:"javascript-module",path:"components/menupopover/menupopover.component.js",declarations:[{kind:"class",description:`A popover menu component that displays a list of menu items in a floating container.
It's designed to work in conjunction with \`mdc-menubar\` and \`mdc-menuitem\` to create
accessible, nested menu structures with the following features:
- Appears adjacent to the triggering menu item
- Supports keyboard navigation (arrow keys, Home, End)
- Manages focus trapping when open
- Closes on Escape key or outside click
- Supports both mouse and keyboard interactions
- Automatically handles ARIA attributes for accessibility

The component extends \`mdc-popover\` and adds menu-specific behaviors and styling.
When nested within another \`mdc-menupopover\`, it automatically adjusts its behavior
to work as a submenu (right-aligned, shows on hover).

The orientation of the menu popover is always set to \`vertical\`.

Submenu opens when:
- Clicked on a menu item with a submenu
- Enter or Space key pressed on a menu item with a submenu

Menu closes completely (with all sub menus) when:
- A menu item is clicked that does not have a submenu
- Enter key pressed on a menu item (not a submenu trigger), menu item radio or menu item checkbox
- Click outside the menu popover (on the backdrop)

Close submenus when:
- Esc key pressed, only the current submenu closed
- Arrow Left key pressed, only the current submenu closed
- Open another submenu with Click, Enter or Space key,
  closes recursively all submenus until the selected item's submenu

Menu does not close when:
- Space key pressed on a menu item radio or menu item checkbox`,name:"MenuPopover",slots:[{description:"Default slot for the menu popover content",name:"",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"Contains the menu items to be displayed in the popover",name:"default"}],members:[{kind:"field",name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",attribute:"placement",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"menuItems",type:{text:"Array<HTMLElement>"},privacy:"private",default:"[]"},{kind:"field",name:"menuItemsWithSubMenus",type:{text:"Array<HTMLElement>"},privacy:"private",default:"[]"},{kind:"method",name:"isOpenUpdated",privacy:"protected",parameters:[{name:"oldValue",type:{text:"boolean"}},{name:"newValue",type:{text:"boolean"}}],description:`Handles the popover visibility change and position the popover.
Handles the exit event to close the popover.`,return:{type:{text:"Promise<void>"}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"resetTabIndexes",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The index of the currently focused menu item."}],description:"Reset all tabindex to -1 and set the tabindex of the current menu item to 0"},{kind:"method",name:"getCurrentIndex",privacy:"private",return:{type:{text:""}},parameters:[{name:"target",type:{text:"EventTarget | null"},description:"The target element that triggered the event."}],description:"Retrieves the current index of the menu item that triggered the event."},{kind:"method",name:"resetTabIndexAndSetFocus",privacy:"private",parameters:[{name:"newIndex",type:{text:"number"},description:"The index of the new menu item to focus."},{name:"oldIndex",type:{text:"number"},description:"The index of the currently focused menu item."}],description:"Resets the tabindex of the currently focused menu item and sets focus to a new menu item.",return:{type:{text:""}}},{kind:"method",name:"closeAllMenuPopovers",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"until",optional:!0,type:{text:"Element"},description:"The popover to close until."}],description:`Closes all menu popovers in the stack.
This method is used to ensure that when a menu item is clicked,
all other open popovers are closed, maintaining a clean user interface.
It iterates through the \`popoverStack\` and hides each popover until the stack is empty.`},{kind:"field",name:"onOutsidePopoverClick",privacy:"protected",description:`Handles outside click events to close the popover.
This method checks if the click occurred outside the popover and its trigger element.
If so, it closes the popover by calling \`closeAllMenuPopovers\`.
It also checks if the click was on the backdrop element (if present) to close the popover.`,parameters:[{description:"The mouse event that triggered the outside click.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"togglePopoverVisible",privacy:"public",description:`Toggles the visibility of the popover.
This method checks if the trigger element has the \`soft-disabled\` attribute.
If it does, the popover will not be toggled.
If the popover is currently visible, it hides the popover; otherwise, it shows the popover.`,return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"closeOtherSubMenusOnSameLevel",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"target",type:{text:"HTMLElement"},description:"The target menu item that was clicked."}],description:`Closes all other submenus on the same level as the target menu item.
This method is used to ensure that only one submenu is open at a time.
It finds all other menu items with submenus and closes their submenus.`},{kind:"method",name:"fireMenuItemAction",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"target",type:{text:"HTMLElement"},description:"The target menu item that was clicked or activated."}],description:"Fires the 'action' event on the target menu item.\nThis method is used to trigger the action associated with a menu item when it is clicked or activated.\nIt checks if the target element matches the `MENUITEM_TAGNAME` and dispatches an 'action' event."},{kind:"method",name:"handleMouseClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event that triggered the click."}],description:`Handles mouse click events on the menu items.
This method checks if the clicked element is a valid menu item and not a submenu trigger.
If it is, it closes all other menu popovers to ensure only one menu is open at a time.`},{kind:"field",name:"handleItemCreation",privacy:"private"},{kind:"field",name:"handleItemChangeEvent",privacy:"private"},{kind:"field",name:"resetMenuNavigation",privacy:"private"},{kind:"method",name:"resolveDirectionKey",privacy:"private",parameters:[{name:"key",type:{text:"string"},description:"The key pressed by the user."},{name:"isRtl",type:{text:"boolean"},description:"A boolean indicating if the layout is right-to-left (RTL)."}],description:`Resolves the key pressed by the user based on the direction of the layout.
This method is used to handle keyboard navigation in a right-to-left (RTL) layout.
It checks if the layout is RTL and adjusts the arrow keys accordingly.
For example, in RTL, the left arrow key behaves like the right arrow key and vice versa.`,return:{type:{text:""}}},{kind:"field",name:"handleKeyDown",privacy:"private",description:`Handles keydown events for keyboard navigation within the menu popover.
This method allows users to navigate through the menu items using the keyboard.
It supports Home, End, Arrow Up, Arrow Down, Arrow Left, Arrow Right, and Escape keys.

Also, it handles Enter key to close the menu popover`,parameters:[{description:"The keyboard event that triggered the keydown action.",name:"event"}],return:{type:{text:""}}},{kind:"field",name:"handleKeyUp",privacy:"private",description:`Handles keyup events for keyboard navigation within the menu popover.

Some keys must be handled with keyup event to prevent default action.

Space key closes the menu when the user presses it on a menu item,
but the same key will trigger a click on the menu opener button.
The button uses the keyup event so we have to handle it here as well
to prevent the meu opener action which would re-open the menu.`,parameters:[{description:"The keyboard event that triggered the keydown action.",name:"event"}],return:{type:{text:""}}},{kind:"field",name:"zIndex",type:{text:"number"},description:`IMPLEMENT THIS IN YOUR COMPONENT.

The z-index of the component where the backdrop will be attached to.
The backdrop itself will have a z-index of \`zIndex - 1\`.`,default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"preventScroll",type:{text:"boolean"},description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"prevent-scroll",reflects:!0,privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"field",name:"focusTrap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"focus-trap",reflects:!0,privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",attribute:"id",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,attribute:"triggerID",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",attribute:"trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",attribute:"color",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",attribute:"visible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",attribute:"offset",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryRoot",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",attribute:"boundary-root",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryPadding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",attribute:"boundary-padding",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"showArrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",attribute:"show-arrow",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButton",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",attribute:"close-button",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",attribute:"interactive",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",attribute:"delay",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnEscape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",attribute:"hide-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"propagateEventOnEscape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",attribute:"propagate-event-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnBlur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",attribute:"hide-on-blur",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnOutsideClick",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",attribute:"hide-on-outside-click",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusBackToTrigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",attribute:"focus-back-to-trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",attribute:"backdrop",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",attribute:"backdrop-append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",attribute:"is-backdrop-invisible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",attribute:"flip",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",attribute:"size",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"appendTo",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",attribute:"append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",attribute:"close-button-aria-label",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",attribute:"strategy",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",attribute:"role",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,attribute:"aria-labelledby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaDescribedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",attribute:"aria-describedby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"disableAriaExpanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",attribute:"disable-aria-expanded",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"keepConnectedTooltipClosed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,attribute:"keep-connected-tooltip-closed",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"arrowElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"storeConnectedTooltip",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setupTriggerRelatedElement",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cleanupTrigger",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"setupTriggerListeners",privacy:"private",description:`Sets up the trigger related event listeners, based on the trigger type.
Includes fallback for mouseenter trigger to also handle focusin for non-interactive popovers.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeTriggerListeners",privacy:"private",description:"Removes the trigger related event listeners.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeAllListeners",privacy:"private",description:"Removes all event listeners related to the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onEscapeKeydown",privacy:"private",description:`Handles the escape keydown event to close the popover.

This method is attached to the document.`,parameters:[{description:"The keyboard event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onPopoverFocusOut",privacy:"private",description:"Handles the popover focus out event.",parameters:[{description:"The focus event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseEnter",privacy:"private",description:"Handles mouse enter event on the trigger element.\nThis method sets the `isHovered` flag to true and shows the popover",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseLeave",privacy:"private",description:"Handles mouse leave event on the trigger element.\nThis method sets the `isHovered` flag to false and starts the close delay\ntimer to hide the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusOut",privacy:"private",description:`Handles focus out event on the trigger element.
This method checks if the popover is not hovered and hides the popover.
If the popover is hovered, it will not hide the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusIn",privacy:"private",description:`Handles focus in event on the trigger element.
This method checks if the trigger element has visible focus or is being hovered.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"startCloseDelay",privacy:"private",description:`Starts the close delay timer.
If the popover is not interactive, it will close the popover after the delay.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cancelCloseDelay",privacy:"private",description:"Cancels the close delay timer.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"show",privacy:"public",description:"Shows the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hide",privacy:"public",description:"Hides the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"positionPopover",privacy:"private",description:`Positions the popover based on the trigger element.
It also handles the flip, size and arrow placement.
It uses the floating-ui/dom library to calculate the position.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"findClosestPopover",privacy:"protected",description:`Finds the closest popover to the passed element in the DOM tree.

Useful when need to find the parent popover in a nested popover scenario.`,parameters:[{description:"The element to start searching from.",name:"element"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"utils",default:"new PopoverUtils(this)",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}}],events:[{description:"(React: onChange) This event is dispatched when a `menuitemcheckbox`, or `menuitemradio` changes.",name:"change",reactName:"onChange"},{description:"(React: onAction) This event is dispatched when a menuItem selected and the menu closes.",name:"action",reactName:"onAction"},{description:"(React: onShown) This event is dispatched when the popover is shown",name:"shown",reactName:"onShown",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onHidden) This event is dispatched when the popover is hidden",name:"hidden",reactName:"onHidden",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onCreated) This event is dispatched when the popover is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onDestroyed) This event is dispatched when the popover is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],attributes:[{name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",fieldName:"placement",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"FocusTrapMixin",module:"src/utils/mixins/FocusTrapMixin.ts"}},{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",fieldName:"id",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,fieldName:"triggerID",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",fieldName:"trigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",fieldName:"color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",fieldName:"visible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",fieldName:"offset",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-root",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",fieldName:"boundaryRoot",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-padding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",fieldName:"boundaryPadding",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",fieldName:"focusTrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"prevent-scroll",type:{text:"boolean"},description:"Prevent outside scrolling when popover is shown.",default:"false",fieldName:"preventScroll",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"show-arrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",fieldName:"showArrow",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",fieldName:"closeButton",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",fieldName:"interactive",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",fieldName:"delay",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-escape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",fieldName:"hideOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"propagate-event-on-escape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",fieldName:"propagateEventOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-blur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",fieldName:"hideOnBlur",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-outside-click",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",fieldName:"hideOnOutsideClick",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-back-to-trigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",fieldName:"focusBackToTrigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",fieldName:"backdrop",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop-append-to",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",fieldName:"backdropAppendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"is-backdrop-invisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",fieldName:"isBackdropInvisible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",fieldName:"flip",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",fieldName:"size",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"z-index",type:{text:"number"},description:"The z-index of the popover.",default:"1000",fieldName:"zIndex",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"append-to",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",fieldName:"appendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",fieldName:"closeButtonAriaLabel",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",fieldName:"strategy",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",fieldName:"role",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,fieldName:"ariaLabelledby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",fieldName:"ariaDescribedby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"disable-aria-expanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",fieldName:"disableAriaExpanded",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"keep-connected-tooltip-closed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,fieldName:"keepConnectedTooltipClosed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],superclass:{name:"Popover",module:"/src/components/popover/popover.component"},tagName:"mdc-menupopover",jsDoc:`/**
 * A popover menu component that displays a list of menu items in a floating container.
 * It's designed to work in conjunction with \`mdc-menubar\` and \`mdc-menuitem\` to create
 * accessible, nested menu structures with the following features:
 * - Appears adjacent to the triggering menu item
 * - Supports keyboard navigation (arrow keys, Home, End)
 * - Manages focus trapping when open
 * - Closes on Escape key or outside click
 * - Supports both mouse and keyboard interactions
 * - Automatically handles ARIA attributes for accessibility
 *
 * The component extends \`mdc-popover\` and adds menu-specific behaviors and styling.
 * When nested within another \`mdc-menupopover\`, it automatically adjusts its behavior
 * to work as a submenu (right-aligned, shows on hover).
 *
 * The orientation of the menu popover is always set to \`vertical\`.
 *
 * Submenu opens when:
 * - Clicked on a menu item with a submenu
 * - Enter or Space key pressed on a menu item with a submenu
 *
 * Menu closes completely (with all sub menus) when:
 * - A menu item is clicked that does not have a submenu
 * - Enter key pressed on a menu item (not a submenu trigger), menu item radio or menu item checkbox
 * - Click outside the menu popover (on the backdrop)
 *
 * Close submenus when:
 * - Esc key pressed, only the current submenu closed
 * - Arrow Left key pressed, only the current submenu closed
 * - Open another submenu with Click, Enter or Space key,
 *   closes recursively all submenus until the selected item's submenu
 *
 * Menu does not close when:
 * - Space key pressed on a menu item radio or menu item checkbox
 *
 * @tagname mdc-menupopover
 *
 * @slot - Default slot for the menu popover content
 *
 * @event change - (React: onChange) This event is dispatched when a \`menuitemcheckbox\`, or \`menuitemradio\` changes.
 * @event action - (React: onAction) This event is dispatched when a menuItem selected and the menu closes.
 *
 * @slot default - Contains the menu items to be displayed in the popover
 */`,customElement:!0,cssProperties:[{description:"radius of the arrow border",name:"--mdc-popover-arrow-border-radius",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border of the arrow",name:"--mdc-popover-arrow-border",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"primary background color of the popover",name:"--mdc-popover-primary-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border color of the popover",name:"--mdc-popover-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted background color of the popover",name:"--mdc-popover-inverted-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted border color of the popover",name:"--mdc-popover-inverted-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted text color of the popover",name:"--mdc-popover-inverted-text-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"elevation of the popover",name:"--mdc-popover-elevation-3",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max width of the popover",name:"--mdc-popover-max-width",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max height of the popover",name:"--mdc-popover-max-height",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"MenuPopover",module:"components/menupopover/menupopover.component.js"}}]},{kind:"javascript-module",path:"components/menusection/menusection.component.js",declarations:[{kind:"class",description:"`mdc-menusection` is a container element used to group a set of menu items.\n\nThis component supports a mix of `menuitem`, `menuitemcheckbox`, and `menuitemradio` components.\n\n- If multiple `menuitemradio` components are slotted into the section, the group enforces a single-selection rule:\n  only one radio item can be selected at a time.\n- If `menuitemcheckbox` components are included, their checked state can be toggled independently.",name:"MenuSection",slots:[{description:"Default slot for inserting `menuitem`, `menuitemcheckbox`, or `menuitemradio`",name:""}],members:[{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"The aria-label for the section.\nThis is used for accessibility purposes to describe the section.\nIf not provided, it defaults to the `headerText`.",attribute:"aria-label",reflects:!0},{kind:"field",name:"headerText",type:{text:"string | null"},default:"null",description:`The primary headerText of the list item.
This appears on the leading side of the list item.`,attribute:"header-text",reflects:!0},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered before the text

If not provided, no icon will be rendered and text will be aligned to the start.`,attribute:"prefix-icon"},{kind:"field",name:"showDivider",type:{text:"boolean"},default:"false",description:`Whether to show a divider below the section header.
This is useful for visually separating sections in the menu.`,attribute:"show-divider",reflects:!0},{kind:"field",name:"dividerVariant",description:`The variant of the divider.
Can be set to 'solid' or 'gradient'.

Keep 'solid' if used in MenuPopovers, as it is the default style.`,default:"'solid'",attribute:"divider-variant",reflects:!0},{kind:"method",name:"renderHeader",privacy:"private"}],events:[{description:"(React: onChange) This event is dispatched when a `menuitemcheckbox`, or `menuitemradio` changes.",name:"change",reactName:"onChange"},{description:"(React: onAction) This event is dispatched when a `menuitem` selected.",name:"action",reactName:"onAction"}],attributes:[{name:"aria-label",type:{text:"string | null"},default:"null",description:"The aria-label for the section.\nThis is used for accessibility purposes to describe the section.\nIf not provided, it defaults to the `headerText`.",fieldName:"ariaLabel"},{name:"header-text",type:{text:"string | null"},default:"null",description:`The primary headerText of the list item.
This appears on the leading side of the list item.`,fieldName:"headerText"},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:`Name of the icon rendered before the text

If not provided, no icon will be rendered and text will be aligned to the start.`,fieldName:"prefixIcon"},{name:"show-divider",type:{text:"boolean"},default:"false",description:`Whether to show a divider below the section header.
This is useful for visually separating sections in the menu.`,fieldName:"showDivider"},{name:"divider-variant",description:`The variant of the divider.
Can be set to 'solid' or 'gradient'.

Keep 'solid' if used in MenuPopovers, as it is the default style.`,default:"'solid'",fieldName:"dividerVariant"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-menusection",jsDoc:"/**\n * `mdc-menusection` is a container element used to group a set of menu items.\n *\n * This component supports a mix of `menuitem`, `menuitemcheckbox`, and `menuitemradio` components.\n *\n * - If multiple `menuitemradio` components are slotted into the section, the group enforces a single-selection rule:\n *   only one radio item can be selected at a time.\n * - If `menuitemcheckbox` components are included, their checked state can be toggled independently.\n *\n * @tagname mdc-menusection\n *\n * @slot - Default slot for inserting `menuitem`, `menuitemcheckbox`, or `menuitemradio`\n *\n * @event change - (React: onChange) This event is dispatched when a `menuitemcheckbox`, or `menuitemradio` changes.\n * @event action - (React: onAction) This event is dispatched when a `menuitem` selected.\n */",customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"MenuSection",module:"components/menusection/menusection.component.js"}}]},{kind:"javascript-module",path:"components/navmenuitem/navmenuitem.component.js",declarations:[{kind:"class",description:`\`mdc-navmenuitem\` is a menuitem styled to work as a navigation tab.
It supports a leading icon, optional badge and dynamic text rendering.

Note: \`mdc-navmenuitem\` is intended to be used inside \`mdc-menubar\` as part of the sideNavigation
component. Its structure, spacing, and interactions are designed to align with
the visual and functional requirements of side navigation layouts.

By providing the tooltip-text attribute, a tooltip will be displayed on hover of the navmenuitem. This tooltip is useful when an active navmenuitem is present within a submenu of the sidenavigation component.`,name:"NavMenuItem",cssProperties:[{description:"Text color of the navmenuitem in its normal state.",name:"--mdc-navmenuitem-color"},{description:"Border color of the navmenuitem in its normal state.",name:"--mdc-navmenuitem-border-color"},{description:"Text color of the navmenuitem when disabled.",name:"--mdc-navmenuitem-disabled-color"},{description:"Width of the navmenuitem when expanded.",name:"--mdc-navmenuitem-expanded-width"},{description:"Background color of the navmenuitem when hovered.",name:"--mdc-navmenuitem-hover-background-color"},{description:"Background color of the active navmenuitem when hovered.",name:"--mdc-navmenuitem-hover-active-background-color"},{description:"Background color of the navmenuitem when pressed.",name:"--mdc-navmenuitem-pressed-background-color"},{description:"Background color of the active navmenuitem when pressed.",name:"--mdc-navmenuitem-pressed-active-background-color"},{description:"Background color of the navmenuitem when disabled.",name:"--mdc-navmenuitem-disabled-background-color"},{description:"Background color of the active navmenuitem when disabled.",name:"--mdc-navmenuitem-disabled-active-background-color"},{description:"Background color of the active nav item in its rest state.",name:"--mdc-navmenuitem-rest-active-background-color"},{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],members:[{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The navmenuitem's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the navmenuitem is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the navmenuitem is in an inactive state, indicating it is toggled off.`,default:"undefined",attribute:"active",reflects:!0},{kind:"field",name:"badgeType",type:{text:"BadgeType | undefined"},description:"Type of the badge\nCan be `dot` (notification) or `counter`.",attribute:"badge-type",reflects:!0},{kind:"field",name:"counter",type:{text:"number | undefined"},description:"Counter is the number which can be provided in the badge.",attribute:"counter",reflects:!0},{kind:"field",name:"maxCounter",type:{text:"number"},description:"The maximum number can be set up to 999, anything above that will be rendered as _999+_.\nThe max counter can be `9`, `99` or `999`.",default:"99",attribute:"max-counter",reflects:!0},{kind:"field",name:"navId",type:{text:"string | undefined"},description:`Id of the navMenuItem (used as a identificator when used in the menubar)
Note: It has to be unique.`,default:"undefined",attribute:"nav-id",reflects:!0},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"field",name:"disableAriaCurrent",type:{text:"boolean | undefined"},description:`When set to true, prevents the automatic setting of the \`aria-current\` attribute on the navmenuitem
when it becomes active. This is useful for cases where you want to maintain the visual active styling
but need to handle aria-current attribute differently or not at all.
The active button styling will still be applied regardless of this setting.`,attribute:"disable-aria-current",reflects:!0},{kind:"field",name:"tooltipText",type:{text:"string | undefined"},description:"The tooltip text is displayed on hover of the list item.",attribute:"tooltip-text",reflects:!0},{kind:"method",name:"removeTooltip",privacy:"private"},{kind:"method",name:"renderDynamicTooltip",privacy:"private",return:{type:{text:"void"}}},{kind:"method",name:"isNested",privacy:"private",return:{type:{text:"boolean"}},description:"Check whether the navmenuitem is inside a nested nav structure.\nReturns `true` if there is a parent `mdc-menupopover`\nThis method assumes nesting implies deeper levels of nav hierarchy."},{kind:"method",name:"handleClickEvent",privacy:"private",return:{type:{text:"void"}}},{kind:"method",name:"renderTextLabel",privacy:"private",parameters:[{name:"label",type:{text:"string | undefined"}}]},{kind:"method",name:"renderArrowIcon",privacy:"private",parameters:[{name:"showLabel",type:{text:"boolean | undefined"}}]},{kind:"method",name:"renderBadge",privacy:"private",parameters:[{name:"showLabel",type:{text:"boolean | undefined"}}]},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"arrowPosition",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",attribute:"arrow-position",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"arrowDirection",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",attribute:"arrow-direction",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",attribute:"name",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,attribute:"value",reflects:!0,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keydown event for the menu item.
If the Enter key is pressed, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Enter key.

This follows the native behaviour, actionable element can be triggered by Enter
key on the keydown event.

Note: Action triggered by Space on the keyup event.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event that triggered the action."}],description:`Handles the keyup event for the menu item.
If the Space key is released, it triggers a click event on the menu item.
This allows keyboard users to activate the menu item using the Space key.
It also prevents the default action of the Space key to avoid scrolling the page.

This follows the native behaviour, actionable element can be triggered by Space
key on the keyup event.

Note: Action triggered by Enter on the keydown event.`,inheritedFrom:{name:"MenuItem",module:"components/menuitem/menuitem.component.js"}},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot and optionally the trailing arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot and optionally the leading arrow icon,\nbased on `arrowPosition` and `arrowDirection`.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the navmenuitem is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the navmenuitem.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the navmenuitem.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onFocus) This event is dispatched when the navmenuitem receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onActiveChange) Dispatched when the active state of the navmenuitem changes.",name:"activechange",reactName:"onActiveChange"},{description:"(React: onEnabled) This event is dispatched after the menuitem is enabled",name:"enabled",reactName:"onEnabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDisabled) This event is dispatched after the menuitem is disabled",name:"disabled",reactName:"onDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onCreated) This event is dispatched after the menuitem is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDestroyed) This event is dispatched after the menuitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],attributes:[{name:"active",type:{text:"boolean | undefined"},description:`The navmenuitem's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the navmenuitem is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the navmenuitem is in an inactive state, indicating it is toggled off.`,default:"undefined",fieldName:"active"},{name:"badge-type",type:{text:"BadgeType | undefined"},description:"Type of the badge\nCan be `dot` (notification) or `counter`.",fieldName:"badgeType"},{name:"counter",type:{text:"number | undefined"},description:"Counter is the number which can be provided in the badge.",fieldName:"counter"},{name:"max-counter",type:{text:"number"},description:"The maximum number can be set up to 999, anything above that will be rendered as _999+_.\nThe max counter can be `9`, `99` or `999`.",default:"99",fieldName:"maxCounter"},{name:"nav-id",type:{text:"string | undefined"},description:`Id of the navMenuItem (used as a identificator when used in the menubar)
Note: It has to be unique.`,default:"undefined",fieldName:"navId"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"disable-aria-current",type:{text:"boolean | undefined"},description:`When set to true, prevents the automatic setting of the \`aria-current\` attribute on the navmenuitem
when it becomes active. This is useful for cases where you want to maintain the visual active styling
but need to handle aria-current attribute differently or not at all.
The active button styling will still be applied regardless of this setting.`,fieldName:"disableAriaCurrent"},{name:"tooltip-text",type:{text:"string | undefined"},description:"The tooltip text is displayed on hover of the list item.",fieldName:"tooltipText"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"arrow-position",type:{text:"ArrowPositions | undefined"},description:"Defines where the arrow icon will appear.\n- `'leading'`: Icon appears on the leading edge (start).\n- `'trailing'`: Icon appears on the trailing edge (end).\n\nIf not set, no arrow is displayed.",fieldName:"arrowPosition",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"arrow-direction",type:{text:"ArrowDirections | undefined"},description:"Defines the direction the arrow icon points.\n- `'positive'`: Arrow points toward the trailing side.\n- `'negative'`: Arrow points toward the leading side.",fieldName:"arrowDirection",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"name",type:{text:"string | undefined"},description:"The name attribute is used to identify the menu item when it is selected.",fieldName:"name",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`The value attribute is used to represent a value when the menu item is selected.
It is typically used with checkbox and radio menu items, but can be handy for any menu item.`,fieldName:"value",inheritedFrom:{name:"MenuItem",module:"src/components/menuitem/menuitem.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"MenuItem",module:"/src/components/menuitem/menuitem.component"},tagName:"mdc-navmenuitem",jsDoc:`/**
 * \`mdc-navmenuitem\` is a menuitem styled to work as a navigation tab.
 * It supports a leading icon, optional badge and dynamic text rendering.
 *
 * Note: \`mdc-navmenuitem\` is intended to be used inside \`mdc-menubar\` as part of the sideNavigation
 * component. Its structure, spacing, and interactions are designed to align with
 * the visual and functional requirements of side navigation layouts.
 *
 * By providing the tooltip-text attribute, a tooltip will be displayed on hover of the navmenuitem. This tooltip is useful when an active navmenuitem is present within a submenu of the sidenavigation component.
 *
 * @tagname mdc-navmenuitem
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-badge
 * @dependency mdc-tooltip
 *
 * @event click - (React: onClick) This event is dispatched when the navmenuitem is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the navmenuitem.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the navmenuitem.
 * @event focus - (React: onFocus) This event is dispatched when the navmenuitem receives focus.
 * @event activechange - (React: onActiveChange) Dispatched when the active state of the navmenuitem changes.
 *
 * @cssproperty --mdc-navmenuitem-color - Text color of the navmenuitem in its normal state.
 * @cssproperty --mdc-navmenuitem-border-color - Border color of the navmenuitem in its normal state.
 * @cssproperty --mdc-navmenuitem-disabled-color - Text color of the navmenuitem when disabled.
 * @cssproperty --mdc-navmenuitem-expanded-width - Width of the navmenuitem when expanded.
 * @cssproperty --mdc-navmenuitem-hover-background-color - Background color of the navmenuitem when hovered.
 * @cssproperty --mdc-navmenuitem-hover-active-background-color - Background color of the active navmenuitem when hovered.
 * @cssproperty --mdc-navmenuitem-pressed-background-color - Background color of the navmenuitem when pressed.
 * @cssproperty --mdc-navmenuitem-pressed-active-background-color - Background color of the active navmenuitem when pressed.
 * @cssproperty --mdc-navmenuitem-disabled-background-color - Background color of the navmenuitem when disabled.
 * @cssproperty --mdc-navmenuitem-disabled-active-background-color - Background color of the active navmenuitem when disabled.
 * @cssproperty --mdc-navmenuitem-rest-active-background-color - Background color of the active nav item in its rest state.
 */`,customElement:!0,slots:[{description:"slot for menu item controls to appear of leading end.",name:"leading-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item primary label.",name:"leading-text-primary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item secondary label.",name:"leading-text-secondary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item tertiary label.",name:"leading-text-tertiary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item side header text.",name:"trailing-text-side-header",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item subline text.",name:"trailing-text-subline",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for menu item controls to appear of trailing end.",name:"trailing-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"NavMenuItem",module:"components/navmenuitem/navmenuitem.component.js"}}]},{kind:"javascript-module",path:"components/optgroup/optgroup.component.js",declarations:[{kind:"class",description:"optgroup component, which creates a grouping of mdc-option within a listbox element.",name:"OptGroup",cssProperties:[{description:"Allows customization of the disabled option color.",name:"--mdc-optgroup-disabled-color"}],slots:[{description:"This is a default slot for mdc-option elements.",name:"default"}],members:[{kind:"field",name:"label",type:{text:"string | undefined"},description:"The header text to be displayed on the top of the options list.",attribute:"label",reflects:!0},{kind:"method",name:"setDisabledForAllOptions",privacy:"private",return:{type:{text:"void"}}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],attributes:[{name:"label",type:{text:"string | undefined"},description:"The header text to be displayed on the top of the options list.",fieldName:"label"},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"},{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-optgroup",jsDoc:`/**
 * optgroup component, which creates a grouping of mdc-option within a listbox element.
 *
 * @dependency mdc-text
 *
 * @tagname mdc-optgroup
 *
 * @slot default - This is a default slot for mdc-option elements.
 *
 * @cssproperty --mdc-optgroup-disabled-color - Allows customization of the disabled option color.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"OptGroup",module:"components/optgroup/optgroup.component.js"}}]},{kind:"javascript-module",path:"components/option/option.component.js",declarations:[{kind:"class",description:"Option component, which is used within Selectlistbox within Select component.\n\nThe label and secondary label of the option can be set using the `label` and `secondaryLabel` properties respectively.\nThe `label` is the primary text displayed in the option, while the `secondaryLabel` is the secondary text displayed below the primary label.\n\nThe `selected` property is used to indicate whether the option is selected or not.\nWhen the `selected` property is set to true, a checkmark icon will be displayed\non the right side of the option to indicate that it is selected.\n\nThe `prefixIcon` property can be used to display an icon on the left side of the option label.\n\n**Note**: If an option contains a long text, it is recommended to create a tooltip for the option that displays the full text on hover.\nConsumers need to add a unique ID to this option and use that ID in the tooltip's `triggerID` attribute. We are not creating the tooltip automatically, consumers need to add `<mdc-tooltip>` element manually and associate it with the option using the `triggerID` attribute.",name:"Option",members:[{kind:"field",name:"selected",type:{text:"boolean"},default:"false",description:"The selected attribute is used to indicate that the option is selected.",attribute:"selected",reflects:!0},{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:"The prefix icon attribute is used to display the icon name on the left of the option label.",attribute:"prefix-icon",reflects:!0},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Any additional description can be provided here for screen readers.",attribute:"aria-label",reflects:!0},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",attribute:"variant",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,attribute:"label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"secondaryLabel",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,attribute:"secondary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"tertiaryLabel",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,attribute:"tertiary-label",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sideHeaderText",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,attribute:"side-header-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"sublineText",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,attribute:"subline-text",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event triggered when the list item is clicked."}],description:`Handles the click event on the list item.
Prevents click when listitem is disabled`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event triggered when a key is pressed down."}],description:`Fires the click event when the enter or space key is pressed down.
This behavior is similar to a button click and key interaction.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"protected",description:"Triggers a click event on the list item.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"getText",privacy:"protected",return:{type:{text:""}},parameters:[{name:"slotName",type:{text:"string"},description:"The name of the slot to be used."},{name:"type",type:{text:"TextType"},description:"The type of the text element."},{name:"content",optional:!0,type:{text:"string"},description:"The text content to be displayed within the slot."}],description:"Generates a template for a text slot with the specified content.",inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"disableSlottedChildren",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"disabled",default:"false",type:{text:"boolean"},description:"Whether to disable or enable the controls."}],description:`Disable or enable all slotted elements in the leading and trailing slots.
This is useful when the list item is disabled, to prevent the user from interacting with the controls.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderTrailingControls",privacy:"protected",description:"Renders the trailing controls slot.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"renderLeadingControls",privacy:"protected",description:"Renders the leading controls slot.",return:{type:{text:""}},inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}},{kind:"method",name:"stopEventPropagation",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"},description:"The mouse event triggered when a click occurs."}],description:`Stops the click event from propagating to parent elements. In case of keyboard events,
it stops the propagation for Enter and Space keys.
This is useful when the list item contains controls that
should not trigger the click event on the list item itself.`,inheritedFrom:{name:"ListItem",module:"components/listitem/listitem.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the option is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the option.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the option.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onFocus) This event is dispatched when the option receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onEnabled) This event is dispatched after the listitem is enabled",name:"enabled",reactName:"onEnabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDisabled) This event is dispatched after the listitem is disabled",name:"disabled",reactName:"onDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onCreated) This event is dispatched after the listitem is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"(React: onDestroyed) This event is dispatched after the listitem is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],attributes:[{name:"selected",type:{text:"boolean"},default:"false",description:"The selected attribute is used to indicate that the option is selected.",fieldName:"selected"},{name:"prefix-icon",type:{text:"IconNames | undefined"},description:"The prefix icon attribute is used to display the icon name on the left of the option label.",fieldName:"prefixIcon"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Any additional description can be provided here for screen readers.",fieldName:"ariaLabel"},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"variant",type:{text:"ListItemVariants"},description:"The variant of the list item. It can be a pill, rectangle or a full-width.",default:"'full-width'",fieldName:"variant",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"label",type:{text:"string | undefined"},description:`The primary label of the list item.
This appears on the leading side of the list item.`,fieldName:"label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"secondary-label",type:{text:"string | undefined"},description:`The secondary label of the list item.
This appears on the leading side of the list item.`,fieldName:"secondaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"tertiary-label",type:{text:"string | undefined"},description:`The tertiary label of the list item.
This appears on the leading side of the list item.`,fieldName:"tertiaryLabel",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"side-header-text",type:{text:"string | undefined"},description:`The header text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sideHeaderText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"subline-text",type:{text:"string | undefined"},description:`The subline text of the list item.
This appears on the trailing side of the list item.`,fieldName:"sublineText",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the element is soft disabled.
When set to \`true\`, the element appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the element behaves like a disabled element, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],mixins:[{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"}],superclass:{name:"ListItem",module:"/src/components/listitem/listitem.component"},tagName:"mdc-option",jsDoc:`/**
 * Option component, which is used within Selectlistbox within Select component.
 *
 * The label and secondary label of the option can be set using the \`label\` and \`secondaryLabel\` properties respectively.
 * The \`label\` is the primary text displayed in the option, while the \`secondaryLabel\` is the secondary text displayed below the primary label.
 *
 * The \`selected\` property is used to indicate whether the option is selected or not.
 * When the \`selected\` property is set to true, a checkmark icon will be displayed
 * on the right side of the option to indicate that it is selected.
 *
 * The \`prefixIcon\` property can be used to display an icon on the left side of the option label.
 *
 * **Note**: If an option contains a long text, it is recommended to create a tooltip for the option that displays the full text on hover.
 * Consumers need to add a unique ID to this option and use that ID in the tooltip's \`triggerID\` attribute. We are not creating the tooltip automatically, consumers need to add \`<mdc-tooltip>\` element manually and associate it with the option using the \`triggerID\` attribute.
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @tagname mdc-option
 *
 * @event click - (React: onClick) This event is dispatched when the option is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the option.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the option.
 * @event focus - (React: onFocus) This event is dispatched when the option receives focus.
 */`,customElement:!0,slots:[{description:"slot for list item controls to appear of leading end.",name:"leading-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item primary label.",name:"leading-text-primary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item secondary label.",name:"leading-text-secondary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item tertiary label.",name:"leading-text-tertiary-label",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item side header text.",name:"trailing-text-side-header",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item subline text.",name:"trailing-text-subline",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"slot for list item controls to appear of trailing end.",name:"trailing-controls",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"content slot can be used to override the content completely. Be aware that this will override the default content of the list item.",name:"content",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}],cssProperties:[{description:"Allows customization of the default background color.",name:"--mdc-listitem-default-background-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color on hover.",name:"--mdc-listitem-background-color-hover",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the background color when pressed.",name:"--mdc-listitem-background-color-active",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the primary label, side header and subline text slot color.",name:"--mdc-listitem-primary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the secondary and tertiary label text slot color.",name:"--mdc-listitem-secondary-label-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the disabled color.",name:"--mdc-listitem-disabled-color",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of column gap.",name:"--mdc-listitem-column-gap",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding left and right.",name:"--mdc-listitem-padding-left-right",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of padding top and bottom.",name:"--mdc-listitem-padding-top-bottom",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the cursor.",name:"--mdc-listitem-cursor",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the width of the list item.",name:"--mdc-listitem-width",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}},{description:"Allows customization of the height of the list item.",name:"--mdc-listitem-height",inheritedFrom:{name:"ListItem",module:"src/components/listitem/listitem.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Option",module:"components/option/option.component.js"}}]},{kind:"javascript-module",path:"components/password/password.component.js",declarations:[{kind:"class",description:"`mdc-password` is a component that allows users to input their password.\n It extends the `mdc-input` component and provides additional features specific to password fields.\n It contains:\n- `label` field - describe the password field.\n- `password` field - contains the value\n- `help-text` or `validation-message` - displayed below the password field.\n- `help-text-type` - type of the help text, can be 'default', 'error', 'warning', 'success', 'priority'.\n- `show-hide-button-aria-label` - aria label for the trailing show/hide button.\n- all the attributes of the native password field.",name:"Password",cssProperties:[{description:"Border color for the password container when disabled",name:"--mdc-input-disabled-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the password field when disabled",name:"--mdc-input-disabled-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the password field when disabled",name:"--mdc-input-disabled-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container",name:"--mdc-input-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the password field",name:"--mdc-input-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the password field",name:"--mdc-input-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the selected text",name:"--mdc-input-selection-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the selected text",name:"--mdc-input-selection-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the help text",name:"--mdc-input-support-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the password field when hovered",name:"--mdc-input-hover-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the password field when focused",name:"--mdc-input-focused-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container when focused",name:"--mdc-input-focused-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container when error",name:"--mdc-input-error-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container when warning",name:"--mdc-input-warning-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container when success",name:"--mdc-input-success-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the password container when primary",name:"--mdc-input-primary-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}}],members:[{kind:"field",name:"showHideButtonAriaLabel",type:{text:"string"},default:"''",description:"Aria label for the show or hide password icon button.",attribute:"show-hide-button-aria-label"},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"showPassword",type:{text:"boolean"},privacy:"private",default:"false",description:"Internal state to track whether the password is visible (shown as text) or hidden (shown as password)."},{kind:"method",name:"toggleShowPassword",privacy:"private",description:"Toggles the visibility of the password."},{kind:"method",name:"renderTrailingButton",privacy:"protected",parameters:[{name:"show",default:"false"}],description:"Renders the trailing button for showing or hiding the password.",return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderInputElement",privacy:"protected",parameters:[{name:"_",type:{text:"InputType"}},{name:"hidePlaceholder",optional:!0,type:{text:"boolean"}}],description:"Renders the input element for the password field.",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",attribute:"placeholder",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",attribute:"readonly",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"prefixText",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,attribute:"prefix-text",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"leadingIcon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",attribute:"leading-icon",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"trailingButton",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",attribute:"trailing-button",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",attribute:"maxlength",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",attribute:"minlength",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",attribute:"autocapitalize",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",attribute:"autocomplete",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',attribute:"dirname",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,attribute:"pattern",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,attribute:"list",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",attribute:"size",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"clearAriaLabel",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",attribute:"clear-aria-label",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"setInputValidity",privacy:"private",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"updateValue",privacy:"private",description:`Updates the value of the input field.
Sets the form value.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"onInput",privacy:"private",description:`Handles the input event of the input field.
Updates the value and sets the validity of the input field.`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"onChange",privacy:"private",parameters:[{name:"event",type:{text:"Event"},description:"Event which contains information about the value change."}],description:`Handles the change event of the input field.
Updates the value and sets the validity of the input field.

The 'change' event does not bubble up through the shadow DOM as it was not composed.
Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"protected",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"Keyboard event"}],description:`Handles the keydown event of the input field.
If the key pressed is 'Enter', it submits the form.`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderLeadingIcon",privacy:"protected",description:`Renders the leading icon before the input field.
If the leading icon is not set, it will not be displayed.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderPrefixText",privacy:"protected",description:`Renders the prefix text before the input field.
If the prefix text is more than 10 characters,
- it will not be displayed.
- the validation messsage will be displayed.

 Note: We are setting aria-hidden so that the screen reader does not read the prefix text.
 The consumers should set the appropriate aria-label for the input field using 'data-aria-label' attribute.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"clearInputText",privacy:"protected",description:"Clears the input field.",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{description:"(React: onInput) This event is dispatched when the value of the password field changes (every press).",name:"input",reactName:"onInput",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onChange) This event is dispatched when the value of the password field changes (on blur).",name:"change",reactName:"onChange",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onFocus) This event is dispatched when the password receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onBlur) This event is dispatched when the password loses focus.",name:"blur",reactName:"onBlur",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{type:{text:"EventConstructor"},inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"clear",type:{text:"CustomEvent"},description:"(React: onClear) This event is dispatched when the input text is cleared.",reactName:"onClear",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}}],attributes:[{name:"show-hide-button-aria-label",type:{text:"string"},default:"''",description:"Aria label for the show or hide password icon button.",fieldName:"showHideButtonAriaLabel"},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",fieldName:"placeholder",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",fieldName:"readonly",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"prefix-text",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,fieldName:"prefixText",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"leading-icon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",fieldName:"leadingIcon",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"trailing-button",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",fieldName:"trailingButton",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",fieldName:"maxlength",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",fieldName:"minlength",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",fieldName:"autocapitalize",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",fieldName:"autocomplete",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',fieldName:"dirname",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,fieldName:"pattern",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,fieldName:"list",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",fieldName:"size",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"clear-aria-label",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",fieldName:"clearAriaLabel",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],superclass:{name:"Input",module:"/src/components/input/input.component"},tagName:"mdc-password",jsDoc:`/**
 * \`mdc-password\` is a component that allows users to input their password.
 *  It extends the \`mdc-input\` component and provides additional features specific to password fields.
 *  It contains:
 * - \`label\` field - describe the password field.
 * - \`password\` field - contains the value
 * - \`help-text\` or \`validation-message\` - displayed below the password field.
 * - \`help-text-type\` - type of the help text, can be 'default', 'error', 'warning', 'success', 'priority'.
 * - \`show-hide-button-aria-label\` - aria label for the trailing show/hide button.
 * - all the attributes of the native password field.
 *
 * @tagname mdc-password
 *
 * @event input - (React: onInput) This event is dispatched when the value of the password field changes (every press).
 * @event change - (React: onChange) This event is dispatched when the value of the password field changes (on blur).
 * @event focus - (React: onFocus) This event is dispatched when the password receives focus.
 * @event blur - (React: onBlur) This event is dispatched when the password loses focus.
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-button
 * @dependency mdc-toggletip
 *
 * @cssproperty --mdc-input-disabled-border-color - Border color for the password container when disabled
 * @cssproperty --mdc-input-disabled-text-color - Text color for the password field when disabled
 * @cssproperty --mdc-input-disabled-background-color - Background color for the password field when disabled
 * @cssproperty --mdc-input-border-color - Border color for the password container
 * @cssproperty --mdc-input-text-color - Text color for the password field
 * @cssproperty --mdc-input-background-color - Background color for the password field
 * @cssproperty --mdc-input-selection-background-color - Background color for the selected text
 * @cssproperty --mdc-input-selection-text-color - Text color for the selected text
 * @cssproperty --mdc-input-support-text-color - Text color for the help text
 * @cssproperty --mdc-input-hover-background-color - Background color for the password field when hovered
 * @cssproperty --mdc-input-focused-background-color - Background color for the password field when focused
 * @cssproperty --mdc-input-focused-border-color - Border color for the password container when focused
 * @cssproperty --mdc-input-error-border-color - Border color for the password container when error
 * @cssproperty --mdc-input-warning-border-color - Border color for the password container when warning
 * @cssproperty --mdc-input-success-border-color - Border color for the password container when success
 * @cssproperty --mdc-input-primary-border-color - Border color for the password container when primary
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Password",module:"components/password/password.component.js"}}]},{kind:"javascript-module",path:"components/popover/popover.component.js",declarations:[{kind:"class",description:`Popover component is a lightweight floating UI element that displays additional content when triggered.
It can be used for tooltips, dropdowns, or contextual menus.
The popover automatically positions itself based on available space and
supports dynamic height adjustments with scrollable content when needed。

Note:
 - A component (button) can trigger more than one popover, but only one of them should change the
   aria-expanded and aria-haspopup, the rest of the popovers must have \`disable-aria-expanded\` attribute.`,name:"Popover",cssProperties:[{description:"radius of the arrow border",name:"--mdc-popover-arrow-border-radius"},{description:"border of the arrow",name:"--mdc-popover-arrow-border"},{description:"primary background color of the popover",name:"--mdc-popover-primary-background-color"},{description:"border color of the popover",name:"--mdc-popover-border-color"},{description:"inverted background color of the popover",name:"--mdc-popover-inverted-background-color"},{description:"inverted border color of the popover",name:"--mdc-popover-inverted-border-color"},{description:"inverted text color of the popover",name:"--mdc-popover-inverted-text-color"},{description:"elevation of the popover",name:"--mdc-popover-elevation-3"},{description:"max width of the popover",name:"--mdc-popover-max-width"},{description:"max height of the popover",name:"--mdc-popover-max-height"}],slots:[{description:"Default slot for the popover content",name:""}],members:[{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",attribute:"id",reflects:!0},{kind:"field",name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,attribute:"triggerID",reflects:!0},{kind:"field",name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",attribute:"trigger",reflects:!0},{kind:"field",name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",attribute:"placement",reflects:!0},{kind:"field",name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",attribute:"color",reflects:!0},{kind:"field",name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",attribute:"visible",reflects:!0},{kind:"field",name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",attribute:"offset",reflects:!0},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0},{kind:"field",name:"boundaryRoot",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",attribute:"boundary-root",reflects:!0},{kind:"field",name:"boundaryPadding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",attribute:"boundary-padding",reflects:!0},{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected",description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",attribute:"focus-trap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"field",name:"preventScroll",type:{text:"boolean"},privacy:"protected",description:"Prevent outside scrolling when popover is shown.",default:"false",attribute:"prevent-scroll",reflects:!0,inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"field",name:"showArrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",attribute:"show-arrow",reflects:!0},{kind:"field",name:"closeButton",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",attribute:"close-button",reflects:!0},{kind:"field",name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",attribute:"interactive",reflects:!0},{kind:"field",name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",attribute:"delay",reflects:!0},{kind:"field",name:"hideOnEscape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",attribute:"hide-on-escape",reflects:!0},{kind:"field",name:"propagateEventOnEscape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",attribute:"propagate-event-on-escape",reflects:!0},{kind:"field",name:"hideOnBlur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",attribute:"hide-on-blur",reflects:!0},{kind:"field",name:"hideOnOutsideClick",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",attribute:"hide-on-outside-click",reflects:!0},{kind:"field",name:"focusBackToTrigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",attribute:"focus-back-to-trigger",reflects:!0},{kind:"field",name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",attribute:"backdrop",reflects:!0},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",attribute:"backdrop-append-to",reflects:!0},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",attribute:"is-backdrop-invisible",reflects:!0},{kind:"field",name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",attribute:"flip",reflects:!0},{kind:"field",name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",attribute:"size",reflects:!0},{kind:"field",name:"zIndex",type:{text:"number"},description:"The z-index of the popover.",default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"BackdropMixin",module:"utils/mixins/BackdropMixin.js"}},{kind:"field",name:"appendTo",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",attribute:"append-to",reflects:!0},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",attribute:"close-button-aria-label",reflects:!0},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",attribute:"strategy",reflects:!0},{kind:"field",name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",attribute:"role",reflects:!0},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,attribute:"aria-labelledby",reflects:!0},{kind:"field",name:"ariaDescribedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",attribute:"aria-describedby",reflects:!0},{kind:"field",name:"disableAriaExpanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",attribute:"disable-aria-expanded",reflects:!0},{kind:"field",name:"keepConnectedTooltipClosed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,attribute:"keep-connected-tooltip-closed",reflects:!0},{kind:"field",name:"arrowElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null"},{kind:"field",name:"triggerElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null"},{kind:"field",name:"storeConnectedTooltip",privacy:"private"},{kind:"method",name:"setupTriggerRelatedElement",privacy:"private"},{kind:"field",name:"cleanupTrigger",privacy:"private"},{kind:"field",name:"setupTriggerListeners",privacy:"private",description:`Sets up the trigger related event listeners, based on the trigger type.
Includes fallback for mouseenter trigger to also handle focusin for non-interactive popovers.`},{kind:"field",name:"removeTriggerListeners",privacy:"private",description:"Removes the trigger related event listeners."},{kind:"field",name:"removeAllListeners",privacy:"private",description:"Removes all event listeners related to the popover."},{kind:"field",name:"onOutsidePopoverClick",privacy:"protected",description:"Handles the outside click event to close the popover.",parameters:[{description:"The mouse event.",name:"event"}]},{kind:"field",name:"onEscapeKeydown",privacy:"private",description:`Handles the escape keydown event to close the popover.

This method is attached to the document.`,parameters:[{description:"The keyboard event.",name:"event"}]},{kind:"field",name:"onPopoverFocusOut",privacy:"private",description:"Handles the popover focus out event.",parameters:[{description:"The focus event.",name:"event"}]},{kind:"method",name:"isOpenUpdated",privacy:"protected",parameters:[{name:"oldValue",type:{text:"boolean"},description:"The old value of the visible property."},{name:"newValue",type:{text:"boolean"},description:"The new value of the visible property."}],description:`Handles the popover visibility change and position the popover.
Handles the exit event to close the popover.`},{kind:"field",name:"handleMouseEnter",privacy:"private",description:"Handles mouse enter event on the trigger element.\nThis method sets the `isHovered` flag to true and shows the popover"},{kind:"field",name:"handleMouseLeave",privacy:"private",description:"Handles mouse leave event on the trigger element.\nThis method sets the `isHovered` flag to false and starts the close delay\ntimer to hide the popover."},{kind:"field",name:"handleFocusOut",privacy:"private",description:`Handles focus out event on the trigger element.
This method checks if the popover is not hovered and hides the popover.
If the popover is hovered, it will not hide the popover.`},{kind:"field",name:"handleFocusIn",privacy:"private",description:`Handles focus in event on the trigger element.
This method checks if the trigger element has visible focus or is being hovered.`},{kind:"field",name:"startCloseDelay",privacy:"private",description:`Starts the close delay timer.
If the popover is not interactive, it will close the popover after the delay.`},{kind:"field",name:"cancelCloseDelay",privacy:"private",description:"Cancels the close delay timer."},{kind:"field",name:"show",privacy:"public",description:"Shows the popover."},{kind:"field",name:"hide",privacy:"public",description:"Hides the popover."},{kind:"field",name:"togglePopoverVisible",privacy:"public",description:"Toggles the popover visibility."},{kind:"field",name:"positionPopover",privacy:"private",description:`Positions the popover based on the trigger element.
It also handles the flip, size and arrow placement.
It uses the floating-ui/dom library to calculate the position.`},{kind:"field",name:"findClosestPopover",privacy:"protected",description:`Finds the closest popover to the passed element in the DOM tree.

Useful when need to find the parent popover in a nested popover scenario.`,parameters:[{description:"The element to start searching from.",name:"element"}]},{kind:"field",name:"utils",default:"new PopoverUtils(this)"},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}}],events:[{description:"(React: onShown) This event is dispatched when the popover is shown",name:"shown",reactName:"onShown"},{description:"(React: onHidden) This event is dispatched when the popover is hidden",name:"hidden",reactName:"onHidden"},{description:"(React: onCreated) This event is dispatched when the popover is created (added to the DOM)",name:"created",reactName:"onCreated"},{description:"(React: onDestroyed) This event is dispatched when the popover is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed"}],attributes:[{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",fieldName:"id"},{name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,fieldName:"triggerID"},{name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",fieldName:"trigger"},{name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",fieldName:"placement"},{name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",fieldName:"color"},{name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",fieldName:"visible"},{name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",fieldName:"offset"},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary"},{name:"boundary-root",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",fieldName:"boundaryRoot"},{name:"boundary-padding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",fieldName:"boundaryPadding"},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",fieldName:"focusTrap"},{name:"prevent-scroll",type:{text:"boolean"},description:"Prevent outside scrolling when popover is shown.",default:"false",fieldName:"preventScroll"},{name:"show-arrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",fieldName:"showArrow"},{name:"close-button",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",fieldName:"closeButton"},{name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",fieldName:"interactive"},{name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",fieldName:"delay"},{name:"hide-on-escape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",fieldName:"hideOnEscape"},{name:"propagate-event-on-escape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",fieldName:"propagateEventOnEscape"},{name:"hide-on-blur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",fieldName:"hideOnBlur"},{name:"hide-on-outside-click",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",fieldName:"hideOnOutsideClick"},{name:"focus-back-to-trigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",fieldName:"focusBackToTrigger"},{name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",fieldName:"backdrop"},{name:"backdrop-append-to",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",fieldName:"backdropAppendTo"},{name:"is-backdrop-invisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",fieldName:"isBackdropInvisible"},{name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",fieldName:"flip"},{name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",fieldName:"size"},{name:"z-index",type:{text:"number"},description:"The z-index of the popover.",default:"1000",fieldName:"zIndex"},{name:"append-to",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",fieldName:"appendTo"},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",fieldName:"closeButtonAriaLabel"},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",fieldName:"strategy"},{name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",fieldName:"role"},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,fieldName:"ariaLabelledby"},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",fieldName:"ariaDescribedby"},{name:"disable-aria-expanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",fieldName:"disableAriaExpanded"},{name:"keep-connected-tooltip-closed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,fieldName:"keepConnectedTooltipClosed"},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"FocusTrapMixin",module:"src/utils/mixins/FocusTrapMixin.ts"}}],mixins:[{name:"BackdropMixin",module:"/src/utils/mixins/BackdropMixin"},{name:"PreventScrollMixin",module:"/src/utils/mixins/PreventScrollMixin"},{name:"FocusTrapMixin",module:"/src/utils/mixins/FocusTrapMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-popover",jsDoc:`/**
 * Popover component is a lightweight floating UI element that displays additional content when triggered.
 * It can be used for tooltips, dropdowns, or contextual menus.
 * The popover automatically positions itself based on available space and
 * supports dynamic height adjustments with scrollable content when needed。
 *
 * Note:
 *  - A component (button) can trigger more than one popover, but only one of them should change the
 *    aria-expanded and aria-haspopup, the rest of the popovers must have \`disable-aria-expanded\` attribute.
 *
 * @dependency mdc-button
 *
 * @tagname mdc-popover
 *
 *
 * @event shown - (React: onShown) This event is dispatched when the popover is shown
 * @event hidden - (React: onHidden) This event is dispatched when the popover is hidden
 * @event created - (React: onCreated) This event is dispatched when the popover is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched when the popover is destroyed (removed from the DOM)
 *
 * @cssproperty --mdc-popover-arrow-border-radius - radius of the arrow border
 * @cssproperty --mdc-popover-arrow-border - border of the arrow
 * @cssproperty --mdc-popover-primary-background-color - primary background color of the popover
 * @cssproperty --mdc-popover-border-color - border color of the popover
 * @cssproperty --mdc-popover-inverted-background-color - inverted background color of the popover
 * @cssproperty --mdc-popover-inverted-border-color - inverted border color of the popover
 * @cssproperty --mdc-popover-inverted-text-color - inverted text color of the popover
 * @cssproperty --mdc-popover-elevation-3 - elevation of the popover
 * @cssproperty --mdc-popover-max-width - max width of the popover
 * @cssproperty --mdc-popover-max-height - max height of the popover
 *
 * @slot - Default slot for the popover content
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Popover",module:"components/popover/popover.component.js"}}]},{kind:"javascript-module",path:"components/presence/presence.component.js",declarations:[{kind:"class",description:`The \`mdc-presence\` component is a versatile UI element used to
display the presence status of a user or entity within an avatar component.

This component is ideal for use within avatar UIs where the presence status
needs to be visually represented.`,name:"Presence",cssProperties:[{description:"The background color of the presence type active.",name:"--mdc-presence-active-background-color"},{description:"The background color of the presence type away.",name:"--mdc-presence-away-background-color"},{description:"The background color of the presence type away-calling.",name:"--mdc-presence-away-calling-background-color"},{description:"The background color of the presence type busy.",name:"--mdc-presence-busy-background-color"},{description:"The background color of the presence type dnd.",name:"--mdc-presence-dnd-background-color"},{description:"The background color of the presence type meeting.",name:"--mdc-presence-meeting-background-color"},{description:"The background color of the presence type on-call.",name:"--mdc-presence-on-call-background-color"},{description:"The background color of the presence type on-device.",name:"--mdc-presence-on-device-background-color"},{description:"The background color of the presence type on-mobile.",name:"--mdc-presence-on-mobile-background-color"},{description:"The background color of the presence type pause.",name:"--mdc-presence-pause-background-color"},{description:"The background color of the presence type pto.",name:"--mdc-presence-pto-background-color"},{description:"The background color of the presence type presenting.",name:"--mdc-presence-presenting-background-color"},{description:"The background color of the presence type quiet.",name:"--mdc-presence-quiet-background-color"},{description:"The background color of the presence type scheduled.",name:"--mdc-presence-scheduled-background-color"},{description:"The background color of the presence type overlay.",name:"--mdc-presence-overlay-background-color"}],members:[{kind:"field",name:"type",type:{text:"PresenceType"},description:"Supported presence types:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",default:"active",attribute:"type",reflects:!0},{kind:"field",name:"size",type:{text:"PresenceSize"},description:`Acceptable numeric values include:
- 24
- 32
- 48
- 64
- 72
- 88
- 124

Presence icons are minimum 14px in size, meaning 24, 32, and 48 presence
icons will be no smaller than 14px (for sizes 24, 32, 48).`,default:"32",attribute:"size",reflects:!0},{kind:"method",name:"setSize",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"size",type:{text:"PresenceSize"}}]},{kind:"field",name:"icon",privacy:"private",description:"Get the icon name based on the presence type",readonly:!0},{kind:"method",name:"handleOnLoad",privacy:"private",return:{type:{text:"void"}},description:"Handles the successful load of an icon.\nSets the `currentIconType` property to match the `type` property."},{kind:"method",name:"handleOnError",privacy:"private",return:{type:{text:"void"}},description:"Handles an error that occurs when loading an icon."}],attributes:[{name:"type",type:{text:"PresenceType"},description:"Supported presence types:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",default:"active",fieldName:"type"},{name:"size",type:{text:"PresenceSize"},description:`Acceptable numeric values include:
- 24
- 32
- 48
- 64
- 72
- 88
- 124

Presence icons are minimum 14px in size, meaning 24, 32, and 48 presence
icons will be no smaller than 14px (for sizes 24, 32, 48).`,default:"32",fieldName:"size"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-presence",jsDoc:`/**
 * The \`mdc-presence\` component is a versatile UI element used to
 * display the presence status of a user or entity within an avatar component.
 *
 * This component is ideal for use within avatar UIs where the presence status
 * needs to be visually represented.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-presence
 *
 * @cssproperty --mdc-presence-active-background-color - The background color of the presence type active.
 * @cssproperty --mdc-presence-away-background-color - The background color of the presence type away.
 * @cssproperty --mdc-presence-away-calling-background-color - The background color of the presence type away-calling.
 * @cssproperty --mdc-presence-busy-background-color - The background color of the presence type busy.
 * @cssproperty --mdc-presence-dnd-background-color - The background color of the presence type dnd.
 * @cssproperty --mdc-presence-meeting-background-color - The background color of the presence type meeting.
 * @cssproperty --mdc-presence-on-call-background-color - The background color of the presence type on-call.
 * @cssproperty --mdc-presence-on-device-background-color - The background color of the presence type on-device.
 * @cssproperty --mdc-presence-on-mobile-background-color - The background color of the presence type on-mobile.
 * @cssproperty --mdc-presence-pause-background-color - The background color of the presence type pause.
 * @cssproperty --mdc-presence-pto-background-color - The background color of the presence type pto.
 * @cssproperty --mdc-presence-presenting-background-color - The background color of the presence type presenting.
 * @cssproperty --mdc-presence-quiet-background-color - The background color of the presence type quiet.
 * @cssproperty --mdc-presence-scheduled-background-color - The background color of the presence type scheduled.
 * @cssproperty --mdc-presence-overlay-background-color - The background color of the presence type overlay.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Presence",module:"components/presence/presence.component.js"}}]},{kind:"javascript-module",path:"components/progressbar/progressbar.component.js",declarations:[{kind:"class",description:`mdc-progressbar component visually represents a progress indicator, typically used to show
the completion state of an ongoing process (e.g., loading, file upload, etc.).
It contains an optional label and an optional helper text.

- It supports mainly two types: Default and Inline
- It supports three validation variants: Default, Success and Error.

This component is created by extending FormfieldWrapper.`,name:"Progressbar",cssProperties:[{description:"Background color of the remaining progressbar portion.",name:"--mdc-progressbar-background-color"},{description:"Background color of the elapsed progressbar portion.",name:"--mdc-progressbar-active-background-color"},{description:"Background color of the progressbar when in success state.",name:"--mdc-progressbar-success-color"},{description:"Background color of the progressbar when in error state.",name:"--mdc-progressbar-error-color"},{description:"The height of the progressbar.",name:"--mdc-progressbar-height"},{description:"The border radius of the progressbar.",name:"--mdc-progressbar-border-radius"},{description:"Color of the progressbar label text.",name:"--mdc-progressbar-label-color"},{description:"Line height of the label text.",name:"--mdc-progressbar-label-line-height"},{description:"Font size of the label text.",name:"--mdc-progressbar-label-font-size"},{description:"Font weight of the label text.",name:"--mdc-progressbar-label-font-weight"},{description:"Color of the help text.",name:"--mdc-progressbar-help-text-color"}],members:[{kind:"field",name:"variant",type:{text:"Variant"},description:`Types of the progressbar
- **Default**
- **Inline**`,default:"default",attribute:"variant",reflects:!0},{kind:"field",name:"value",type:{text:"string"},default:"'0'",description:`The current progress as a percentage, 0 to 100.
The value will be clamped between 0 and 100.`,attribute:"value",reflects:!0},{kind:"field",name:"error",type:{text:"boolean"},default:"false",description:`Define error state of the progressbar
- **true**
- **false**`,attribute:"error"},{kind:"method",name:"getValidationVariant",privacy:"private",description:"Determines the validation state (success, error, or default) based on progress value and error state.",return:{type:{text:""}}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],attributes:[{name:"variant",type:{text:"Variant"},description:`Types of the progressbar
- **Default**
- **Inline**`,default:"default",fieldName:"variant"},{name:"value",type:{text:"string"},default:"'0'",description:`The current progress as a percentage, 0 to 100.
The value will be clamped between 0 and 100.`,fieldName:"value"},{name:"error",type:{text:"boolean"},default:"false",description:`Define error state of the progressbar
- **true**
- **false**`,fieldName:"error"},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper"},tagName:"mdc-progressbar",jsDoc:`/**
 * mdc-progressbar component visually represents a progress indicator, typically used to show
 * the completion state of an ongoing process (e.g., loading, file upload, etc.).
 * It contains an optional label and an optional helper text.
 *
 * - It supports mainly two types: Default and Inline
 * - It supports three validation variants: Default, Success and Error.
 *
 * This component is created by extending FormfieldWrapper.
 *
 * @tagname mdc-progressbar
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @cssproperty --mdc-progressbar-background-color - Background color of the remaining progressbar portion.
 * @cssproperty --mdc-progressbar-active-background-color - Background color of the elapsed progressbar portion.
 * @cssproperty --mdc-progressbar-success-color - Background color of the progressbar when in success state.
 * @cssproperty --mdc-progressbar-error-color - Background color of the progressbar when in error state.
 * @cssproperty --mdc-progressbar-height - The height of the progressbar.
 * @cssproperty --mdc-progressbar-border-radius - The border radius of the progressbar.
 * @cssproperty --mdc-progressbar-label-color - Color of the progressbar label text.
 * @cssproperty --mdc-progressbar-label-line-height - Line height of the label text.
 * @cssproperty --mdc-progressbar-label-font-size - Font size of the label text.
 * @cssproperty --mdc-progressbar-label-font-weight - Font weight of the label text.
 * @cssproperty --mdc-progressbar-help-text-color - Color of the help text.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Progressbar",module:"components/progressbar/progressbar.component.js"}}]},{kind:"javascript-module",path:"components/progressspinner/progressspinner.component.js",declarations:[{kind:"class",description:`\`mdc-progressspinner\` is a customizable, circular progress indicator component.
It visually represents the current completion state of a process, such as loading,
syncing, uploading, or any ongoing task that has a measurable percentage.

The spinner is built using SVG with two concentric \`<circle>\` elements:
- The \`progress\` arc represents the portion of work completed.
- The \`track\` arc represents the remaining part.

A visual gap is maintained between the progress and track arcs to clearly
distinguish the two segments. The component smoothly animates arc length
and respects accessibility best practices with ARIA attributes.

The component supports different states:
- **Default**: Circular spinner shows the progress.
- **Success**: Displays a checkmark icon when progress reaches 100%.
- **Error**: Displays an error icon when in an error state.`,name:"Progressspinner",cssProperties:[{description:"The size of the spinner.",name:"--mdc-spinner-size"},{description:"The color of the spinner track.",name:"--mdc-track-color"},{description:"The color of the spinner progress.",name:"--mdc-progress-color"},{description:"The color of the spinner when in success state.",name:"--mdc-progress-success-color"},{description:"The color of the spinner when in error state.",name:"--mdc-progress-error-color"},{description:"Background color of the remaining progressbar portion.",name:"--mdc-progressbar-background-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Background color of the elapsed progressbar portion.",name:"--mdc-progressbar-active-background-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Background color of the progressbar when in success state.",name:"--mdc-progressbar-success-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Background color of the progressbar when in error state.",name:"--mdc-progressbar-error-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"The height of the progressbar.",name:"--mdc-progressbar-height",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"The border radius of the progressbar.",name:"--mdc-progressbar-border-radius",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Color of the progressbar label text.",name:"--mdc-progressbar-label-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Line height of the label text.",name:"--mdc-progressbar-label-line-height",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Font size of the label text.",name:"--mdc-progressbar-label-font-size",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Font weight of the label text.",name:"--mdc-progressbar-label-font-weight",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{description:"Color of the help text.",name:"--mdc-progressbar-help-text-color",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}}],members:[{kind:"method",name:"renderProgressSpinner",privacy:"private"},{kind:"method",name:"renderErrorState",privacy:"private",description:"Renders the error state of the progress spinner.",return:{type:{text:""}}},{kind:"method",name:"renderSuccessState",privacy:"private",description:"Renders the success state of the progress spinner.",return:{type:{text:""}}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"variant",type:{text:"Variant"},description:`Types of the progressbar
- **Default**
- **Inline**`,default:"default",attribute:"variant",reflects:!0,inheritedFrom:{name:"Progressbar",module:"components/progressbar/progressbar.component.js"}},{kind:"field",name:"value",type:{text:"string"},default:"'0'",description:`The current progress as a percentage, 0 to 100.
The value will be clamped between 0 and 100.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Progressbar",module:"components/progressbar/progressbar.component.js"}},{kind:"field",name:"error",type:{text:"boolean"},default:"false",description:`Define error state of the progressbar
- **true**
- **false**`,attribute:"error",inheritedFrom:{name:"Progressbar",module:"components/progressbar/progressbar.component.js"}},{kind:"method",name:"getValidationVariant",privacy:"private",description:"Determines the validation state (success, error, or default) based on progress value and error state.",return:{type:{text:""}},inheritedFrom:{name:"Progressbar",module:"components/progressbar/progressbar.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],superclass:{name:"Progressbar",module:"/src/components/progressbar/progressbar.component"},tagName:"mdc-progressspinner",jsDoc:`/**
 * \`mdc-progressspinner\` is a customizable, circular progress indicator component.
 * It visually represents the current completion state of a process, such as loading,
 * syncing, uploading, or any ongoing task that has a measurable percentage.
 *
 * The spinner is built using SVG with two concentric \`<circle>\` elements:
 * - The \`progress\` arc represents the portion of work completed.
 * - The \`track\` arc represents the remaining part.
 *
 * A visual gap is maintained between the progress and track arcs to clearly
 * distinguish the two segments. The component smoothly animates arc length
 * and respects accessibility best practices with ARIA attributes.
 *
 * The component supports different states:
 * - **Default**: Circular spinner shows the progress.
 * - **Success**: Displays a checkmark icon when progress reaches 100%.
 * - **Error**: Displays an error icon when in an error state.
 *
 * @tagname mdc-progressspinner
 *
 * @cssproperty --mdc-spinner-size - The size of the spinner.
 * @cssproperty --mdc-track-color - The color of the spinner track.
 * @cssproperty --mdc-progress-color - The color of the spinner progress.
 * @cssproperty --mdc-progress-success-color - The color of the spinner when in success state.
 * @cssproperty --mdc-progress-error-color - The color of the spinner when in error state.
 *
 */`,customElement:!0,attributes:[{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"variant",type:{text:"Variant"},description:`Types of the progressbar
- **Default**
- **Inline**`,default:"default",fieldName:"variant",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{name:"value",type:{text:"string"},default:"'0'",description:`The current progress as a percentage, 0 to 100.
The value will be clamped between 0 and 100.`,fieldName:"value",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{name:"error",type:{text:"boolean"},default:"false",description:`Define error state of the progressbar
- **true**
- **false**`,fieldName:"error",inheritedFrom:{name:"Progressbar",module:"src/components/progressbar/progressbar.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Progressspinner",module:"components/progressspinner/progressspinner.component.js"}}]},{kind:"javascript-module",path:"components/radio/radio.component.js",declarations:[{kind:"class",description:`Radio allow users to select single options from a list or turn an item/feature on or off.
These are often used in forms, settings, and selection in lists.

A radio component contains an optional label, optional info icon and an optional helper text.`,name:"Radio",cssProperties:[{description:"color of the label when disabled",name:"--mdc-radio-text-disabled-color"},{description:"color of the radio button when inactive and hovered",name:"--mdc-radio-control-inactive-hover"},{description:"color of the radio button when inactive and pressed",name:"--mdc-radio-control-inactive-pressed-color"},{description:"color of the radio button when active and hovered",name:"--mdc-radio-control-active-hover-color"},{description:"color of the radio button when active and pressed",name:"--mdc-radio-control-active-pressed-color"},{description:"color of the radio button when disabled",name:"--mdc-radio-disabled-border-color"},{description:"color of the radio button when active and disabled",name:"--mdc-radio-control-active-disabled-background"},{description:"color of the radio button when inactive and disabled",name:"--mdc-radio-control-inactive-disabled-background"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the radio is selected or unselected.",attribute:"checked",reflects:!0},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"Determines whether the radio is read-only.",attribute:"readonly",reflects:!0},{kind:"method",name:"getAllRadiosWithinSameGroup",privacy:"private",return:{type:{text:"Radio[]"}},description:"Returns all radios within the same group (name)."},{kind:"method",name:"setGroupValidity",privacy:"private",parameters:[{name:"radios",type:{text:"Radio[]"},description:"Array of radios of the same group"},{name:"isValid",type:{text:"boolean"},description:"Boolean value to set the validity of the group"}],description:"Sets the validity of the group of radios."},{kind:"method",name:"setActualFormValue",privacy:"private",description:`Updates the form value to reflect the current state of the radio.
If checked, the value is set to the user-provided value.
If unchecked, the value is set to null.`},{kind:"method",name:"handleChange",privacy:"private",return:{type:{text:"void"}},description:`Handles the change event on the radio element.
This will toggle the state of the radio element.
Dispatches the change event.`},{kind:"method",name:"updateRadio",privacy:"private",parameters:[{name:"enabledRadios",type:{text:"Radio[]"},description:"An array of enabled radio buttons within the same group."},{name:"index",type:{text:"number"},description:"The index of the radio button to be updated within the enabled radios array."}],description:`Updates the state of the radio button at the specified index within the enabled radios.
Focuses the radio button and triggers the change event if the radio button is not read-only.`},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"}}],description:"Handles the keydown event (Arrow Up/Down/Left/Right) on the radio element."},{kind:"method",name:"updateTabIndex",privacy:"private",return:{type:{text:"void"}},description:`Update tab index for all radios in the same group (name)
If any radio group is checked, it will have a tab index of 0
If no radio group is checked, the first enabled radio will have a tab index of 0`},{kind:"field",name:"renderLabelAndHelperText",privacy:"private"},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{name:"change",type:{text:"Event"},description:"(React: onChange) Event that gets dispatched when the radio state changes.",reactName:"onChange"},{description:"(React: onFocus) Event that gets dispatched when the radio receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the radio is selected or unselected.",fieldName:"checked"},{name:"readonly",type:{text:"boolean"},default:"false",description:"Determines whether the radio is read-only.",fieldName:"readonly"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper/formfieldwrapper.component"},tagName:"mdc-radio",jsDoc:`/**
 * Radio allow users to select single options from a list or turn an item/feature on or off.
 * These are often used in forms, settings, and selection in lists.
 *
 * A radio component contains an optional label, optional info icon and an optional helper text.
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-staticradio
 * @dependency mdc-toggletip
 *
 * @tagname mdc-radio
 *
 * @event change - (React: onChange) Event that gets dispatched when the radio state changes.
 * @event focus - (React: onFocus) Event that gets dispatched when the radio receives focus.
 *
 * @cssproperty --mdc-radio-text-disabled-color - color of the label when disabled
 * @cssproperty --mdc-radio-control-inactive-hover - color of the radio button when inactive and hovered
 * @cssproperty --mdc-radio-control-inactive-pressed-color - color of the radio button when inactive and pressed
 * @cssproperty --mdc-radio-control-active-hover-color - color of the radio button when active and hovered
 * @cssproperty --mdc-radio-control-active-pressed-color - color of the radio button when active and pressed
 * @cssproperty --mdc-radio-disabled-border-color - color of the radio button when disabled
 * @cssproperty --mdc-radio-control-active-disabled-background - color of the radio button when active and disabled
 * @cssproperty --mdc-radio-control-inactive-disabled-background - color of the radio button when inactive and disabled
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Radio",module:"components/radio/radio.component.js"}}]},{kind:"javascript-module",path:"components/radiogroup/radiogroup.component.js",declarations:[{kind:"class",description:"`mdc-radiogroup` - This is the wrapper component for radio buttons which are grouped together.\nIt can have a header text and a description. It enables users to select a single option from a set of options.\nIt is often used in forms, settings, and selection in lists. It automatically group the radio buttons inside it.",name:"RadioGroup",cssProperties:[{description:"color of the description text",name:"--mdc-radiogroup-description-text-normal"}],members:[{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Name of the radio group.
They are used to group elements in a form together.`,attribute:"name"},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],attributes:[{name:"name",type:{text:"string"},default:"''",description:`Name of the radio group.
They are used to group elements in a form together.`,fieldName:"name"},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],superclass:{name:"FormfieldGroup",module:"/src/components/formfieldgroup"},tagName:"mdc-radiogroup",jsDoc:`/**
 * \`mdc-radiogroup\` - This is the wrapper component for radio buttons which are grouped together.
 * It can have a header text and a description. It enables users to select a single option from a set of options.
 * It is often used in forms, settings, and selection in lists. It automatically group the radio buttons inside it.
 *
 * @tagname mdc-radiogroup
 *
 * @cssproperty --mdc-radiogroup-description-text-normal - color of the description text
 *
 */`,customElement:!0,slots:[{description:"This is a default slot for checkbox or toggle components.",name:"default",inheritedFrom:{name:"FormfieldGroup",module:"src/components/formfieldgroup/formfieldgroup.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"RadioGroup",module:"components/radiogroup/radiogroup.component.js"}}]},{kind:"javascript-module",path:"components/screenreaderannouncer/screenreaderannouncer.component.js",declarations:[{kind:"class",description:"`mdc-screenreaderannouncer` can be used to announce messages with the screen reader.\n\nTo make an announcement set `announcement` attribute on the `mdc-screenreaderannouncer` element.\n\n**Internal logic**\n\nWhen the screenreader announcer is connected to the DOM, if the `identity` attribute is not\nprovided, it is set to `mdc-screenreaderannouncer-identity` and a `<div>` element with this id is created\nin the DOM. If the `identity` attribute is provided, the identity element is used and no new element\nis created in the DOM.\n\nWhen the `announcement` attribute is set, the screenreader announcer will create a `<div>` element with\n`aria-live` attribute set to the value of `data-aria-live` attribute and append it to the `identity` element.\nAfter delay of `delay` milliseconds, a <p> element with the announcement text is appended to the `<div>` element.\n\nThe announcement `<div>` element is removed from the DOM after `timeout` milliseconds.\n\nWhen the screen announcer component is disconnected from the DOM, all the timeouts are cleared and\nall the announcement elements added are removed from the DOM and timeouts cleared.\n\n**Note**\n1. The default delay of 150 miliseconds is used as we dynamically generate the\naria-live region in the DOM and add the announcement text to it.\n3. If no `identity` is provided, all the screen reader components will create and use only one\n`<div>` element with id `mdc-screenreaderannouncer-identity` in the DOM.\n\nReference: https://patrickhlauke.github.io/aria/tests/live-regions/",name:"ScreenreaderAnnouncer",members:[{kind:"field",name:"announcement",type:{text:"string"},default:"''",description:`The announcement attribute is a string that is used to announce messages to the screen reader.
The announcement is made when the announcement attribute is set to a non-empty string.`,attribute:"announcement",reflects:!0},{kind:"field",name:"identity",type:{text:"string"},default:"''",description:`The id of the element in the light dom, to which announcement elements will be appended.

If id is not provided, it will be set to \`mdc-screenreaderannouncer-identity\` and
a div element with this id will be created in the light dom.`,attribute:"identity",reflects:!0},{kind:"field",name:"dataAriaLive",type:{text:"AriaLive"},description:"Aria live value for announcement.",default:"'polite'",attribute:"data-aria-live",reflects:!0},{kind:"field",name:"delay",type:{text:"number"},description:`Milliseconds to wait before adding the announcement to the identiy region in
DOM, which will announce the message to the screen reader.`,default:"150",attribute:"delay",reflects:!0},{kind:"field",name:"timeout",type:{text:"number"},description:`Milliseconds to wait after which the announcement element will be removed from
identity region in DOM, causing the screen reader to not announcing the message.`,default:"20_000",attribute:"timeout",reflects:!0},{kind:"method",name:"announce",parameters:[{name:"announcement",type:{text:"string"},description:"The announcement to be made."},{name:"delay",type:{text:"number"},description:"The delay in milliseconds before announcing the message."},{name:"timeout",type:{text:"number"},description:"The timeout in milliseconds before removing the announcement."},{name:"ariaLive",type:{text:"AriaLive"},description:"The aria live value for the announcement."}],description:`Announces the given announcement to the screen reader.

A div element with aria-live attribute set to the given ariaLive value is created
and a p element with the announcement text is appended to it.

The div element is appended to the element in the DOM identified with id as
identity attribute.`},{kind:"method",name:"clearTimeOutsAndAnnouncements",privacy:"private",description:"Clears all timeouts and removes all announcements from the screen reader."},{kind:"method",name:"createAnnouncementAriaLiveRegion",privacy:"private",description:`Creates a div element with id as identity attribute in the DOM.

If the identity attribute is not provided, it is set internally to
\`mdc-screenreaderannouncer-identity\`.`}],attributes:[{name:"announcement",type:{text:"string"},default:"''",description:`The announcement attribute is a string that is used to announce messages to the screen reader.
The announcement is made when the announcement attribute is set to a non-empty string.`,fieldName:"announcement"},{name:"identity",type:{text:"string"},default:"''",description:`The id of the element in the light dom, to which announcement elements will be appended.

If id is not provided, it will be set to \`mdc-screenreaderannouncer-identity\` and
a div element with this id will be created in the light dom.`,fieldName:"identity"},{name:"data-aria-live",type:{text:"AriaLive"},description:"Aria live value for announcement.",default:"'polite'",fieldName:"dataAriaLive"},{name:"delay",type:{text:"number"},description:`Milliseconds to wait before adding the announcement to the identiy region in
DOM, which will announce the message to the screen reader.`,default:"150",fieldName:"delay"},{name:"timeout",type:{text:"number"},description:`Milliseconds to wait after which the announcement element will be removed from
identity region in DOM, causing the screen reader to not announcing the message.`,default:"20_000",fieldName:"timeout"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-screenreaderannouncer",jsDoc:"/**\n * `mdc-screenreaderannouncer` can be used to announce messages with the screen reader.\n *\n * To make an announcement set `announcement` attribute on the `mdc-screenreaderannouncer` element.\n *\n * **Internal logic**\n *\n * When the screenreader announcer is connected to the DOM, if the `identity` attribute is not\n * provided, it is set to `mdc-screenreaderannouncer-identity` and a `<div>` element with this id is created\n * in the DOM. If the `identity` attribute is provided, the identity element is used and no new element\n * is created in the DOM.\n *\n * When the `announcement` attribute is set, the screenreader announcer will create a `<div>` element with\n * `aria-live` attribute set to the value of `data-aria-live` attribute and append it to the `identity` element.\n * After delay of `delay` milliseconds, a <p> element with the announcement text is appended to the `<div>` element.\n *\n * The announcement `<div>` element is removed from the DOM after `timeout` milliseconds.\n *\n * When the screen announcer component is disconnected from the DOM, all the timeouts are cleared and\n * all the announcement elements added are removed from the DOM and timeouts cleared.\n *\n * **Note**\n * 1. The default delay of 150 miliseconds is used as we dynamically generate the\n * aria-live region in the DOM and add the announcement text to it.\n * 3. If no `identity` is provided, all the screen reader components will create and use only one\n * `<div>` element with id `mdc-screenreaderannouncer-identity` in the DOM.\n *\n * Reference: https://patrickhlauke.github.io/aria/tests/live-regions/\n *\n * @tagname mdc-screenreaderannouncer\n */",customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ScreenreaderAnnouncer",module:"components/screenreaderannouncer/screenreaderannouncer.component.js"}}]},{kind:"javascript-module",path:"components/searchfield/searchfield.component.js",declarations:[{kind:"class",description:"`mdc-searchfield` component is used as an input field for search functionality.\n\nIt supports `mdc-inputchip` as filters.\n\nThis component is built by extending the `mdc-input` component.",name:"Searchfield",slots:[{description:"Slot for input chips",name:"filters"}],members:[{kind:"field",name:"inputChips",type:{text:"Array<HTMLElement> | undefined"}},{kind:"method",name:"handleKeyDown",privacy:"protected",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"Keyboard event"}],description:`Handles the keydown event of the search field.
If the key pressed is 'Enter', it submits the form.
If the key pressed is 'Escape', it clears the input text.`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderInputChips",privacy:"private",description:`This method is used to render the input chips inside filters slot.
It will remove any elements that are not input chips.`},{kind:"method",name:"clearInputText",privacy:"protected",description:"Clears the input field.",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",attribute:"placeholder",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",attribute:"readonly",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"prefixText",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,attribute:"prefix-text",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"leadingIcon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",attribute:"leading-icon",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"trailingButton",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",attribute:"trailing-button",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",attribute:"maxlength",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",attribute:"minlength",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",attribute:"autocapitalize",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",attribute:"autocomplete",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',attribute:"dirname",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,attribute:"pattern",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,attribute:"list",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",attribute:"size",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"clearAriaLabel",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",attribute:"clear-aria-label",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"setInputValidity",privacy:"private",inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"updateValue",privacy:"private",description:`Updates the value of the input field.
Sets the form value.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"onInput",privacy:"private",description:`Handles the input event of the input field.
Updates the value and sets the validity of the input field.`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"onChange",privacy:"private",parameters:[{name:"event",type:{text:"Event"},description:"Event which contains information about the value change."}],description:`Handles the change event of the input field.
Updates the value and sets the validity of the input field.

The 'change' event does not bubble up through the shadow DOM as it was not composed.
Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`,inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderLeadingIcon",privacy:"protected",description:`Renders the leading icon before the input field.
If the leading icon is not set, it will not be displayed.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderPrefixText",privacy:"protected",description:`Renders the prefix text before the input field.
If the prefix text is more than 10 characters,
- it will not be displayed.
- the validation messsage will be displayed.

 Note: We are setting aria-hidden so that the screen reader does not read the prefix text.
 The consumers should set the appropriate aria-label for the input field using 'data-aria-label' attribute.`,return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderTrailingButton",privacy:"protected",parameters:[{name:"show",default:"false"}],description:"Renders the trailing button to clear the input field if the trailingButton is set to true.",return:{type:{text:""}},inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"method",name:"renderInputElement",privacy:"protected",parameters:[{name:"type",type:{text:"InputType"}},{name:"hidePlaceholder",default:"false"}],inheritedFrom:{name:"Input",module:"components/input/input.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{description:"(React: onInput) This event is dispatched when the value of the input field changes (every press).",name:"input",reactName:"onInput",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onChange) This event is dispatched when the value of the input field changes (on blur).",name:"change",reactName:"onChange",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onFocus) This event is dispatched when the input receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"(React: onBlur) This event is dispatched when the input loses focus.",name:"blur",reactName:"onBlur",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"clear",type:{text:"CustomEvent"},description:"(React: onClear) This event is dispatched when the input text is cleared.",reactName:"onClear",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{type:{text:"EventConstructor"},inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}}],superclass:{name:"Input",module:"/src/components/input/input.component"},tagName:"mdc-searchfield",jsDoc:`/**
 * \`mdc-searchfield\` component is used as an input field for search functionality.
 *
 * It supports \`mdc-inputchip\` as filters.
 *
 * This component is built by extending the \`mdc-input\` component.
 *
 * @tagname mdc-searchfield
 *
 * @event input - (React: onInput) This event is dispatched when the value of the input field changes (every press).
 * @event change - (React: onChange) This event is dispatched when the value of the input field changes (on blur).
 * @event focus - (React: onFocus) This event is dispatched when the input receives focus.
 * @event blur - (React: onBlur) This event is dispatched when the input loses focus.
 * @event clear - (React: onClear) This event is dispatched when the input text is cleared.
 *
 * @slot filters - Slot for input chips
 */`,customElement:!0,attributes:[{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"placeholder",type:{text:"string"},default:"''",description:"The placeholder text that is displayed when the input field is empty.",fieldName:"placeholder",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the input field. If true, the input field is read-only.",fieldName:"readonly",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"prefix-text",type:{text:"string | undefined"},description:`The prefix text that is displayed before the input field. It has a max length of 10 characters.
When the prefix text is set, make sure to set the 'data-aria-label'
attribute with the appropriate value for accessibility.`,fieldName:"prefixText",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"leading-icon",type:{text:"IconNames | undefined"},description:"The leading icon that is displayed before the input field.",fieldName:"leadingIcon",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"trailing-button",type:{text:"boolean"},default:"false",description:"The trailing button when set to true, shows a clear button that clears the input field.",fieldName:"trailingButton",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the input field can accept.",fieldName:"maxlength",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the input field can accept.",fieldName:"minlength",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the input field.",default:"'off'",fieldName:"autocapitalize",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the input field.",default:"'off'",fieldName:"autocomplete",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',fieldName:"dirname",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"pattern",type:{text:"string | undefined"},description:`The pattern attribute of the input field.
Specifies a regular expression that the input value must match for validation purposes.`,fieldName:"pattern",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"list",type:{text:"string | undefined"},description:`The list attribute of the input field.
Identifies a list of pre-defined options to suggest to the user.`,fieldName:"list",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"size",type:{text:"number | undefined | undefined"},description:`The size attribute of the input field.
Specifies the width of the input field.`,default:"undefined",fieldName:"size",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"clear-aria-label",type:{text:"string"},default:"''",description:"Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.",fieldName:"clearAriaLabel",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],cssProperties:[{description:"Border color for the input container when disabled",name:"--mdc-input-disabled-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the input field when disabled",name:"--mdc-input-disabled-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the input field when disabled",name:"--mdc-input-disabled-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container",name:"--mdc-input-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the input field",name:"--mdc-input-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the input field",name:"--mdc-input-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the selected text",name:"--mdc-input-selection-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the selected text",name:"--mdc-input-selection-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Text color for the help text",name:"--mdc-input-support-text-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the input field when hovered",name:"--mdc-input-hover-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Background color for the input field when focused",name:"--mdc-input-focused-background-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container when focused",name:"--mdc-input-focused-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container when error",name:"--mdc-input-error-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container when warning",name:"--mdc-input-warning-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container when success",name:"--mdc-input-success-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}},{description:"Border color for the input container when primary",name:"--mdc-input-primary-border-color",inheritedFrom:{name:"Input",module:"src/components/input/input.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Searchfield",module:"components/searchfield/searchfield.component.js"}}]},{kind:"javascript-module",path:"components/select/select.component.js",declarations:[{kind:"class",description:"The mdc-select component is a dropdown selection control that allows users to pick an option from a predefined list.\nIt is designed to work with `mdc-option` for individual options and `mdc-optgroup` for grouping related options.\n\nEvery mdc-option should have a `value` attribute set to ensure proper form submission.\n\nTo set a default option, use the `selected` attribute on the `mdc-option` element.\n\n**Note:** Make sure to add `mdc-selectlistbox` as a child of `mdc-select` and wrap options/optgroup in it to ensure proper accessibility functionality. Read more about it in SelectListBox documentation.\n\nIf you need to use `mdc-tooltip` with any options, make sure to place the tooltip component outside the `mdc-select` element.",name:"Select",cssProperties:[{description:"The background color of the combobox of select.",name:"--mdc-select-background-color"},{description:"The background color of the combobox of select when hovered.",name:"--mdc-select-background-color-hover"},{description:"The background color of the combobox of select when active.",name:"--mdc-select-background-color-active"},{description:"The background color of the combobox of select when disabled.",name:"--mdc-select-background-color-disabled"},{description:"The text color of the select.",name:"--mdc-select-text-color"},{description:"The text color of the selected option in the select.",name:"--mdc-select-text-color-selected"},{description:"The text color of the select when disabled.",name:"--mdc-select-text-color-disabled"},{description:"The border color of the select.",name:"--mdc-select-border-color"},{description:"The border color of the select when disabled.",name:"--mdc-select-border-color-disabled"},{description:"The border color of the select when in success state.",name:"--mdc-select-border-color-success"},{description:"The border color of the select when in warning state.",name:"--mdc-select-border-color-warning"},{description:"The border color of the select when in error state.",name:"--mdc-select-border-color-error"},{description:"The width of the select.",name:"--mdc-select-width"},{description:"The height of the listbox inside the select.",name:"--mdc-select-listbox-height"},{description:"The width of the listbox inside the select (default: `--mdc-select-width`).",name:"--mdc-select-listbox-width"}],slots:[{description:"This is a default/unnamed slot for Selectlistbox including options and/or option group.",name:"default"}],members:[{kind:"field",name:"placeholder",type:{text:"string | undefined"},description:"The placeholder text which will be shown on the text if provided.",attribute:"placeholder"},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the select field. If true, the select is read-only.",attribute:"readonly"},{kind:"field",name:"placement",type:{text:"Placement"},description:"The placeholder text which will be shown on the text if provided.",attribute:"placement",reflects:!0},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:"Indicates whether the select is soft disabled.\nWhen set to `true`, the select appears visually disabled but still allows\nfocus.",default:"undefined",attribute:"soft-disabled",reflects:!0},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow of the used popover will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover within Select.
This determines how the popover is positioned in the DOM.

In case \`boundary\` is set to something other than 'clippingAncestors',
it might be necessary to set the \`strategy\` to 'fixed' to ensure that the popover
is not getting clipped by scrollable containers enclosing the select.`,default:"absolute",attribute:"strategy",reflects:!0},{kind:"field",name:"popoverZIndex",type:{text:"number"},description:`The z-index of the popover within Select.

Override this to make sure this stays on top of other components.`,default:"1000",attribute:"popover-z-index",reflects:!0},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:`ID of the element where the backdrop will be appended to.
This is useful to ensure that the backdrop is appended to the correct element in the DOM.
If not set, the backdrop will be appended to the parent element of the select.`,attribute:"backdrop-append-to",reflects:!0},{kind:"method",name:"getAllValidOptions",privacy:"private",return:{type:{text:"Array<Option>"}}},{kind:"method",name:"getFirstValidOption",privacy:"private",return:{type:{text:"Option | null"}}},{kind:"method",name:"getLastValidOption",privacy:"private",return:{type:{text:"Option | null"}}},{kind:"method",name:"getFirstSelectedOption",privacy:"private",return:{type:{text:"Option | null"}}},{kind:"method",name:"modifyListBoxWrapper",privacy:"private",description:`Modifies the listbox wrapper to ensure it has the correct attributes
and IDs for accessibility.

Once [ariaOwnsElements](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/ariaOwnsElements) is supported in browsers,
this an be removed and mdc-option can be used directly in the select component with a listbox in a different
shadow root and aria-owns attribute to connect them.`},{kind:"method",name:"handleOptionsClick",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The event which triggered this function."}],description:`A private method which is called when an option is clicked.
It sets the selected option, removes selected from other options, updates the tabindex for all options,
closes the popover, and fires the change and input events.`},{kind:"method",name:"setSelectedOption",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"option",type:{text:"Option | null"},description:"The option element in DOM which gets selected."}],description:`Sets the selected option in the component state and updates the input element's value.
This method ensures that only the selected option is marked as selected in the DOM,
and updates the tabindex for all options accordingly.
It also updates the validity of the input element based on the selected option.
This method is called when an option is selected.`},{kind:"method",name:"updateTabIndexForAllOptions",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"option",optional:!0,type:{text:"Option | null"},description:"The option which tabIndex should be set to 0."}],description:`Updates the tabindex of all options.
Sets the tabindex of the selected option to '0' and others to '-1'.`},{kind:"method",name:"updateSelectedInChildOptions",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"selectedOption",type:{text:"Option | null"},description:"The option which gets selected"}],description:"Sets selected attribute on the selected option and removes it from all options"},{kind:"method",name:"fireEvents",privacy:"private",return:{type:{text:"void"}},description:`A private method which is called to fire the change and input events.
It dispatches the input and change events with the selected option's value and label.`},{kind:"method",name:"dispatchChange",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"option",type:{text:"Option"}}]},{kind:"method",name:"dispatchInput",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"option",type:{text:"Option"}}]},{kind:"method",name:"handleClickCombobox",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"MouseEvent"},description:"The mouse event which triggered this function."}],description:`Handles the click event on the visual combobox.
If the select is disabled, soft-disabled or readonly, it does nothing.
If the popover is already open, it closes it.
If it is closed, it opens it.`},{kind:"method",name:"handleKeydownCombobox",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the select element when the popover is closed.
The options are as follows:
- ARROW_DOWN, ARROW_UP, SPACE: Opens the popover and prevents the default scrolling behavior.
- ENTER: Opens the popover, prevents default scrolling, and submits the form if the popover is closed.
- HOME: Opens the popover and sets focus and tabindex on the first option.
- END: Opens the popover and sets focus and tabindex on the last option.`},{kind:"method",name:"handlePopoverKeydown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the select element when the popover is open.
The options are as follows:
- HOME: Sets focus and tabindex on the first option.
- END: Sets focus and tabindex on the last option.
- ARROW_DOWN, ARROW_UP, PAGE_DOWN, PAGE_UP: Handles navigation between options.`},{kind:"method",name:"updateState",privacy:"public",return:{type:{text:"void"}},description:`Updates the state of the select component.
This public method should be fired when the selected on the option components is updated from the outside.
It ensures that the selected attribute is set correctly on the options
and that the aria-selected attribute is updated accordingly.`},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{name:"change",type:{text:"CustomEvent"},description:"(React: onChange) This event is dispatched when the select is changed.",reactName:"onChange"},{name:"input",type:{text:"CustomEvent"},description:"(React: onInput) This event is dispatched when the select is changed.",reactName:"onInput"},{description:"(React: onClick) This event is dispatched when the select is clicked.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the select.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onFocus) This event is dispatched when the select receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"placeholder",type:{text:"string | undefined"},description:"The placeholder text which will be shown on the text if provided.",fieldName:"placeholder"},{name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the select field. If true, the select is read-only.",fieldName:"readonly"},{name:"placement",type:{text:"Placement"},description:"The placeholder text which will be shown on the text if provided.",fieldName:"placement"},{name:"soft-disabled",type:{text:"boolean | undefined"},description:"Indicates whether the select is soft disabled.\nWhen set to `true`, the select appears visually disabled but still allows\nfocus.",default:"undefined",fieldName:"softDisabled"},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow of the used popover will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary"},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover within Select.
This determines how the popover is positioned in the DOM.

In case \`boundary\` is set to something other than 'clippingAncestors',
it might be necessary to set the \`strategy\` to 'fixed' to ensure that the popover
is not getting clipped by scrollable containers enclosing the select.`,default:"absolute",fieldName:"strategy"},{name:"popover-z-index",type:{text:"number"},description:`The z-index of the popover within Select.

Override this to make sure this stays on top of other components.`,default:"1000",fieldName:"popoverZIndex"},{name:"backdrop-append-to",type:{text:"string | undefined"},description:`ID of the element where the backdrop will be appended to.
This is useful to ensure that the backdrop is appended to the correct element in the DOM.
If not set, the backdrop will be appended to the parent element of the select.`,fieldName:"backdropAppendTo"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper/formfieldwrapper.component"},tagName:"mdc-select",jsDoc:`/**
 * The mdc-select component is a dropdown selection control that allows users to pick an option from a predefined list.
 * It is designed to work with \`mdc-option\` for individual options and \`mdc-optgroup\` for grouping related options.
 *
 * Every mdc-option should have a \`value\` attribute set to ensure proper form submission.
 *
 * To set a default option, use the \`selected\` attribute on the \`mdc-option\` element.
 *
 * **Note:** Make sure to add \`mdc-selectlistbox\` as a child of \`mdc-select\` and wrap options/optgroup in it to ensure proper accessibility functionality. Read more about it in SelectListBox documentation.
 *
 * If you need to use \`mdc-tooltip\` with any options, make sure to place the tooltip component outside the \`mdc-select\` element.
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-popover
 * @dependency mdc-text
 * @dependency mdc-toggletip
 *
 * @tagname mdc-select
 *
 * @slot default - This is a default/unnamed slot for Selectlistbox including options and/or option group.
 *
 * @event click - (React: onClick) This event is dispatched when the select is clicked.
 * @event change - (React: onChange) This event is dispatched when the select is changed.
 * @event input - (React: onInput) This event is dispatched when the select is changed.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the select.
 * @event focus - (React: onFocus) This event is dispatched when the select receives focus.
 *
 * @cssproperty --mdc-select-background-color - The background color of the combobox of select.
 * @cssproperty --mdc-select-background-color-hover - The background color of the combobox of select when hovered.
 * @cssproperty --mdc-select-background-color-active - The background color of the combobox of select when active.
 * @cssproperty --mdc-select-background-color-disabled - The background color of the combobox of select when disabled.
 * @cssproperty --mdc-select-text-color - The text color of the select.
 * @cssproperty --mdc-select-text-color-selected - The text color of the selected option in the select.
 * @cssproperty --mdc-select-text-color-disabled - The text color of the select when disabled.
 * @cssproperty --mdc-select-border-color - The border color of the select.
 * @cssproperty --mdc-select-border-color-disabled - The border color of the select when disabled.
 * @cssproperty --mdc-select-border-color-success - The border color of the select when in success state.
 * @cssproperty --mdc-select-border-color-warning - The border color of the select when in warning state.
 * @cssproperty --mdc-select-border-color-error - The border color of the select when in error state.
 * @cssproperty --mdc-select-width - The width of the select.
 * @cssproperty --mdc-select-listbox-height - The height of the listbox inside the select.
 * @cssproperty --mdc-select-listbox-width - The width of the listbox inside the select (default: \`--mdc-select-width\`).
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Select",module:"components/select/select.component.js"}}]},{kind:"javascript-module",path:"components/selectlistbox/selectlistbox.component.js",declarations:[{kind:"class",description:`Selectlistbox component as Light DOM component to act as a simple wrapper
for mdc-option components to ensure accessibility and proper role assignment.

Once [ariaOwnsElements](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/ariaOwnsElements) is supported in browsers, this component can be removed
and mdc-option can be used directly in the select component with a listbox in a different
shadow root and aria-owns attribute to connect them.`,name:"Selectlistbox",slots:[{description:"This is a default/unnamed slot, which can be used to insert mdc-option components.",name:"default"}],members:[],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-selectlistbox",jsDoc:`/**
 * Selectlistbox component as Light DOM component to act as a simple wrapper
 * for mdc-option components to ensure accessibility and proper role assignment.
 *
 * Once [ariaOwnsElements](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/ariaOwnsElements) is supported in browsers, this component can be removed
 * and mdc-option can be used directly in the select component with a listbox in a different
 * shadow root and aria-owns attribute to connect them.
 *
 * @tagname mdc-selectlistbox
 *
 * @slot default - This is a default/unnamed slot, which can be used to insert mdc-option components.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Selectlistbox",module:"components/selectlistbox/selectlistbox.component.js"}}]},{kind:"javascript-module",path:"components/sidenavigation/sidenavigation.component.js",declarations:[{kind:"class",description:'The `mdc-sidenavigation` component provides a vertically stacked navigation experience,\ntypically used in layouts with persistent or collapsible sidebars.\n\n## Features:\n- Supports four layout variants: `fixed-collapsed`, `fixed-expanded`, `flexible`, and `hidden`\n- Toggleable expand/collapse behavior\n- Displays brand logo and customer name\n- Serves as a context provider for descendant components - `mdc-menubar` and `mdc-navmenuitem`\n\n### Usage:\nIn a sidenavigation, navmenuitems can be used in the following ways:\n\n1. **Simple navmenuitem** – No submenu or interaction beyond selection.\n\n2. **NavMenuItem with submenu**:\n   - Provide an `id` on the `mdc-navmenuitem`\n   - Set the `triggerId` on the corresponding `mdc-menupopover` to match the navmenuitem\'s `id`\n   - Set `parent-nav-tooltip-text` with appropriate text that will display when a child menu item\n     inside the nested menupopover is active, conveying which submenu item is currently selected\n\n3. **Actionable navmenuitem (no submenu)**:\n   - Performs an action such as navigation or alert trigger\n   - Set `disable-aria-current="true"` to maintain visual active state without navigation behavior\n\n### Recommendations:\n- Use `mdc-text` for section headers\n- Use `mdc-divider` with the attribute `variant="gradient"` for section dividers\n- For the brand logo, use an informative icon. Refer to `Momentum Informative Icons`\n\n#### Accessibility Notes:\n- Always provide meaningful `aria-label` attributes for both `mdc-navmenuitem` and `mdc-menubar`\nto ensure screen reader support\n- Set `grabber-btn-aria-label` to provide accessible labels for the expand/collapse grabber button',name:"SideNavigation",cssProperties:[{description:"width of the sideNavigation when expanded",name:"--mdc-sidenavigation-expanded-width"},{description:"width of the sideNavigation when collapsed",name:"--mdc-sidenavigation-collapsed-width"},{description:"z-index of the vertical divider button",name:"--mdc-sidenavigation-vertical-divider-button-z-index"}],cssParts:[{description:"The main container wrapping the entire side navigation.",name:"side-navigation-container"},{description:"The scrollable section of the side navigation.",name:"scrollable-section"},{description:"The fixed section of the side navigation.",name:"fixed-section"},{description:"The divider between the scrollable and fixed sections.",name:"separator"},{description:"The container wrapping the brand logo and footer text.",name:"brand-logo-container"},{description:"The footer text label in the fixed section.",name:"footer-text"},{description:"The vertical divider between the scrollable and fixed sections.",name:"vertical-divider"},{description:"The button inside the vertical divider used to toggle expand/collapse.",name:"vertical-divider-button"}],slots:[{description:"Slot for the scrollable content area of the side navigation.",name:"scrollable-section"},{description:"Slot for the fixed content area of the side navigation.",name:"fixed-section"},{description:"Slot for the brand logo (e.g., icon or img).",name:"brand-logo"}],members:[{kind:"field",name:"variant",type:{text:"SideNavigationVariant"},description:`Four variants of the sideNavigation
- **fixed-collapsed**: Shows icons without labels and has fixed width, 4.5rem.
- **fixed-expanded**: Shows icons with labels and has fixed width, 15rem.
- **flexible**: Toggles between collapsed/expanded states.
- **hidden**: Removes the sidenavigation from the DOM.`,default:"flexible",attribute:"variant",reflects:!0},{kind:"field",name:"footerText",type:{text:"string"},default:"''",description:"Displays footer text in the bottom section of the sidenavigation.",attribute:"footer-text",reflects:!0},{kind:"field",name:"grabberBtnAriaLabel",type:{text:"string | undefined"},description:"Provides an accessible label for the grabber button.\nThis value is used to set the `aria-label` attribute for the button.",default:"''",attribute:"grabber-btn-aria-label",reflects:!0},{kind:"field",name:"parentNavTooltipText",type:{text:"string | undefined"},description:"Tooltip text shown on parent nav items when a child is active.",attribute:"parent-nav-tooltip-text",reflects:!0},{kind:"field",name:"Context",privacy:"public",static:!0,readonly:!0},{kind:"method",name:"updateContext",privacy:"protected",return:{type:{text:"void"}},description:`Update all observing components of this
provider to update the values

Is called on every re-render, see Provider class`},{kind:"method",name:"preventScrollOnSpace",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"}}]}],events:[{name:"toggle",type:{text:"CustomEvent"},description:"(React: onToggle) Dispatched when the grabber button is clicked to expand/collapse the sidenavigation.",reactName:"onToggle"},{description:"(React: onActiveChange) Dispatched when the active state of a nested navmenuitem changes.",name:"activechange",reactName:"onActiveChange"}],attributes:[{name:"variant",type:{text:"SideNavigationVariant"},description:`Four variants of the sideNavigation
- **fixed-collapsed**: Shows icons without labels and has fixed width, 4.5rem.
- **fixed-expanded**: Shows icons with labels and has fixed width, 15rem.
- **flexible**: Toggles between collapsed/expanded states.
- **hidden**: Removes the sidenavigation from the DOM.`,default:"flexible",fieldName:"variant"},{name:"footer-text",type:{text:"string"},default:"''",description:"Displays footer text in the bottom section of the sidenavigation.",fieldName:"footerText"},{name:"grabber-btn-aria-label",type:{text:"string | undefined"},description:"Provides an accessible label for the grabber button.\nThis value is used to set the `aria-label` attribute for the button.",default:"''",fieldName:"grabberBtnAriaLabel"},{name:"parent-nav-tooltip-text",type:{text:"string | undefined"},description:"Tooltip text shown on parent nav items when a child is active.",fieldName:"parentNavTooltipText"}],superclass:{name:"Provider",module:"/src/models"},tagName:"mdc-sidenavigation",jsDoc:`/**
 * The \`mdc-sidenavigation\` component provides a vertically stacked navigation experience,
 * typically used in layouts with persistent or collapsible sidebars.
 *
 * ## Features:
 * - Supports four layout variants: \`fixed-collapsed\`, \`fixed-expanded\`, \`flexible\`, and \`hidden\`
 * - Toggleable expand/collapse behavior
 * - Displays brand logo and customer name
 * - Serves as a context provider for descendant components - \`mdc-menubar\` and \`mdc-navmenuitem\`
 *
 * ### Usage:
 * In a sidenavigation, navmenuitems can be used in the following ways:
 *
 * 1. **Simple navmenuitem** – No submenu or interaction beyond selection.
 *
 * 2. **NavMenuItem with submenu**:
 *    - Provide an \`id\` on the \`mdc-navmenuitem\`
 *    - Set the \`triggerId\` on the corresponding \`mdc-menupopover\` to match the navmenuitem's \`id\`
 *    - Set \`parent-nav-tooltip-text\` with appropriate text that will display when a child menu item
 *      inside the nested menupopover is active, conveying which submenu item is currently selected
 *
 * 3. **Actionable navmenuitem (no submenu)**:
 *    - Performs an action such as navigation or alert trigger
 *    - Set \`disable-aria-current="true"\` to maintain visual active state without navigation behavior
 *
 * ### Recommendations:
 * - Use \`mdc-text\` for section headers
 * - Use \`mdc-divider\` with the attribute \`variant="gradient"\` for section dividers
 * - For the brand logo, use an informative icon. Refer to \`Momentum Informative Icons\`
 *
 * #### Accessibility Notes:
 * - Always provide meaningful \`aria-label\` attributes for both \`mdc-navmenuitem\` and \`mdc-menubar\`
 * to ensure screen reader support
 * - Set \`grabber-btn-aria-label\` to provide accessible labels for the expand/collapse grabber button
 *
 * @dependency mdc-text
 * @dependency mdc-button
 * @dependency mdc-divider
 * @dependency mdc-menubar
 *
 * @event activechange - (React: onActiveChange) Dispatched when the active state of the navmenuitem changes.
 *
 * @tagname mdc-sidenavigation
 *
 * @slot scrollable-section - Slot for the scrollable content area of the side navigation.
 * @slot fixed-section - Slot for the fixed content area of the side navigation.
 * @slot brand-logo - Slot for the brand logo (e.g., icon or img).
 *
 * @csspart side-navigation-container - The main container wrapping the entire side navigation.
 * @csspart scrollable-section - The scrollable section of the side navigation.
 * @csspart fixed-section - The fixed section of the side navigation.
 * @csspart separator - The divider between the scrollable and fixed sections.
 * @csspart brand-logo-container - The container wrapping the brand logo and footer text.
 * @csspart footer-text - The footer text label in the fixed section.
 * @csspart vertical-divider - The vertical divider between the scrollable and fixed sections.
 * @csspart vertical-divider-button - The button inside the vertical divider used to toggle expand/collapse.
 *
 * @event toggle - (React: onToggle) Dispatched when the grabber button is clicked to expand/collapse the sidenavigation.
 * @event activechange - (React: onActiveChange) Dispatched when the active state of a nested navmenuitem changes.
 *
 * @cssproperty --mdc-sidenavigation-expanded-width - width of the sideNavigation when expanded
 * @cssproperty --mdc-sidenavigation-collapsed-width - width of the sideNavigation when collapsed
 * @cssproperty --mdc-sidenavigation-vertical-divider-button-z-index - z-index of the vertical divider button
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"SideNavigation",module:"components/sidenavigation/sidenavigation.component.js"}}]},{kind:"javascript-module",path:"components/skeleton/skeleton.component.js",declarations:[{kind:"class",description:`\`mdc-skeleton\` is a component that shows a grey placeholder area.
It provides visual feedback to users that content is being loaded.

**Skeleton Variants:**
- **rectangular**: Default variant with 0.25rem border radius
- **rounded**: Has 0.5rem border radius
- **circular**: Has 50% border radius for circular shapes
- **button**: Optimized for button placeholders with 1.25rem border radius

**Sizing Behavior:**
1. If wrapping content, takes dimensions of wrapped content
2. Otherwise grows to fill parent container`,name:"Skeleton",cssProperties:[{description:"background color of the skeleton",name:"--mdc-skeleton-background-color"},{description:"height of the skeleton",name:"--mdc-skeleton-height"},{description:"width of the skeleton",name:"--mdc-skeleton-width"}],slots:[{description:"Content to wrap (optional). When provided, skeleton takes dimensions of this content.",name:""}],members:[{kind:"field",name:"variant",type:{text:"SkeletonVariant"},description:`The variant of skeleton to display
- **rectangular**: Default rectangular shape with 0.25rem border radius
- **rounded**: Rounded rectangle with 0.5rem border radius
- **circular**: Circular shape with 50% border radius
- **button**: Button placeholder with 1.25rem border radius`,default:"rectangular",attribute:"variant",reflects:!0},{kind:"method",name:"checkSlotContent",privacy:"private",return:{type:{text:"void"}}}],attributes:[{name:"variant",type:{text:"SkeletonVariant"},description:`The variant of skeleton to display
- **rectangular**: Default rectangular shape with 0.25rem border radius
- **rounded**: Rounded rectangle with 0.5rem border radius
- **circular**: Circular shape with 50% border radius
- **button**: Button placeholder with 1.25rem border radius`,default:"rectangular",fieldName:"variant"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-skeleton",jsDoc:`/**
 * \`mdc-skeleton\` is a component that shows a grey placeholder area.
 * It provides visual feedback to users that content is being loaded.
 *
 * **Skeleton Variants:**
 * - **rectangular**: Default variant with 0.25rem border radius
 * - **rounded**: Has 0.5rem border radius
 * - **circular**: Has 50% border radius for circular shapes
 * - **button**: Optimized for button placeholders with 1.25rem border radius
 *
 * **Sizing Behavior:**
 * 1. If wrapping content, takes dimensions of wrapped content
 * 2. Otherwise grows to fill parent container
 *
 * @tagname mdc-skeleton
 *
 * @slot - Content to wrap (optional). When provided, skeleton takes dimensions of this content.
 *
 * @cssproperty --mdc-skeleton-background-color - background color of the skeleton
 * @cssproperty --mdc-skeleton-height - height of the skeleton
 * @cssproperty --mdc-skeleton-width - width of the skeleton
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Skeleton",module:"components/skeleton/skeleton.component.js"}}]},{kind:"javascript-module",path:"components/slider/slider.component.js",declarations:[{kind:"class",description:"slider component, which ...",name:"Slider",cssProperties:[{description:"Description of the CSS custom property",name:"--custom-property-name"}],slots:[{description:"This is a default/unnamed slot",name:"default"}],members:[{kind:"field",name:"range",type:{text:"boolean"},default:"false",description:"Whether or not to show a value range. When false, the slider displays a slide-able handle for the value property; when true, it displays slide-able handles for the valueStart and valueEnd properties.",attribute:"range"},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:"Whether the slider is disabled.",attribute:"disabled"},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:"Acts similar to disabled, but component is focusable and tooltip is shown on focus.",attribute:"soft-disabled"},{kind:"field",name:"leadingIcon",type:{text:"string | undefined"},description:"Icon that represents the minimum value; ex: muted speaker.",attribute:"leading-icon"},{kind:"field",name:"trailingIcon",type:{text:"string | undefined"},description:"Icon that represents the maximum value; ex: speaker with full volume.",attribute:"trailing-icon"},{kind:"field",name:"min",type:{text:"number"},default:"0",description:"The slider minimum value.",attribute:"min"},{kind:"field",name:"max",type:{text:"number"},default:"100",description:"The slider maximum value.",attribute:"max"},{kind:"field",name:"value",type:{text:"number | undefined"},description:"The slider value displayed when range is false.",attribute:"value"},{kind:"field",name:"valueStart",type:{text:"number | undefined"},description:"The slider start value displayed when range is true.",attribute:"value-start"},{kind:"field",name:"valueEnd",type:{text:"number | undefined"},description:"The slider end value displayed when range is true.",attribute:"value-end"},{kind:"field",name:"step",type:{text:"number"},default:"1",description:"The step between values. This will show tick marks and the stepper will snap to the nearest tick mark.",attribute:"step"},{kind:"field",name:"label",type:{text:"string | undefined"},description:"It represents the label for slider component.",attribute:"label"},{kind:"field",name:"labelStart",type:{text:"string | undefined"},description:"The label text is shown below the slider (on leading side) representing the minimum starting value of the slider.",attribute:"label-start"},{kind:"field",name:"labelEnd",type:{text:"string | undefined"},description:"The label text is shown below the slider (on trailing side) representing the maximum starting value of the slider.",attribute:"label-end"},{kind:"field",name:"valueLabel",type:{text:"string"},default:"''",description:"An optional label for the slider's value displayed when range is false; if not set, the label is the value itself.",attribute:"value-label"},{kind:"field",name:"valueLabelStart",type:{text:"string"},default:"''",description:"An optional label for the slider's start value displayed when range is true; if not set, the label is the valueStart itself.",attribute:"value-label-start"},{kind:"field",name:"valueLabelEnd",type:{text:"string"},default:"''",description:"An optional label for the slider's end value displayed when range is true; if not set, the label is the valueEnd itself.",attribute:"value-label-end"},{kind:"field",name:"ariaLabelStart",type:{text:"string"},default:"''",description:"Aria label for the slider's start handle displayed when range is true.",attribute:"aria-label-start"},{kind:"field",name:"ariaValuetextStart",type:{text:"string"},default:"''",description:"Aria value text for the slider's start value displayed when range is true.",attribute:"aria-valuetext-start"},{kind:"field",name:"ariaLabelEnd",type:{text:"string"},default:"''",description:"Aria label for the slider's end handle displayed when range is true.",attribute:"aria-label-end"},{kind:"field",name:"ariaValuetextEnd",type:{text:"string"},default:"''",description:"Aria value text for the slider's end value displayed when range is true.",attribute:"aria-valuetext-end"},{kind:"field",name:"name",type:{text:"string | undefined"},description:"Name attribute for the slider (single value).",attribute:"name"},{kind:"field",name:"nameStart",type:{text:"string | undefined"},description:"Name attribute for the slider's start handle (range).",attribute:"name-start"},{kind:"field",name:"nameEnd",type:{text:"string | undefined"},description:"Name attribute for the slider's end handle (range).",attribute:"name-end"},{kind:"field",name:"dataAriaValuetext",type:{text:"string"},default:"''",description:"Aria value text for the slider's value displayed when range is false.",attribute:"data-aria-valuetext"},{kind:"field",name:"dataAriaLabel",type:{text:"string"},default:"''",description:"Aria label for the slider's handle displayed when range is false.",attribute:"data-aria-label"}],attributes:[{name:"range",type:{text:"boolean"},default:"false",description:"Whether or not to show a value range. When false, the slider displays a slide-able handle for the value property; when true, it displays slide-able handles for the valueStart and valueEnd properties.",fieldName:"range"},{name:"disabled",type:{text:"boolean | undefined"},description:"Whether the slider is disabled.",fieldName:"disabled"},{name:"soft-disabled",type:{text:"boolean | undefined"},description:"Acts similar to disabled, but component is focusable and tooltip is shown on focus.",fieldName:"softDisabled"},{name:"leading-icon",type:{text:"string | undefined"},description:"Icon that represents the minimum value; ex: muted speaker.",fieldName:"leadingIcon"},{name:"trailing-icon",type:{text:"string | undefined"},description:"Icon that represents the maximum value; ex: speaker with full volume.",fieldName:"trailingIcon"},{name:"min",type:{text:"number"},default:"0",description:"The slider minimum value.",fieldName:"min"},{name:"max",type:{text:"number"},default:"100",description:"The slider maximum value.",fieldName:"max"},{name:"value",type:{text:"number | undefined"},description:"The slider value displayed when range is false.",fieldName:"value"},{name:"value-start",type:{text:"number | undefined"},description:"The slider start value displayed when range is true.",fieldName:"valueStart"},{name:"value-end",type:{text:"number | undefined"},description:"The slider end value displayed when range is true.",fieldName:"valueEnd"},{name:"step",type:{text:"number"},default:"1",description:"The step between values. This will show tick marks and the stepper will snap to the nearest tick mark.",fieldName:"step"},{name:"label",type:{text:"string | undefined"},description:"It represents the label for slider component.",fieldName:"label"},{name:"label-start",type:{text:"string | undefined"},description:"The label text is shown below the slider (on leading side) representing the minimum starting value of the slider.",fieldName:"labelStart"},{name:"label-end",type:{text:"string | undefined"},description:"The label text is shown below the slider (on trailing side) representing the maximum starting value of the slider.",fieldName:"labelEnd"},{name:"value-label",type:{text:"string"},default:"''",description:"An optional label for the slider's value displayed when range is false; if not set, the label is the value itself.",fieldName:"valueLabel"},{name:"value-label-start",type:{text:"string"},default:"''",description:"An optional label for the slider's start value displayed when range is true; if not set, the label is the valueStart itself.",fieldName:"valueLabelStart"},{name:"value-label-end",type:{text:"string"},default:"''",description:"An optional label for the slider's end value displayed when range is true; if not set, the label is the valueEnd itself.",fieldName:"valueLabelEnd"},{name:"aria-label-start",type:{text:"string"},default:"''",description:"Aria label for the slider's start handle displayed when range is true.",fieldName:"ariaLabelStart"},{name:"aria-valuetext-start",type:{text:"string"},default:"''",description:"Aria value text for the slider's start value displayed when range is true.",fieldName:"ariaValuetextStart"},{name:"aria-label-end",type:{text:"string"},default:"''",description:"Aria label for the slider's end handle displayed when range is true.",fieldName:"ariaLabelEnd"},{name:"aria-valuetext-end",type:{text:"string"},default:"''",description:"Aria value text for the slider's end value displayed when range is true.",fieldName:"ariaValuetextEnd"},{name:"name",type:{text:"string | undefined"},description:"Name attribute for the slider (single value).",fieldName:"name"},{name:"name-start",type:{text:"string | undefined"},description:"Name attribute for the slider's start handle (range).",fieldName:"nameStart"},{name:"name-end",type:{text:"string | undefined"},description:"Name attribute for the slider's end handle (range).",fieldName:"nameEnd"},{name:"data-aria-valuetext",type:{text:"string"},default:"''",description:"Aria value text for the slider's value displayed when range is false.",fieldName:"dataAriaValuetext"},{name:"data-aria-label",type:{text:"string"},default:"''",description:"Aria label for the slider's handle displayed when range is false.",fieldName:"dataAriaLabel"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-slider",jsDoc:`/**
 * slider component, which ...
 *
 * @tagname mdc-slider
 *
 * @slot default - This is a default/unnamed slot
 *
 * @cssproperty --custom-property-name - Description of the CSS custom property
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Slider",module:"components/slider/slider.component.js"}}]},{kind:"javascript-module",path:"components/spinner/spinner.component.js",declarations:[{kind:"class",description:`\`mdc-spinner\` is loading spinner which is an indeterminate progress indicator, meaning
it's best for cases where the  progress or duration of a process is variable or unknown.

Spinner Variants:
- **Standalone (Default)**: Track has a blue color.
- **Button**: To be used when placed in a button to show that the button’s action is currently in progress.
To ensure a minimum 3:1 contrast ratio, the color is changed internally to be the same color as the button’s
icon or label text.

Spinner Sizes:
- **Large (96px)**: Use when replacing entire regions or pages that are still loading
- **MidSize (48px) (Default)**: Use for most use cases.
- **Small (24px)**: Use for inline with loading text.

Customisation of the spinner size is allowed by setting the size to undefined and using the --mdc-spinner-size
CSS property.

Spinner Colors:
- **Default**: Use for most use cases.
- **Inverted**: Only to be used within inverted components, such as coachmarks.

Regarding accessibility, if an aria-label is provided, the role will be set to 'img'; if it is absent, the role
will be unset
and aria-hidden will be set to 'true' so the spinner will be ignored by screen readers.`,name:"Spinner",cssProperties:[{description:"Allows customization of the default spinner color.",name:"--mdc-spinner-default-color"},{description:"Allows customization of the inverted spinner color.",name:"--mdc-spinner-inverted-color"},{description:"Allows customization of the spinner Button variant color.",name:"--mdc-spinner-button-variant-color"},{description:"Allows customization of the spinner size.",name:"--mdc-spinner-size"}],cssParts:[{description:"The svg which contains the circle spinner.",name:"container"},{description:"The circle of the spinner.",name:"circle"}],members:[{kind:"field",name:"inverted",type:{text:"boolean | undefined"},description:"The spinner color can be inverted by setting the inverted attribute to true.",default:"false",attribute:"inverted",reflects:!0},{kind:"field",name:"size",type:{text:"SpinnerSize | undefined"},description:`Size of the spinner.
Acceptable values include:

- 'small'
- 'midsize'
- 'large'
- 'undefined'`,default:"midsize",attribute:"size",reflects:!0},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",attribute:"aria-label"},{kind:"field",name:"variant",type:{text:"SpinnerVariant"},description:`There are 2 variants of spinner: default and button. Their coloring is different.
- **Standalone (Default)**: Track has a blue color.
- **Button**: To be used when placed in a button to show that the button’s action is currently in progress.
To ensure a minimum 3:1 contrast ratio, change the active indicator color to be the same color as the button’s
icon or label text.`,default:"standalone",attribute:"variant",reflects:!0}],attributes:[{name:"inverted",type:{text:"boolean | undefined"},description:"The spinner color can be inverted by setting the inverted attribute to true.",default:"false",fieldName:"inverted"},{name:"size",type:{text:"SpinnerSize | undefined"},description:`Size of the spinner.
Acceptable values include:

- 'small'
- 'midsize'
- 'large'
- 'undefined'`,default:"midsize",fieldName:"size"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Aria-label attribute to be set for accessibility",fieldName:"ariaLabel"},{name:"variant",type:{text:"SpinnerVariant"},description:`There are 2 variants of spinner: default and button. Their coloring is different.
- **Standalone (Default)**: Track has a blue color.
- **Button**: To be used when placed in a button to show that the button’s action is currently in progress.
To ensure a minimum 3:1 contrast ratio, change the active indicator color to be the same color as the button’s
icon or label text.`,default:"standalone",fieldName:"variant"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-spinner",jsDoc:`/**
 * \`mdc-spinner\` is loading spinner which is an indeterminate progress indicator, meaning
 * it's best for cases where the  progress or duration of a process is variable or unknown.
 *
 * Spinner Variants:
 * - **Standalone (Default)**: Track has a blue color.
 * - **Button**: To be used when placed in a button to show that the button’s action is currently in progress.
 * To ensure a minimum 3:1 contrast ratio, the color is changed internally to be the same color as the button’s
 * icon or label text.
 *
 * Spinner Sizes:
 * - **Large (96px)**: Use when replacing entire regions or pages that are still loading
 * - **MidSize (48px) (Default)**: Use for most use cases.
 * - **Small (24px)**: Use for inline with loading text.
 *
 * Customisation of the spinner size is allowed by setting the size to undefined and using the --mdc-spinner-size
 * CSS property.
 *
 * Spinner Colors:
 * - **Default**: Use for most use cases.
 * - **Inverted**: Only to be used within inverted components, such as coachmarks.
 *
 * Regarding accessibility, if an aria-label is provided, the role will be set to 'img'; if it is absent, the role
 * will be unset
 * and aria-hidden will be set to 'true' so the spinner will be ignored by screen readers.
 *
 * @tagname mdc-spinner
 *
 * @cssproperty --mdc-spinner-default-color - Allows customization of the default spinner color.
 * @cssproperty --mdc-spinner-inverted-color - Allows customization of the inverted spinner color.
 * @cssproperty --mdc-spinner-button-variant-color - Allows customization of the spinner Button variant color.
 * @cssproperty --mdc-spinner-size - Allows customization of the spinner size.
 *
 * @csspart container - The svg which contains the circle spinner.
 * @csspart circle - The circle of the spinner.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Spinner",module:"components/spinner/spinner.component.js"}}]},{kind:"javascript-module",path:"components/staticcheckbox/staticcheckbox.component.js",declarations:[{kind:"class",description:`This is a decorative component that is styled to look as a checkbox.

It has 3 properties - checked, indeterminate and disabled.

We are using the same styling that has been created for the \`mdc-checkbox\` component.`,name:"StaticCheckbox",cssProperties:[{description:"Border color in high contrast.",name:"--mdc-staticcheckbox-border-color"},{description:"Background color for a selected checkbox.",name:"--mdc-staticcheckbox-checked-background-color"},{description:"Background color for a disabled checkbox.",name:"--mdc-staticcheckbox-disabled-background-color"},{description:"Border color for a disabled checkbox.",name:"--mdc-checkbox-disabled-border-color"},{description:"Background color for a disabled, selected checkbox.",name:"--mdc-checkbox-disabled-checked-icon-color"},{description:"Icon color for a disabled checkbox.",name:"--mdc-staticcheckbox-disabled-icon-color"},{description:"Background color for an unselected checkbox.",name:"--mdc-staticcheckbox-icon-background-color"},{description:"Default background color for an unselected checkbox.",name:"--mdc-staticcheckbox-icon-border-color"},{description:"Icon color for an unselected checkbox.",name:"--mdc-staticcheckbox-icon-color"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is selected or unselected.",attribute:"checked",reflects:!0},{kind:"field",name:"indeterminate",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is in an indeterminate state.",attribute:"indeterminate",reflects:!0},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is selected or unselected.",fieldName:"checked"},{name:"indeterminate",type:{text:"boolean"},default:"false",description:"Determines whether the checkbox is in an indeterminate state.",fieldName:"indeterminate"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-staticcheckbox",jsDoc:`/**
 * This is a decorative component that is styled to look as a checkbox.
 *
 * It has 3 properties - checked, indeterminate and disabled.
 *
 * We are using the same styling that has been created for the \`mdc-checkbox\` component.
 *
 * @tagname mdc-staticcheckbox
 *
 * @dependency mdc-icon
 *
 * @cssproperty --mdc-staticcheckbox-border-color - Border color in high contrast.
 * @cssproperty --mdc-staticcheckbox-checked-background-color - Background color for a selected checkbox.
 * @cssproperty --mdc-staticcheckbox-disabled-background-color - Background color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-border-color - Border color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-checked-icon-color - Background color for a disabled, selected checkbox.
 * @cssproperty --mdc-staticcheckbox-disabled-icon-color - Icon color for a disabled checkbox.
 * @cssproperty --mdc-staticcheckbox-icon-background-color - Background color for an unselected checkbox.
 * @cssproperty --mdc-staticcheckbox-icon-border-color - Default background color for an unselected checkbox.
 * @cssproperty --mdc-staticcheckbox-icon-color - Icon color for an unselected checkbox.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StaticCheckbox",module:"components/staticcheckbox/staticcheckbox.component.js"}}]},{kind:"javascript-module",path:"components/staticchip/staticchip.component.js",declarations:[{kind:"class",description:`mdc-staticchip is an static element that can be used to represent a chip. It supports a leading icon along with label.

It is recommended to keep the label text for the chip component concise and compact.
For best results, we recommend limiting the <b>maximum length of the label text to 20 characters</b>, including empty spaces to split words.`,name:"StaticChip",cssProperties:[{description:"The color of the static chip.",name:"--mdc-chip-color"},{description:"The border color of the static chip.",name:"--mdc-chip-border-color"},{description:"The background color of the static chip.",name:"--mdc-chip-background-color"}],members:[{kind:"field",name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",attribute:"color",reflects:!0},{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,attribute:"label"},{kind:"method",name:"renderIcon",privacy:"private",description:"Renders the icon element if available.",return:{type:{text:""}}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}}],attributes:[{name:"color",type:{text:"ColorType"},description:`The color of the chip. It supports the following colors
- default
- cobalt
- gold
- lime
- mint
- orange
- pink
- purple
- slate
- violet`,default:"default",fieldName:"color"},{name:"label",type:{text:"string"},default:"''",description:`The visible label text of the chip.

We recommend limiting the <b>maximum length of the label text to 20 characters</b>,
including empty spaces to split words.`,fieldName:"label"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-staticchip",jsDoc:`/**
 * mdc-staticchip is an static element that can be used to represent a chip. It supports a leading icon along with label.
 *
 * It is recommended to keep the label text for the chip component concise and compact.
 * For best results, we recommend limiting the <b>maximum length of the label text to 20 characters</b>, including empty spaces to split words.
 *
 *
 * @tagname mdc-staticchip
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @cssproperty --mdc-chip-color - The color of the static chip.
 * @cssproperty --mdc-chip-border-color - The border color of the static chip.
 * @cssproperty --mdc-chip-background-color - The background color of the static chip.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StaticChip",module:"components/staticchip/staticchip.component.js"}}]},{kind:"javascript-module",path:"components/staticradio/staticradio.component.js",declarations:[{kind:"class",description:`This is a decorative component that is styled to look as a radio.
It has 2 properties - checked and disabled.

We are using the same styling that has been created for the \`mdc-radio\` component.`,name:"StaticRadio",cssProperties:[{description:"size of the inner circle",name:"--mdc-staticradio-inner-circle-size"},{description:"color of the label when disabled",name:"--mdc-staticradio-text-disabled-color"},{description:"color of the radio button border when normal",name:"--mdc-staticradio-normal-border-color"},{description:"color of the radio button border when disabled",name:"--mdc-staticradio-disabled-border-color"},{description:"background color of the inner circle when normal",name:"--mdc-staticradio-inner-circle-normal-background"},{description:"background color of the inner circle when disabled",name:"--mdc-staticradio-inner-circle-disabled-background"},{description:"color of the radio button when inactive",name:"--mdc-staticradio-control-inactive-color"},{description:"background color of the radio button when inactive and disabled",name:"--mdc-staticradio-control-inactive-disabled-background"},{description:"color of the radio button when active",name:"--mdc-staticradio-control-active-color"},{description:"background color of the radio button when active and disabled",name:"--mdc-staticradio-control-active-disabled-background"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the radio is selected or unselected.",attribute:"checked",reflects:!0},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"Determines whether the radio is read-only.",attribute:"readonly",reflects:!0},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the radio is selected or unselected.",fieldName:"checked"},{name:"readonly",type:{text:"boolean"},default:"false",description:"Determines whether the radio is read-only.",fieldName:"readonly"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-staticradio",jsDoc:`/**
 * This is a decorative component that is styled to look as a radio.
 * It has 2 properties - checked and disabled.
 *
 * We are using the same styling that has been created for the \`mdc-radio\` component.
 *
 * @tagname mdc-staticradio
 *
 * @cssproperty --mdc-staticradio-inner-circle-size - size of the inner circle
 * @cssproperty --mdc-staticradio-text-disabled-color - color of the label when disabled
 * @cssproperty --mdc-staticradio-normal-border-color - color of the radio button border when normal
 * @cssproperty --mdc-staticradio-disabled-border-color - color of the radio button border when disabled
 * @cssproperty --mdc-staticradio-inner-circle-normal-background - background color of the inner circle when normal
 * @cssproperty --mdc-staticradio-inner-circle-disabled-background - background color of the inner circle when disabled
 * @cssproperty --mdc-staticradio-control-inactive-color - color of the radio button when inactive
 * @cssproperty --mdc-staticradio-control-inactive-disabled-background - background color of the radio button when
 *  inactive and disabled
 * @cssproperty --mdc-staticradio-control-active-color - color of the radio button when active
 * @cssproperty --mdc-staticradio-control-active-disabled-background - background color of the radio button
 *  when active and disabled
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StaticRadio",module:"components/staticradio/staticradio.component.js"}}]},{kind:"javascript-module",path:"components/statictoggle/statictoggle.component.js",declarations:[{kind:"class",description:"This is a decorative component that is styled to look as a toggle. <br/>\nIt has 3 properties - checked, size and disabled. <br/>\nWe are using the same styling that has been created for the `mdc-toggle` component.",name:"StaticToggle",cssProperties:[{description:"Width of the toggle",name:"--mdc-statictoggle-width"},{description:"Height of the toggle",name:"--mdc-statictoggle-height"},{description:"Width of the toggle when it's size is compact",name:"--mdc-statictoggle-width-compact"},{description:"Height of the toggle when it's size is compact",name:"--mdc-statictoggle-height-compact"},{description:"Border radius of the toggle",name:"--mdc-statictoggle-border-radius"},{description:"Border radius of the toggle when it's size is compact",name:"--mdc-statictoggle-border-radius-compact"},{description:"Border of the toggle",name:"--mdc-statictoggle-border"},{description:"Background color of the inactive toggle in rest state",name:"--mdc-statictoggle-inactive-rest-color"},{description:"Background color of the inactive toggle in disabled state",name:"--mdc-statictoggle-inactive-disabled-color"},{description:"Background color of the active toggle in rest state",name:"--mdc-statictoggle-active-rest-color"},{description:"Background color of the active toggle in disabled state",name:"--mdc-statictoggle-active-disabled-color"},{description:"Color of the icon in normal state",name:"--mdc-statictoggle-icon-color-normal"},{description:"Color of the icon in disabled state",name:"--mdc-statictoggle-icon-color-disabled"},{description:"Background color of the icon in normal state",name:"--mdc-statictoggle-icon-background-color-normal"},{description:"Background color of the icon in disabled state",name:"--mdc-statictoggle-icon-background-color-disabled"}],slots:[{description:"This is a default/unnamed slot",name:"default"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the toggle is active or inactive.",attribute:"checked",reflects:!0},{kind:"field",name:"size",type:{text:"ToggleSize"},description:`Determines toggle size in rem (height is specified here).
- **Default**: 1.5
- **Compact**: 1`,default:"default",attribute:"size",reflects:!0},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the toggle is active or inactive.",fieldName:"checked"},{name:"size",type:{text:"ToggleSize"},description:`Determines toggle size in rem (height is specified here).
- **Default**: 1.5
- **Compact**: 1`,default:"default",fieldName:"size"},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"DisabledMixin",module:"src/utils/mixins/DisabledMixin.ts"}}],mixins:[{name:"DisabledMixin",module:"/src/utils/mixins/DisabledMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-statictoggle",jsDoc:`/**
 * This is a decorative component that is styled to look as a toggle. <br/>
 * It has 3 properties - checked, size and disabled. <br/>
 * We are using the same styling that has been created for the \`mdc-toggle\` component.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-statictoggle
 *
 * @slot default - This is a default/unnamed slot
 *
 * @cssproperty --mdc-statictoggle-width - Width of the toggle
 * @cssproperty --mdc-statictoggle-height - Height of the toggle
 * @cssproperty --mdc-statictoggle-width-compact - Width of the toggle when it's size is compact
 * @cssproperty --mdc-statictoggle-height-compact - Height of the toggle when it's size is compact
 * @cssproperty --mdc-statictoggle-border-radius - Border radius of the toggle
 * @cssproperty --mdc-statictoggle-border-radius-compact - Border radius of the toggle when it's size is compact
 * @cssproperty --mdc-statictoggle-border - Border of the toggle
 * @cssproperty --mdc-statictoggle-inactive-rest-color - Background color of the inactive toggle in rest state
 * @cssproperty --mdc-statictoggle-inactive-disabled-color - Background color of the inactive toggle in disabled state
 * @cssproperty --mdc-statictoggle-active-rest-color - Background color of the active toggle in rest state
 * @cssproperty --mdc-statictoggle-active-disabled-color - Background color of the active toggle in disabled state
 * @cssproperty --mdc-statictoggle-icon-color-normal - Color of the icon in normal state
 * @cssproperty --mdc-statictoggle-icon-color-disabled - Color of the icon in disabled state
 * @cssproperty --mdc-statictoggle-icon-background-color-normal - Background color of the icon in normal state
 * @cssproperty --mdc-statictoggle-icon-background-color-disabled - Background color of the icon in disabled state
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StaticToggle",module:"components/statictoggle/statictoggle.component.js"}}]},{kind:"javascript-module",path:"components/stepper/stepper.component.js",declarations:[{kind:"class",description:`Stepper component, which orchestrates stepperitem and stepperconnector components, is a wrapper for the stepper functionality.
It provides the context for the stepper items and connectors, allowing them to adapt to the stepper's orientation and variant.`,name:"Stepper",slots:[{description:"Pass the list of `mdc-stepperitem` and `mdc-stepperconnector` elements to be rendered inside the stepper.",name:"default"}],members:[{kind:"field",name:"orientation",type:{text:"OrientationType"},description:"The orientation of the stepperconnector (vertical or horizontal)",default:'"horizontal"',attribute:"orientation",reflects:!0},{kind:"field",name:"variant",type:{text:"VariantType"},description:"The variant of the stepper item, which can be `inline` or `stacked`.",default:"'inline'",attribute:"variant",reflects:!0},{kind:"field",name:"Context",privacy:"public",static:!0,description:`Get the context for the stepper component.
This context provides the orientation and variant for the stepper items and connectors.`,readonly:!0},{kind:"method",name:"updateContext",privacy:"protected",return:{type:{text:"void"}},description:`Update all observing components of this
provider to update the values

Is called on every re-render, see Provider class`}],attributes:[{name:"orientation",type:{text:"OrientationType"},description:"The orientation of the stepperconnector (vertical or horizontal)",default:'"horizontal"',fieldName:"orientation"},{name:"variant",type:{text:"VariantType"},description:"The variant of the stepper item, which can be `inline` or `stacked`.",default:"'inline'",fieldName:"variant"}],superclass:{name:"Provider",module:"/src/models"},tagName:"mdc-stepper",jsDoc:`/**
 * Stepper component, which orchestrates stepperitem and stepperconnector components, is a wrapper for the stepper functionality.
 * It provides the context for the stepper items and connectors, allowing them to adapt to the stepper's orientation and variant.
 *
 * @tagname mdc-stepper
 *
 * @slot default - Pass the list of \`mdc-stepperitem\` and \`mdc-stepperconnector\` elements to be rendered inside the stepper.
 *
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Stepper",module:"components/stepper/stepper.component.js"}}]},{kind:"javascript-module",path:"components/stepperconnector/stepperconnector.component.js",declarations:[{kind:"class",description:"StepperConnector component visually represents the connection between two stepper items.\nIndicates whether the connection is complete or incomplete, and supports vertical or horizontal orientation.\nThey are used between 2 `mdc-stepperitem` components to visually connect them and wrapped in a `mdc-stepper` component.",name:"StepperConnector",cssProperties:[{description:"Background color for the complete connector",name:"--mdc-stepperconnector-complete-background"},{description:"Background color for the incomplete connector",name:"--mdc-stepperconnector-incomplete-background"}],cssParts:[{description:"The main connector line between steps",name:"connector"}],members:[{kind:"field",name:"status",type:{text:"StatusType"},description:"The status of the connector (complete or incomplete)",default:'"incomplete"',attribute:"status",reflects:!0},{kind:"field",name:"orientation",type:{text:"OrientationType"},description:"The orientation of the connector (vertical or horizontal)",default:'"horizontal"',attribute:"orientation",reflects:!0}],attributes:[{name:"status",type:{text:"StatusType"},description:"The status of the connector (complete or incomplete)",default:'"incomplete"',fieldName:"status"},{name:"orientation",type:{text:"OrientationType"},description:"The orientation of the connector (vertical or horizontal)",default:'"horizontal"',fieldName:"orientation"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-stepperconnector",jsDoc:`/**
 * StepperConnector component visually represents the connection between two stepper items.
 * Indicates whether the connection is complete or incomplete, and supports vertical or horizontal orientation.
 * They are used between 2 \`mdc-stepperitem\` components to visually connect them and wrapped in a \`mdc-stepper\` component.
 *
 * @tagname mdc-stepperconnector
 *
 * @csspart connector - The main connector line between steps
 *
 * @cssproperty --mdc-stepperconnector-complete-background - Background color for the complete connector
 * @cssproperty --mdc-stepperconnector-incomplete-background - Background color for the incomplete connector
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StepperConnector",module:"components/stepperconnector/stepperconnector.component.js"}}]},{kind:"javascript-module",path:"components/stepperitem/stepperitem.component.js",declarations:[{kind:"class",description:"stepperitem component is used to represent a single step in a stepper component. It is used within a `mdc-stepper` component to indicate the current step in a process.\nIt can have different statuses such as `completed`, `current`, `incomplete`, `error-current`, and `error-incomplete`.\nThe component supports various visual styles and can be customized with labels, help text, and step numbers.\n\nThis is an uncontrolled component, meaning it does not manage its own state. Instead, it relies on the consumer's to manage the state of each step.\nMake sure to set `aria-current=\"step\"` on the current stepper item. It is applicable only when status is `current` or `error-current`. This ensures accessibility for the stepper component. Only one stepper item should have this attribute at a time.\n\nAdditionally, make use of `aria-label` to provide a descriptive detail about the stepper item, especially for screen readers. If this aria-label is not set, it would read out only the label text and doesn't provide enough context for the user.",name:"StepperItem",cssProperties:[{description:"The background color of the status container.",name:"--mdc-stepperitem-status-container-background"},{description:"The border color of the status container.",name:"--mdc-stepperitem-status-container-border-color"},{description:"The color of the label text.",name:"--mdc-stepperitem-label-color"},{description:"The color of the optional label text.",name:"--mdc-stepperitem-help-text-color"},{description:"The background color of the label container.",name:"--mdc-stepperitem-label-container-background"}],cssParts:[{description:"The container for the status icon or step number.",name:"status-container"},{description:"The container for the label and help text.",name:"label-container"},{description:"The container for the help text and error icon when applicable.",name:"help-text-container"},{description:"The icon representing the status of the stepper item.",name:"status-icon"},{description:"The text representing the step number.",name:"step-number"},{description:"The text representing the label of the stepper item.",name:"label"},{description:"The text providing additional information about the stepper item.",name:"help-text"},{description:"The icon representing an error in the stepper item.",name:"help-icon"}],members:[{kind:"field",name:"variant",type:{text:"VariantType"},description:"The variant of the stepper item, which can be `inline` or `stacked`.",default:"'inline'",attribute:"variant",reflects:!0},{kind:"field",name:"status",type:{text:"StatusType"},description:"The status of the stepper item, which can be `completed`, `current`, `not-started`, `error-current`, or `error-incomplete`.",default:"'not-started'",attribute:"status",reflects:!0},{kind:"field",name:"label",type:{text:"string"},default:"''",description:`The label for the stepper item, which is displayed as the main text of the step.
This label is typically used to describe the step or action that the step represents.`,attribute:"label",reflects:!0},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:`Additional informational text that appears below the label
This text is optional and can be used to provide more context or instructions for the step.`,default:"''",attribute:"help-text",reflects:!0},{kind:"field",name:"stepNumber",type:{text:"number | undefined"},description:`The step number for the stepper item, which is displayed as a numeric indicator of the step's position in the sequence.
This is useful for indicating the order of steps in a process.`,default:"''",attribute:"step-number",reflects:!0},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the stepperitem.
If the key is 'Enter' or 'Space', the stepperitem is pressed.
If the key is 'Enter', the stepperitem is pressed. The native HTML button works in the same way.
If the key is 'Space', the stepperitem's default is prevent to avoid scrolling etc in the host application.`},{kind:"method",name:"triggerClickEvent",privacy:"private",description:"Triggers a click event on the stepper item."},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the stepperitem.
If the key is 'Enter' or 'Space', the stepperitem is clicked.
If the key is 'Space', the stepperitem is pressed. The native HTML button works in the same way.`},{kind:"method",name:"renderStatusIcon",privacy:"private",description:"Renders the status icon based on the current status of the stepper item.\n- If the status is `completed`, it renders a check icon.\n- If the status is `current` or `error-current`, it renders a pencil icon.\n- If the status is `not-started` or `error-incomplete`, it renders the step number.\n- If the status is anything else, it renders nothing.",return:{type:{text:""}}},{kind:"method",name:"renderHelpText",privacy:"private",description:"Renders the help text for the stepper item.\nIf the `helpText` property is not set, it returns nothing.",return:{type:{text:""}}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}}],events:[{description:"(React: onClick) This event is dispatched when the stepperitem is clicked.",name:"click",reactName:"onClick"},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the stepperitem.",name:"keydown",reactName:"onKeyDown"},{description:"(React: onKeyUp) This event is dispatched when a key is released on the stepperitem.",name:"keyup",reactName:"onKeyUp"}],attributes:[{name:"variant",type:{text:"VariantType"},description:"The variant of the stepper item, which can be `inline` or `stacked`.",default:"'inline'",fieldName:"variant"},{name:"status",type:{text:"StatusType"},description:"The status of the stepper item, which can be `completed`, `current`, `not-started`, `error-current`, or `error-incomplete`.",default:"'not-started'",fieldName:"status"},{name:"label",type:{text:"string"},default:"''",description:`The label for the stepper item, which is displayed as the main text of the step.
This label is typically used to describe the step or action that the step represents.`,fieldName:"label"},{name:"help-text",type:{text:"string | undefined"},description:`Additional informational text that appears below the label
This text is optional and can be used to provide more context or instructions for the step.`,default:"''",fieldName:"helpText"},{name:"step-number",type:{text:"number | undefined"},description:`The step number for the stepper item, which is displayed as a numeric indicator of the step's position in the sequence.
This is useful for indicating the order of steps in a process.`,default:"''",fieldName:"stepNumber"},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"TabIndexMixin",module:"src/utils/mixins/TabIndexMixin.ts"}}],mixins:[{name:"TabIndexMixin",module:"/src/utils/mixins/TabIndexMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-stepperitem",jsDoc:`/**
 * stepperitem component is used to represent a single step in a stepper component. It is used within a \`mdc-stepper\` component to indicate the current step in a process.
 * It can have different statuses such as \`completed\`, \`current\`, \`incomplete\`, \`error-current\`, and \`error-incomplete\`.
 * The component supports various visual styles and can be customized with labels, help text, and step numbers.
 *
 * This is an uncontrolled component, meaning it does not manage its own state. Instead, it relies on the consumer's to manage the state of each step.
 * Make sure to set \`aria-current="step"\` on the current stepper item. It is applicable only when status is \`current\` or \`error-current\`. This ensures accessibility for the stepper component. Only one stepper item should have this attribute at a time.
 *
 * Additionally, make use of \`aria-label\` to provide a descriptive detail about the stepper item, especially for screen readers. If this aria-label is not set, it would read out only the label text and doesn't provide enough context for the user.
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @tagname mdc-stepperitem
 *
 * @event click - (React: onClick) This event is dispatched when the stepperitem is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the stepperitem.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the stepperitem.
 *
 * @csspart status-container - The container for the status icon or step number.
 * @csspart label-container - The container for the label and help text.
 * @csspart help-text-container - The container for the help text and error icon when applicable.
 * @csspart status-icon - The icon representing the status of the stepper item.
 * @csspart step-number - The text representing the step number.
 * @csspart label - The text representing the label of the stepper item.
 * @csspart help-text - The text providing additional information about the stepper item.
 * @csspart help-icon - The icon representing an error in the stepper item.
 *
 * @cssproperty --mdc-stepperitem-status-container-background - The background color of the status container.
 * @cssproperty --mdc-stepperitem-status-container-border-color - The border color of the status container.
 * @cssproperty --mdc-stepperitem-label-color - The color of the label text.
 * @cssproperty --mdc-stepperitem-help-text-color - The color of the optional label text.
 * @cssproperty --mdc-stepperitem-label-container-background - The background color of the label container.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"StepperItem",module:"components/stepperitem/stepperitem.component.js"}}]},{kind:"javascript-module",path:"components/tab/tab.component.js",declarations:[{kind:"class",description:'`mdc-tab` is Tab component to be used within the Tabgroup.\n\nPassing in the attribute `text` to the tab component is changing the text displayed in the tab.\n\nPass attribute `tabid` when using inside of `tablist` component.\n\nThe `slot="badge"` can be used to add a badge to the tab.\n\nThe `slot="chip"` can be used to add a chip to the tab.\n\nFor `icon`, the `mdc-icon` component is used to render the icon.\n\nNote: Icons can be used in conjunction with badges or chips.\nBadges and chips should not be used at the same time.',name:"Tab",cssProperties:[{description:"Gap between the badge(if provided), icon and text.",name:"--mdc-tab-content-gap"},{description:"Height of the tab.",name:"--mdc-tab-height"},{description:"Background color for active glass tab in disabled state.",name:"--mdc-tab-glass-active-background-color-disabled"},{description:"Background color for active glass tab in hover state.",name:"--mdc-tab-glass-active-background-color-hover"},{description:"Background color for active glass tab in rest state.",name:"--mdc-tab-glass-active-background-color-normal"},{description:"Background color for active glass tab in pressed state.",name:"--mdc-tab-glass-active-background-color-pressed"},{description:"Text and icon color for active glass tab.",name:"--mdc-tab-glass-active-color"},{description:"Text and icon color for active glass tab in disabled state.",name:"--mdc-tab-glass-active-color-disabled"},{description:"Border radius for glass tab.",name:"--mdc-tab-glass-border-radius"},{description:"Background color for inactive glass tab in disabled state.",name:"--mdc-tab-glass-inactive-background-color-disabled"},{description:"Background color for inactive glass tab in hover state.",name:"--mdc-tab-glass-inactive-background-color-hover"},{description:"Background color for inactive glass tab in rest state.",name:"--mdc-tab-glass-inactive-background-color-normal"},{description:"Background color for inactive glass tab in pressed state.",name:"--mdc-tab-glass-inactive-background-color-pressed"},{description:"Text and icon color for inactive glass tab.",name:"--mdc-tab-glass-inactive-color"},{description:"Text and icon color for inactive glass tab in disabled state.",name:"--mdc-tab-glass-inactive-color-disabled"},{description:"Background color for active line tab in pressed state.",name:"--mdc-tab-line-active-background-color-pressed"},{description:"Background color for active line tab in disabled state.",name:"--mdc-tab-line-active-background-color-disabled"},{description:"Background color for active line tab in hover state.",name:"--mdc-tab-line-active-background-color-hover"},{description:"Background color for active line tab in rest state.",name:"--mdc-tab-line-active-background-color-normal"},{description:"Text and icon color for active line tab.",name:"--mdc-tab-line-active-color"},{description:"Text and icon color for active line tab in disabled state.",name:"--mdc-tab-line-active-color-disabled"},{description:"color for indicator in active line tab.",name:"--mdc-tab-line-active-indicator-color"},{description:"Color for indicator in active line tab in disabled state.",name:"--mdc-tab-line-active-indicator-color-disabled"},{description:"Height for indicator in active line tab.",name:"--mdc-tab-line-active-indicator-height"},{description:"Width for indicator in active line tab.",name:"--mdc-tab-line-active-indicator-width"},{description:"Bottom left border radius for line tab.",name:"--mdc-tab-line-border-bottom-left-radius"},{description:"Bottom right border radius for line tab.",name:"--mdc-tab-line-border-bottom-right-radius"},{description:"Top left border radius for line tab.",name:"--mdc-tab-line-border-top-left-radius"},{description:"Top right border radius for line tab.",name:"--mdc-tab-line-border-top-right-radius"},{description:"Background color for inactive line tab in pressed state.",name:"--mdc-tab-line-inactive-background-color-pressed"},{description:"Background color for inactive line tab in disabled state",name:"--mdc-tab-line-inactive-background-color-disabled"},{description:"Background color for inactive line tab in hover state.",name:"--mdc-tab-line-inactive-background-color-hover"},{description:"Background color for inactive line tab in rest state.",name:"--mdc-tab-line-inactive-background-color-normal"},{description:"Text and icon color for inactive line tab.",name:"--mdc-tab-line-inactive-color"},{description:"Text and icon color for inactive line tab in disabled state.",name:"--mdc-tab-line-inactive-color-disabled"},{description:"Padding left for the tab.",name:"--mdc-tab-padding-left"},{description:"Padding right for the tab.",name:"--mdc-tab-padding-right"},{description:"Background color for active pill tab in pressed state.",name:"--mdc-tab-pill-active-background-color-pressed"},{description:"Background color for active pill tab in disabled state.",name:"--mdc-tab-pill-active-background-color-disabled"},{description:"Background color for active pill tab in hover state.",name:"--mdc-tab-pill-active-background-color-hover"},{description:"Background color for active pill tab in rest state.",name:"--mdc-tab-pill-active-background-color-normal"},{description:"Text and icon color for active pill tab.",name:"--mdc-tab-pill-active-color"},{description:"Text and icon color for active pill tab in disabled state.",name:"--mdc-tab-pill-active-color-disabled"},{description:"Border radius for pill tab.",name:"--mdc-tab-pill-border-radius"},{description:"Background color for inactive pill tab in pressed state.",name:"--mdc-tab-pill-inactive-background-color-pressed"},{description:"Background color for inactive pill tab in disabled state.",name:"--mdc-tab-pill-inactive-background-color-disabled"},{description:"Background color for inactive pill tab in hover state.",name:"--mdc-tab-pill-inactive-background-color-hover"},{description:"Background color for inactive pill tab in rest state.",name:"--mdc-tab-pill-inactive-background-color-normal"},{description:"Text and icon color for inactive pill tab.",name:"--mdc-tab-pill-inactive-color"},{description:"Text and icon color for inactive pill tab in disabled state.",name:"--mdc-tab-pill-inactive-color-disabled"}],members:[{kind:"field",name:"active",type:{text:"boolean | undefined"},description:`The tab's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the tab is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the tab is in an inactive state, indicating it is toggled off.

This attribute also controls the "aria-selected" attribute of the tab.
When the tab is active, "aria-selected" is set to true, indicating that the tab is selected.
When the tab is inactive, "aria-selected" is set to false, indicating that the tab is not selected.`,default:"false",attribute:"active",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"text",type:{text:"string | undefined"},description:"Text to be displayed in the tab.\nIf no `text` is provided, no text will be rendered,\n`aria-label` should be set on the tab.",attribute:"text",reflects:!0},{kind:"field",name:"variant",type:{text:"Variant"},description:"Tab can have three variants:\n- `glass`\n- `line`\n- `pill`\n\nIt defines the background and foreground color of the tab.",default:"pill",attribute:"variant",reflects:!0},{kind:"field",name:"tabId",type:{text:"string | undefined"},description:`Id of the tab (used as a identificator when used in the tablist)
Note: has to be unique!`,default:"undefined",attribute:"tab-id",reflects:!0},{kind:"method",name:"modifyIconName",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"active",type:{text:"boolean"},description:"The active state."}],description:`Modifies the icon name based on the active state.
If the tab is active, the icon name is suffixed with '-filled'.
If the tab is inactive, the icon name is restored to its original value.
If '-filled' icon is not available, the icon name remains unchanged.`},{kind:"method",name:"setVariant",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"variant",type:{text:"Variant"},description:"The variant to set."}],description:`Sets the variant attribute for the tab component.
If the provided variant is not included in the TAB_VARIANTS,
it defaults to the value specified in DEFAULTS.VARIANT.`},{kind:"field",name:"handleTabActiveChange",privacy:"private",description:"Dispatch the activechange event.",parameters:[{description:"The active state of the tab.",name:"active"}]},{kind:"method",name:"setActive",privacy:"protected",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The tab element."},{name:"active",type:{text:"boolean"},description:"The active state of the tab."}],description:`Sets the aria-selected attribute based on the active state of the Tab.
If the tab is active, the filled version of the icon is displayed,
else the icon is restored to its original value.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"executeAction",privacy:"protected",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",inheritedFrom:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"softDisabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",attribute:"soft-disabled",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",attribute:"size",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",attribute:"role",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",attribute:"ariaStateKey",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",attribute:"type",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,attribute:"name",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"field",name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,attribute:"value",reflects:!0,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setSoftDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"softDisabled",optional:!0,type:{text:"boolean"},description:"The soft-disabled state."}],description:`Sets the soft-disabled attribute for the button.
When soft-disabled, the button looks to be disabled but remains focusable and clickable.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"setDisabled",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The button element."},{name:"disabled",type:{text:"boolean"},description:"The disabled state."}],description:`Sets the disabled attribute for the button.
When disabled, the button is not focusable or clickable, and tabindex is set to -1.
The previous tabindex is stored and restored when enabled.
Also sets/removes aria-disabled attribute.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"triggerClickEvent",privacy:"private",inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleBlur",privacy:"private",description:`In case the button is pressed and the focus is lost while pressing,
the pressed class is removed.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyDown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the button.
If the key is 'Enter' or 'Space', the button is pressed.
If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
If the key is 'Space', the button's default is prevent to avoid scrolling etc in the host application.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}},{kind:"method",name:"handleKeyUp",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keyup event on the button.
If the key is 'Enter' or 'Space', the button is clicked.
If the key is 'Space', the button is pressed. The native HTML button works in the same way.`,inheritedFrom:{name:"Buttonsimple",module:"components/buttonsimple/buttonsimple.component.js"}}],events:[{description:"(React: onClick) This event is dispatched when the tab is clicked.",name:"click",reactName:"onClick",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyDown) This event is dispatched when a key is pressed down on the tab.",name:"keydown",reactName:"onKeyDown",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onKeyUp) This event is dispatched when a key is released on the tab.",name:"keyup",reactName:"onKeyUp",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onFocus) This event is dispatched when the tab receives focus.",name:"focus",reactName:"onFocus",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{description:"(React: onActiveChange) This event is dispatched when the active state of the tab changes <br /> Event Data: `detail: { tabId: this.tabId, active }` <br /> Note: the activechange event is used by the tab list component to react to the change in state of the tab, so this event won't be needed if the tab list is used.",name:"activechange",reactName:"onActiveChange"}],attributes:[{name:"active",type:{text:"boolean | undefined"},description:`The tab's active state indicates whether it is currently toggled on (active) or off (inactive).
When the active state is true, the tab is considered to be in an active state, meaning it is toggled on.
Conversely, when the active state is false, the tab is in an inactive state, indicating it is toggled off.

This attribute also controls the "aria-selected" attribute of the tab.
When the tab is active, "aria-selected" is set to true, indicating that the tab is selected.
When the tab is inactive, "aria-selected" is set to false, indicating that the tab is not selected.`,default:"false",fieldName:"active",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"text",type:{text:"string | undefined"},description:"Text to be displayed in the tab.\nIf no `text` is provided, no text will be rendered,\n`aria-label` should be set on the tab.",fieldName:"text"},{name:"variant",type:{text:"Variant"},description:"Tab can have three variants:\n- `glass`\n- `line`\n- `pill`\n\nIt defines the background and foreground color of the tab.",default:"pill",fieldName:"variant"},{name:"tab-id",type:{text:"string | undefined"},description:`Id of the tab (used as a identificator when used in the tablist)
Note: has to be unique!`,default:"undefined",fieldName:"tabId"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName",inheritedFrom:{name:"IconNameMixin",module:"src/utils/mixins/IconNameMixin.ts"}},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"soft-disabled",type:{text:"boolean | undefined"},description:`Indicates whether the button is soft disabled.
When set to \`true\`, the button appears visually disabled but still allows
focus, click, and keyboard actions to be passed through.

**Important:** When using soft disabled, consumers must ensure that
the button behaves like a disabled button, allowing only focus and
preventing any interactions (clicks or keyboard actions) from triggering unintended actions.`,default:"undefined",fieldName:"softDisabled",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"size",type:{text:"ButtonSize"},description:"Simplebutton size is a super set of all the sizes supported by children components.",default:"32",fieldName:"size",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"role",type:{text:"RoleType"},description:`This property defines the ARIA role for the element. By default, it is set to 'button'.
Consumers should override this role when:
- The element is being used in a context where a different role is more appropriate.
- Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.`,default:"button",fieldName:"role",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"ariaStateKey",type:{text:"string | undefined"},description:`This property defines the ARIA state key, which will be toggled when the
Button is set to \`active\`.
The default value is 'aria-pressed', which is commonly used for toggle buttons.

Consumers can override this property to use a different ARIA state key if needed.
In case multiple aria attributes should be toggled, they can be passed in as
a comma separated string.
For example: \`aria-pressed,aria-expanded\``,default:"'aria-pressed' (when)",fieldName:"ariaStateKey",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"type",type:{text:"ButtonType"},description:`This property defines the type attribute for the button element.
The type attribute specifies the behavior of the button when it is clicked.
- **submit**: The button submits the form data to the server.
- **reset**: The button resets the form data to its initial state.
- **button**: The button does nothing when clicked.`,default:"button",fieldName:"type",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"name",type:{text:"string | undefined"},description:`The name of the button, submitted as a pair with the button's value as part of the form data,
when that button is used to submit the form.`,fieldName:"name",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}},{name:"value",type:{text:"string | undefined"},description:`Defines the value associated with the button's name when it's submitted with the form data.
This value is passed to the server in params when the form is submitted using this button.`,fieldName:"value",inheritedFrom:{name:"Buttonsimple",module:"src/components/buttonsimple/buttonsimple.component.ts"}}],mixins:[{name:"IconNameMixin",module:"/src/utils/mixins/IconNameMixin"}],superclass:{name:"Buttonsimple",module:"/src/components/buttonsimple/buttonsimple.component"},tagName:"mdc-tab",jsDoc:`/**
 * \`mdc-tab\` is Tab component to be used within the Tabgroup.
 *
 * Passing in the attribute \`text\` to the tab component is changing the text displayed in the tab.
 *
 * Pass attribute \`tabid\` when using inside of \`tablist\` component.
 *
 * The \`slot="badge"\` can be used to add a badge to the tab.
 *
 * The \`slot="chip"\` can be used to add a chip to the tab.
 *
 * For \`icon\`, the \`mdc-icon\` component is used to render the icon.
 *
 * Note: Icons can be used in conjunction with badges or chips.
 * Badges and chips should not be used at the same time.
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 *
 * @event click - (React: onClick) This event is dispatched when the tab is clicked.
 * @event keydown - (React: onKeyDown) This event is dispatched when a key is pressed down on the tab.
 * @event keyup - (React: onKeyUp) This event is dispatched when a key is released on the tab.
 * @event focus - (React: onFocus) This event is dispatched when the tab receives focus.
 * @event activechange - (React: onActiveChange) This event is dispatched when the active state of the tab changes
 * <br />
 * Event Data: \`detail: { tabId: this.tabId, active }\`
 * <br />
 * Note: the activechange event is used by the tab list component to react to the change in state of the tab,
 * so this event won't be needed if the tab list is used.
 *
 * @tagname mdc-tab
 *
 * @cssproperty --mdc-tab-content-gap - Gap between the badge(if provided), icon and text.
 * @cssproperty --mdc-tab-height - Height of the tab.
 * @cssproperty --mdc-tab-glass-active-background-color-disabled - Background color for active glass tab
 *  in disabled state.
 * @cssproperty --mdc-tab-glass-active-background-color-hover - Background color for active glass tab in hover state.
 * @cssproperty --mdc-tab-glass-active-background-color-normal - Background color for active glass tab in rest state.
 * @cssproperty --mdc-tab-glass-active-background-color-pressed - Background color for active glass tab
 *  in pressed state.
 * @cssproperty --mdc-tab-glass-active-color - Text and icon color for active glass tab.
 * @cssproperty --mdc-tab-glass-active-color-disabled - Text and icon color for active glass tab in disabled state.
 * @cssproperty --mdc-tab-glass-border-radius - Border radius for glass tab.
 * @cssproperty --mdc-tab-glass-inactive-background-color-disabled - Background color for inactive glass tab
 *  in disabled state.
 * @cssproperty --mdc-tab-glass-inactive-background-color-hover - Background color for inactive glass tab
 *  in hover state.
 * @cssproperty --mdc-tab-glass-inactive-background-color-normal - Background color for inactive glass tab
 *  in rest state.
 * @cssproperty --mdc-tab-glass-inactive-background-color-pressed - Background color for inactive glass tab
 *  in pressed state.
 * @cssproperty --mdc-tab-glass-inactive-color - Text and icon color for inactive glass tab.
 * @cssproperty --mdc-tab-glass-inactive-color-disabled - Text and icon color for inactive glass tab in disabled state.
 * @cssproperty --mdc-tab-line-active-background-color-pressed - Background color for active line tab in pressed state.
 * @cssproperty --mdc-tab-line-active-background-color-disabled - Background color for active line tab
 *  in disabled state.
 * @cssproperty --mdc-tab-line-active-background-color-hover - Background color for active line tab in hover state.
 * @cssproperty --mdc-tab-line-active-background-color-normal - Background color for active line tab in rest state.
 * @cssproperty --mdc-tab-line-active-color - Text and icon color for active line tab.
 * @cssproperty --mdc-tab-line-active-color-disabled - Text and icon color for active line tab in disabled state.
 * @cssproperty --mdc-tab-line-active-indicator-color - color for indicator in active line tab.
 * @cssproperty --mdc-tab-line-active-indicator-color-disabled - Color for indicator in active line tab
 *  in disabled state.
 * @cssproperty --mdc-tab-line-active-indicator-height - Height for indicator in active line tab.
 * @cssproperty --mdc-tab-line-active-indicator-width - Width for indicator in active line tab.
 * @cssproperty --mdc-tab-line-border-bottom-left-radius - Bottom left border radius for line tab.
 * @cssproperty --mdc-tab-line-border-bottom-right-radius - Bottom right border radius for line tab.
 * @cssproperty --mdc-tab-line-border-top-left-radius - Top left border radius for line tab.
 * @cssproperty --mdc-tab-line-border-top-right-radius - Top right border radius for line tab.
 * @cssproperty --mdc-tab-line-inactive-background-color-pressed - Background color for inactive line tab
 *  in pressed state.
 * @cssproperty --mdc-tab-line-inactive-background-color-disabled - Background color for inactive line tab
 *  in disabled state
 * @cssproperty --mdc-tab-line-inactive-background-color-hover - Background color for inactive line tab in hover state.
 * @cssproperty --mdc-tab-line-inactive-background-color-normal - Background color for inactive line tab
 *  in rest state.
 * @cssproperty --mdc-tab-line-inactive-color - Text and icon color for inactive line tab.
 * @cssproperty --mdc-tab-line-inactive-color-disabled - Text and icon color for inactive line tab in disabled state.
 * @cssproperty --mdc-tab-padding-left - Padding left for the tab.
 * @cssproperty --mdc-tab-padding-right - Padding right for the tab.
 * @cssproperty --mdc-tab-pill-active-background-color-pressed - Background color for active pill tab in pressed state.
 * @cssproperty --mdc-tab-pill-active-background-color-disabled - Background color for active pill tab
 *  in disabled state.
 * @cssproperty --mdc-tab-pill-active-background-color-hover - Background color for active pill tab in hover state.
 * @cssproperty --mdc-tab-pill-active-background-color-normal - Background color for active pill tab in rest state.
 * @cssproperty --mdc-tab-pill-active-color - Text and icon color for active pill tab.
 * @cssproperty --mdc-tab-pill-active-color-disabled - Text and icon color for active pill tab in disabled state.
 * @cssproperty --mdc-tab-pill-border-radius - Border radius for pill tab.
 * @cssproperty --mdc-tab-pill-inactive-background-color-pressed - Background color for inactive pill tab
 *  in pressed state.
 * @cssproperty --mdc-tab-pill-inactive-background-color-disabled - Background color for inactive pill tab
 *  in disabled state.
 * @cssproperty --mdc-tab-pill-inactive-background-color-hover - Background color for inactive pill tab in hover state.
 * @cssproperty --mdc-tab-pill-inactive-background-color-normal - Background color for inactive pill tab in rest state.
 * @cssproperty --mdc-tab-pill-inactive-color - Text and icon color for inactive pill tab.
 * @cssproperty --mdc-tab-pill-inactive-color-disabled - Text and icon color for inactive pill tab in disabled state.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Tab",module:"components/tab/tab.component.js"}}]},{kind:"javascript-module",path:"components/tablist/tablist.component.js",declarations:[{kind:"class",description:"Tab list organizes tabs into a container.\n\nChildren of the tab list are `mdc-tab` elements, sent to the default slot.\n\nThe tabs can be navigated using the left/right arrow keys, and selected by clicking,\n or pressing the Enter and Space keys.\n\n**Implicit accessibility rules**\n\n- The element that serves as the container for the set of tabs has role `tablist`.\n- Each element that serves as a tab has role `tab` and is contained within the element with role `tablist`.\n- The active tab element has the state `aria-selected` set to `true`\n  and all other tab elements have it set to `false`.\n\n\n**Accessibility notes for consuming (have to be explicitly set when you consume the component)**\n\n- Each element that contains the `content panel` for a `tab` has role `tabpanel`.\n- The `tablist` element needs to have a label provided by `data-aria-label`.\n- Each element with role `tab` has the property `aria-controls`\n that should refer to its associated `tabpanel` element.\n- Each element with role `tabpanel` has the property `aria-labelledby` referring to its associated `tab` element.\n- If a `tab` element has a popup menu, it needs to have the property `aria-haspopup` set to either `menu` or `true`.",name:"TabList",cssProperties:[{description:"Gap between tabs",name:"--mdc-tablist-gap"},{description:"Width of the tablist",name:"--mdc-tablist-width"},{description:"Margin value for the arrow button",name:"--mdc-tablist-arrow-button-margin"}],slots:[{description:"slot for mdc-tab elements.",name:"Default"}],members:[{kind:"field",name:"activeTabId",type:{text:"string | undefined"},description:"ID of the active tab, defaults to the first tab if not provided",attribute:"active-tab-id",reflects:!0},{kind:"field",name:"dataAriaLabel",type:{text:"string | undefined"},description:`Label for the tablist.
This is used when the tablist does not have a visible label.`,attribute:"data-aria-label"}],events:[{description:"(React: onChange) This event is dispatched when the tab is selected. Event that fires when user changes the active tab. The function sent as the argument will receive the fired event and the new tab id can be fetched from event.detail.tabId. `(event: CustomEvent) => handleTabChange(event.detail.tabId);`",name:"change",reactName:"onChange"}],attributes:[{name:"active-tab-id",type:{text:"string | undefined"},description:"ID of the active tab, defaults to the first tab if not provided",fieldName:"activeTabId"},{name:"data-aria-label",type:{text:"string | undefined"},description:`Label for the tablist.
This is used when the tablist does not have a visible label.`,fieldName:"dataAriaLabel"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-tablist",jsDoc:"/**\n * Tab list organizes tabs into a container.\n *\n * Children of the tab list are `mdc-tab` elements, sent to the default slot.\n *\n * The tabs can be navigated using the left/right arrow keys, and selected by clicking,\n *  or pressing the Enter and Space keys.\n *\n * **Implicit accessibility rules**\n *\n * - The element that serves as the container for the set of tabs has role `tablist`.\n * - Each element that serves as a tab has role `tab` and is contained within the element with role `tablist`.\n * - The active tab element has the state `aria-selected` set to `true`\n *   and all other tab elements have it set to `false`.\n *\n *\n * **Accessibility notes for consuming (have to be explicitly set when you consume the component)**\n *\n * - Each element that contains the `content panel` for a `tab` has role `tabpanel`.\n * - The `tablist` element needs to have a label provided by `data-aria-label`.\n * - Each element with role `tab` has the property `aria-controls`\n *  that should refer to its associated `tabpanel` element.\n * - Each element with role `tabpanel` has the property `aria-labelledby` referring to its associated `tab` element.\n * - If a `tab` element has a popup menu, it needs to have the property `aria-haspopup` set to either `menu` or `true`.\n *\n * @tagname mdc-tablist\n *\n * @dependency mdc-tab\n * @dependency mdc-button\n *\n * @event change - (React: onChange) This event is dispatched when the tab is selected.\n * Event that fires when user changes the active tab.\n *     The function sent as the argument will receive the fired event\n *      and the new tab id can be fetched from event.detail.tabId.\n *\n *    `(event: CustomEvent) => handleTabChange(event.detail.tabId);`\n *\n * @slot Default slot for mdc-tab elements.\n *\n * @cssproperty --mdc-tablist-gap - Gap between tabs\n * @cssproperty --mdc-tablist-width - Width of the tablist\n * @cssproperty  --mdc-tablist-arrow-button-margin - Margin value for the arrow button\n */",customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"TabList",module:"components/tablist/tablist.component.js"}}]},{kind:"javascript-module",path:"components/text/text.component.js",declarations:[{kind:"class",description:"Text component for creating styled text elements.\nIt has to be mounted within the ThemeProvider to access color and font tokens.\n\nThe `type` attribute allows changing the text style.\nThe `tagname` attribute allows changing the tag name of the text element.\nThe default tag name is `p`.\n\nThe `tagname` attribute should be a valid HTML tag name.\nIf the `tagname` attribute is not a valid HTML tag name, the default tag name will be used.\n\nThe styling is applied based on the `type` attribute.",name:"Text",cssParts:[{description:"The text element",name:"text"}],slots:[{description:"Default slot for text content",name:""}],members:[{kind:"field",name:"type",type:{text:"TextType"},privacy:"public",description:`Specifies the text style to be applied.

Acceptable values include:

- 'body-small-regular'
- 'body-small-medium'
- 'body-small-bold'
- 'body-midsize-regular'
- 'body-midsize-medium'
- 'body-midsize-bold'
- 'body-large-regular'
- 'body-large-medium'
- 'body-large-bold'
- 'body-small-regular-underline'
- 'body-small-medium-underline'
- 'body-midsize-regular-underline'
- 'body-midsize-medium-underline'
- 'body-large-regular-underline'
- 'body-large-medium-underline'
- 'heading-small-regular'
- 'heading-small-medium'
- 'heading-small-bold'
- 'heading-midsize-regular'
- 'heading-midsize-medium'
- 'heading-midsize-bold'
- 'heading-large-regular'
- 'heading-large-medium'
- 'heading-large-bold'
- 'heading-xlarge-regular'
- 'heading-xlarge-medium'
- 'heading-xlarge-bold'
- 'headline-small-light'
- 'headline-small-regular'`,default:"body-midsize-medium",attribute:"type",reflects:!0},{kind:"field",name:"tagname",type:{text:"TagName | undefined"},privacy:"public",description:`Specifies the HTML tag name for the text element. The default tag name is \`p\`.
This attribute is optional. When set, it changes the tag name of the text element.

Acceptable values include:

- 'h1'
- 'h2'
- 'h3'
- 'h4'
- 'h5'
- 'h6'
- 'p'
- 'small'
- 'span'
- 'div'

For instance, setting this attribute to \`h2\` will render the text element as an \`h2\` element.
Note that the styling is determined by the \`type\` attribute.`,attribute:"tagname",reflects:!0}],attributes:[{name:"type",type:{text:"TextType"},description:`Specifies the text style to be applied.

Acceptable values include:

- 'body-small-regular'
- 'body-small-medium'
- 'body-small-bold'
- 'body-midsize-regular'
- 'body-midsize-medium'
- 'body-midsize-bold'
- 'body-large-regular'
- 'body-large-medium'
- 'body-large-bold'
- 'body-small-regular-underline'
- 'body-small-medium-underline'
- 'body-midsize-regular-underline'
- 'body-midsize-medium-underline'
- 'body-large-regular-underline'
- 'body-large-medium-underline'
- 'heading-small-regular'
- 'heading-small-medium'
- 'heading-small-bold'
- 'heading-midsize-regular'
- 'heading-midsize-medium'
- 'heading-midsize-bold'
- 'heading-large-regular'
- 'heading-large-medium'
- 'heading-large-bold'
- 'heading-xlarge-regular'
- 'heading-xlarge-medium'
- 'heading-xlarge-bold'
- 'headline-small-light'
- 'headline-small-regular'`,default:"body-midsize-medium",fieldName:"type"},{name:"tagname",type:{text:"TagName | undefined"},description:`Specifies the HTML tag name for the text element. The default tag name is \`p\`.
This attribute is optional. When set, it changes the tag name of the text element.

Acceptable values include:

- 'h1'
- 'h2'
- 'h3'
- 'h4'
- 'h5'
- 'h6'
- 'p'
- 'small'
- 'span'
- 'div'

For instance, setting this attribute to \`h2\` will render the text element as an \`h2\` element.
Note that the styling is determined by the \`type\` attribute.`,fieldName:"tagname"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-text",jsDoc:`/**
 * Text component for creating styled text elements.
 * It has to be mounted within the ThemeProvider to access color and font tokens.
 *
 * The \`type\` attribute allows changing the text style.
 * The \`tagname\` attribute allows changing the tag name of the text element.
 * The default tag name is \`p\`.
 *
 * The \`tagname\` attribute should be a valid HTML tag name.
 * If the \`tagname\` attribute is not a valid HTML tag name, the default tag name will be used.
 *
 * The styling is applied based on the \`type\` attribute.
 *
 * @tagname mdc-text
 * @slot - Default slot for text content
 *
 * @csspart text - The text element
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Text",module:"components/text/text.component.js"}}]},{kind:"javascript-module",path:"components/textarea/textarea.component.js",declarations:[{kind:"class",description:`mdc-textarea component, which is used to get the multi-line text input from the user.
It contains:
- label: It is the title of the textarea field.
- required: A boolean attribute depicting that the textarea field is required.
- Textarea: It is the multi-line text input field.
- helper-text: It is the text that provides additional information about the textarea field.
- max-character-limit: It is the text that shows the character count of the textarea field.
- Error, Warning, Success, Priority Help Text type: It is the text that provides additional information
  about the textarea field based on the validation state.
- limitexceeded: It is the event that is dispatched when the character limit exceeds or restored.
  This event exposes 3 properties:
  - currentCharacterCount - the current number of characters in the textarea field,
  - maxCharacterLimit - the maximum number of characters allowed in the textarea field,
  - value - the current value of the textarea field,

**Note**: Consumers must set the help-text-type with 'error' and
help-text attribute with the error message using limitexceeded event.
The same help-text value will be used for the validation message to be displayed.`,name:"Textarea",cssProperties:[{description:"Border color for the textarea container when disabled",name:"--mdc-textarea-disabled-border-color"},{description:"Text color for the textarea field when disabled",name:"--mdc-textarea-disabled-text-color"},{description:"Background color for the textarea field when disabled",name:"--mdc-textarea-disabled-background-color"},{description:"Text color for the textarea field",name:"--mdc-textarea-text-color"},{description:"Background color for the textarea field",name:"--mdc-textarea-background-color"},{description:"Border color for the textarea field",name:"--mdc-textarea-border-color"},{description:"Text color for the character counter",name:"--mdc-textarea-text-secondary-normal"},{description:"Border color for the error related help text",name:"--mdc-textarea-error-border-color"},{description:"Border color for the warning related help text",name:"--mdc-textarea-warning-border-color"},{description:"Border color for the success related help text",name:"--mdc-textarea-success-border-color"},{description:"Border color for the priority related help text",name:"--mdc-textarea-primary-border-color"},{description:"Background color for the textarea container when hover",name:"--mdc-textarea-hover-background-color"},{description:"Background color for the textarea container when focused",name:"--mdc-textarea-focused-background-color"},{description:"Border color for the textarea container when focused",name:"--mdc-textarea-focused-border-color"}],members:[{kind:"field",name:"placeholder",type:{text:"string | undefined"},description:"The placeholder text that is displayed when the textarea field is empty.",attribute:"placeholder"},{kind:"field",name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the textarea field. If true, the textarea field is read-only.",attribute:"readonly"},{kind:"field",name:"rows",type:{text:"number | undefined"},description:"The rows attribute specifies the visible number of lines in a text area.",default:"5",attribute:"rows"},{kind:"field",name:"cols",type:{text:"number | undefined"},description:"The cols attribute specifies the visible number of lines in a text area.",default:"40",attribute:"cols"},{kind:"field",name:"wrap",type:{text:"WrapType"},description:"The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form.",default:"'soft'",attribute:"wrap"},{kind:"field",name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the textarea field.",default:"'off'",attribute:"autocapitalize"},{kind:"field",name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the textarea field.",default:"'off'",attribute:"autocomplete"},{kind:"field",name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',attribute:"dirname"},{kind:"field",name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the textarea field can accept.",attribute:"maxlength"},{kind:"field",name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the textarea field can accept.",attribute:"minlength"},{kind:"field",name:"maxCharacterLimit",type:{text:"number | undefined"},description:"maximum character limit for the textarea field for character counter.",attribute:"max-character-limit"},{kind:"field",name:"characterLimitExceedingFired",type:{text:"boolean"},privacy:"private",default:"false"},{kind:"field",name:"textarea",type:{text:"HTMLTextAreaElement"},privacy:"protected",readonly:!0},{kind:"method",name:"setTextareaValidity",privacy:"private"},{kind:"method",name:"handleValueChange",description:`Handles the value change of the textarea field.
Sets the form value and updates the validity of the textarea field.`,return:{type:{text:""}}},{kind:"method",name:"dispatchCharacterOverflowStateChangeEvent",privacy:"private",description:"Dispatches the character overflow state change event.",return:{type:{text:""}}},{kind:"method",name:"handleCharacterOverflowStateChange",privacy:"private",description:`Handles the character overflow state change.
Dispatches the character overflow state change event if the character limit is exceeded or restored.`,return:{type:{text:""}}},{kind:"method",name:"updateValue",privacy:"private",description:`Updates the value of the textarea field.
Sets the form value.`,return:{type:{text:""}}},{kind:"method",name:"onChange",privacy:"private",parameters:[{name:"event",type:{text:"Event"},description:"Event which contains information about the value change."}],description:`Handles the change event of the textarea field.
Updates the value and sets the validity of the textarea field.

The 'change' event does not bubble up through the shadow DOM as it was not composed.
Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`},{kind:"method",name:"renderCharacterCounter",privacy:"protected"},{kind:"method",name:"renderTextareaFooter",privacy:"protected"},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{name:"limitexceeded",type:{text:"CustomEvent"},description:"(React: onLimitExceeded) This event is dispatched once when the character limit exceeds or restored.",reactName:"onLimitExceeded"},{type:{text:"EventConstructor"}},{description:"(React: onInput) This event is dispatched when the value of the textarea field changes (every press).",name:"input",reactName:"onInput"},{description:"(React: onChange) This event is dispatched when the value of the textarea field changes (on blur).",name:"change",reactName:"onChange"},{description:"(React: onFocus) This event is dispatched when the textarea receives focus.",name:"focus",reactName:"onFocus"},{description:"(React: onBlur) This event is dispatched when the textarea loses focus.",name:"blur",reactName:"onBlur"}],attributes:[{name:"placeholder",type:{text:"string | undefined"},description:"The placeholder text that is displayed when the textarea field is empty.",fieldName:"placeholder"},{name:"readonly",type:{text:"boolean"},default:"false",description:"readonly attribute of the textarea field. If true, the textarea field is read-only.",fieldName:"readonly"},{name:"rows",type:{text:"number | undefined"},description:"The rows attribute specifies the visible number of lines in a text area.",default:"5",fieldName:"rows"},{name:"cols",type:{text:"number | undefined"},description:"The cols attribute specifies the visible number of lines in a text area.",default:"40",fieldName:"cols"},{name:"wrap",type:{text:"WrapType"},description:"The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form.",default:"'soft'",fieldName:"wrap"},{name:"autocapitalize",type:{text:"AutoCapitalizeType"},description:"The autocapitalize attribute of the textarea field.",default:"'off'",fieldName:"autocapitalize"},{name:"autocomplete",type:{text:"AutoCompleteType"},description:"The autocomplete attribute of the textarea field.",default:"'off'",fieldName:"autocomplete"},{name:"dirname",type:{text:"string | undefined"},description:'Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).',fieldName:"dirname"},{name:"maxlength",type:{text:"number | undefined"},description:"The maximum number of characters that the textarea field can accept.",fieldName:"maxlength"},{name:"minlength",type:{text:"number | undefined"},description:"The minimum number of characters that the textarea field can accept.",fieldName:"minlength"},{name:"max-character-limit",type:{text:"number | undefined"},description:"maximum character limit for the textarea field for character counter.",fieldName:"maxCharacterLimit"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper"},tagName:"mdc-textarea",jsDoc:`/**
 * mdc-textarea component, which is used to get the multi-line text input from the user.
 * It contains:
 * - label: It is the title of the textarea field.
 * - required: A boolean attribute depicting that the textarea field is required.
 * - Textarea: It is the multi-line text input field.
 * - helper-text: It is the text that provides additional information about the textarea field.
 * - max-character-limit: It is the text that shows the character count of the textarea field.
 * - Error, Warning, Success, Priority Help Text type: It is the text that provides additional information
 *   about the textarea field based on the validation state.
 * - limitexceeded: It is the event that is dispatched when the character limit exceeds or restored.
 *   This event exposes 3 properties:
 *   - currentCharacterCount - the current number of characters in the textarea field,
 *   - maxCharacterLimit - the maximum number of characters allowed in the textarea field,
 *   - value - the current value of the textarea field,
 *
 * **Note**: Consumers must set the help-text-type with 'error' and
 * help-text attribute with the error message using limitexceeded event.
 * The same help-text value will be used for the validation message to be displayed.
 *
 * @tagname mdc-textarea
 *
 * @event input - (React: onInput) This event is dispatched when the value of the textarea field changes (every press).
 * @event change - (React: onChange) This event is dispatched when the value of the textarea field changes (on blur).
 * @event focus - (React: onFocus) This event is dispatched when the textarea receives focus.
 * @event blur - (React: onBlur) This event is dispatched when the textarea loses focus.
 * @event limitexceeded - (React: onLimitExceeded) This event is dispatched once when the character limit
 * exceeds or restored.
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-toggletip
 *
 * @cssproperty --mdc-textarea-disabled-border-color - Border color for the textarea container when disabled
 * @cssproperty --mdc-textarea-disabled-text-color - Text color for the textarea field when disabled
 * @cssproperty --mdc-textarea-disabled-background-color - Background color for the textarea field when disabled
 * @cssproperty --mdc-textarea-text-color - Text color for the textarea field
 * @cssproperty --mdc-textarea-background-color - Background color for the textarea field
 * @cssproperty --mdc-textarea-border-color - Border color for the textarea field
 * @cssproperty --mdc-textarea-text-secondary-normal - Text color for the character counter
 * @cssproperty --mdc-textarea-error-border-color - Border color for the error related help text
 * @cssproperty --mdc-textarea-warning-border-color - Border color for the warning related help text
 * @cssproperty --mdc-textarea-success-border-color - Border color for the success related help text
 * @cssproperty --mdc-textarea-primary-border-color - Border color for the priority related help text
 * @cssproperty --mdc-textarea-hover-background-color - Background color for the textarea container when hover
 * @cssproperty --mdc-textarea-focused-background-color - Background color for the textarea container when focused
 * @cssproperty --mdc-textarea-focused-border-color - Border color for the textarea container when focused
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Textarea",module:"components/textarea/textarea.component.js"}}]},{kind:"javascript-module",path:"components/themeprovider/themeprovider.component.js",declarations:[{kind:"class",description:"ThemeProvider component, which sets the passed in themeclass as class.\nIf the themeclass switches, the existing themeclass will be removed as a class\nand the new themeclass will be added.\n\nCSS variables defined in the themeclass will be used for the styling of child dom nodes.\n\nAvailable Momentum theme classes:\n\n`mds-theme-stable-darkWebex`, `mds-theme-stable-lightWebex`\n\n`mds-theme-stable-darkBronzeWebex`, `mds-theme-stable-lightBronzeWebex`\n\n`mds-theme-stable-darkIndigoWebex`, `mds-theme-stable-lightIndigoWebex`\n\n`mds-theme-stable-darkJadeWebex`, `mds-theme-stable-lightJadeWebex`\n\n`mds-theme-stable-darkLavenderWebex`, `mds-theme-stable-lightLavenderWebex`\n\n`mds-theme-stable-darkRoseWebex`, `mds-theme-stable-lightRoseWebex`\n\nThemeclass context can be be consumed from Lit child components\n(see providerUtils.consume for how to consume)\n\nThemeProvider also includes basic font defaults for text.",name:"ThemeProvider",cssProperties:[{description:"Option to override the default color, default: color-theme-text-primary-normal",name:"--mdc-themeprovider-color-default"},{description:"Option to override the font family, default: `Momentum` (from momentum-design/fonts)",name:"--mdc-themeprovider-font-family"},{description:"Option to override the font weight, default: `400`",name:"--mdc-themeprovider-font-weight"},{description:"Option to override the default letter-spacing, default: `-0.25px` (this is to match the old CiscoSans)",name:"--mdc-themeprovider-letter-spacing-adjustment"},{description:'Option to override the font feature settings, default: `"ss02" on`',name:"--mdc-themeprovider-font-feature-settings"},{description:"Option to override the color of the scrollbar track.",name:"--mdc-themeprovider-scrollbar-track-color"},{description:"Option to override the color of the scrollbar thumb.",name:"--mdc-themeprovider-scrollbar-thumb-color"}],slots:[{description:"children",name:""}],members:[{kind:"field",name:"Context",privacy:"public",static:!0,description:"Context object of the ThemeProvider, to be consumed by child components",readonly:!0},{kind:"field",name:"themeclass",type:{text:"string"},description:`Current theme class

Has to be fully qualified, such that
the theme class matches the class of the respective
theme stylesheet

Default: 'mds-theme-stable-darkWebex'`,attribute:"themeclass"},{kind:"method",name:"updateContext",privacy:"protected",return:{type:{text:"void"}},description:`Update all observing components of this
provider to update the themeclass

Is called on every re-render, see Provider class`},{kind:"method",name:"setThemeInClassList",privacy:"private",description:`Function to update the active theme classnames to update the theme tokens
as CSS variables on the web component.`}],attributes:[{name:"themeclass",type:{text:"string"},description:`Current theme class

Has to be fully qualified, such that
the theme class matches the class of the respective
theme stylesheet

Default: 'mds-theme-stable-darkWebex'`,fieldName:"themeclass"}],superclass:{name:"Provider",module:"/src/models"},tagName:"mdc-themeprovider",jsDoc:`/**
 * ThemeProvider component, which sets the passed in themeclass as class.
 * If the themeclass switches, the existing themeclass will be removed as a class
 * and the new themeclass will be added.
 *
 * CSS variables defined in the themeclass will be used for the styling of child dom nodes.
 *
 * Available Momentum theme classes:
 *
 * \`mds-theme-stable-darkWebex\`, \`mds-theme-stable-lightWebex\`
 *
 * \`mds-theme-stable-darkBronzeWebex\`, \`mds-theme-stable-lightBronzeWebex\`
 *
 * \`mds-theme-stable-darkIndigoWebex\`, \`mds-theme-stable-lightIndigoWebex\`
 *
 * \`mds-theme-stable-darkJadeWebex\`, \`mds-theme-stable-lightJadeWebex\`
 *
 * \`mds-theme-stable-darkLavenderWebex\`, \`mds-theme-stable-lightLavenderWebex\`
 *
 * \`mds-theme-stable-darkRoseWebex\`, \`mds-theme-stable-lightRoseWebex\`
 *
 * Themeclass context can be be consumed from Lit child components
 * (see providerUtils.consume for how to consume)
 *
 * ThemeProvider also includes basic font defaults for text.
 *
 * @tagname mdc-themeprovider
 *
 * @slot - children
 *
 * @cssproperty --mdc-themeprovider-color-default - Option to override the default color,
 * default: color-theme-text-primary-normal
 * @cssproperty --mdc-themeprovider-font-family - Option to override the font family,
 * default: \`Momentum\` (from momentum-design/fonts)
 * @cssproperty --mdc-themeprovider-font-weight - Option to override the font weight, default: \`400\`
 * @cssproperty --mdc-themeprovider-letter-spacing-adjustment - Option to override the default letter-spacing,
 * default: \`-0.25px\` (this is to match the old CiscoSans)
 * @cssproperty --mdc-themeprovider-font-feature-settings - Option to override the font feature settings,
 * default: \`"ss02" on\`
 * @cssproperty --mdc-themeprovider-scrollbar-track-color - Option to override the color of the scrollbar track.
 * @cssproperty --mdc-themeprovider-scrollbar-thumb-color - Option to override the color of the scrollbar thumb.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ThemeProvider",module:"components/themeprovider/themeprovider.component.js"}}]},{kind:"javascript-module",path:"components/toast/toast.component.js",declarations:[{kind:"class",description:'`mdc-toast` is a lightweight, non-blocking alert used to inform users about application processes.\nIt supports success, warning, error, and custom messages, and is designed to be controlled externally.\n\n**Note**: When using `slot="toast-body-normal"` and `slot="toast-body-detailed"`, it\'s strongly recommended to wrap the content with `<mdc-text tagname="span">`.\nIf not used, ensure your custom content is styled appropriately to match the design and alignment expectations of the toast component.',name:"Toast",cssProperties:[{description:"Background color of the toast.",name:"--mdc-toast-background-color"},{description:"Border color of the toast.",name:"--mdc-toast-border-color"},{description:"Color of the header text in the toast.",name:"--mdc-toast-header-text-color"},{description:"Color of the icon in the toast.",name:"--mdc-toast-icon-color"},{description:"Elevation effect applied to the toast.",name:"--mdc-toast-elevation-3"},{description:"Width of the toast.",name:"--mdc-toast-width"},{description:"Padding inside the toast.",name:"--mdc-toast-padding"}],cssParts:[{description:"The container for the toast's main content, including icon, text, and close button.",name:"content-container"},{description:"The icon shown at the start of the toast, styled by variant.",name:"toast-prefix-icon"},{description:"The container for the header and body content of the toast.",name:"toast-content"},{description:"The header text of the toast.",name:"toast-header"},{description:"The container for the toast's footer, including toggle and action buttons.",name:"footer"},{description:"The toggle button for showing/hiding detailed content.",name:"footer-button-toggle"},{description:"The close button for the toast.",name:"toast-close-btn"}],slots:[{description:"Slot for custom content before the icon (only for custom variant).",name:"content-prefix"},{description:"Slot for the main body content of the toast.",name:"toast-body-normal"},{description:"Slot for additional detailed content, shown when expanded.",name:"toast-body-detailed"},{description:"Slot for custom footer content. Prefer using footer-button-primary and footer-button-secondary slots.",name:"footer"},{description:"Slot for passing the primary variant of `mdc-button` in the footer.",name:"footer-button-primary"},{description:"Slot for passing the secondary variant of `mdc-button` in the footer.",name:"footer-button-secondary"}],members:[{kind:"field",name:"variant",type:{text:"ToastVariant"},description:"Type of toast\n- Can be `custom`, `success`, `warning` or `error`.",default:"'custom'",attribute:"variant",reflects:!0},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | undefined"},description:"Defines aria-label attribute for close button accessibility",attribute:"close-button-aria-label"},{kind:"field",name:"headerText",type:{text:"string | undefined"},description:"Defines a string value to display as the title of the toast",attribute:"header-text",reflects:!0},{kind:"field",name:"headerTagName",type:{text:"TagName"},description:"The html tag to be used for the header text",default:"'h2'",attribute:"header-tag-name",reflects:!0},{kind:"field",name:"ariaLabel",type:{text:"string | null"},default:"null",description:"Defines aria-label attribute when header is not used",attribute:"aria-label",reflects:!0},{kind:"field",name:"showMoreText",type:{text:"string | undefined"},description:"Defines the text shown on the linkbutton when detailed content is hidden.",attribute:"show-more-text",reflects:!0},{kind:"field",name:"showLessText",type:{text:"string | undefined"},description:"Defines the text shown on the linkbutton when detailed content is visible.",attribute:"show-less-text",reflects:!0},{kind:"field",name:"isDetailVisible",type:{text:"boolean"},privacy:"private",default:"false"},{kind:"field",name:"hasDetailedSlot",type:{text:"boolean"},privacy:"private",default:"false"},{kind:"field",name:"detailedElements",type:{text:"HTMLElement[]"},privacy:"private"},{kind:"field",name:"hasFooterButtons",type:{text:"string"},privacy:"private",default:"''"},{kind:"method",name:"closeToast",privacy:"private",description:`Fired when Close Button is clicked using mouse or keyboard.
This method dispatches the close event.
It is used to notify that the toast should be closed.`},{kind:"method",name:"toggleDetailVisibility",privacy:"private"},{kind:"method",name:"updateDetailedSlotPresence",privacy:"private"},{kind:"method",name:"updateFooterButtonsPresence",privacy:"private"},{kind:"method",name:"renderIcon",privacy:"protected",parameters:[{name:"iconName",type:{text:"string"}}]},{kind:"method",name:"shouldRenderToggleButton",privacy:"private"},{kind:"method",name:"renderToggleDetailButton",privacy:"private"},{kind:"method",name:"renderHeader",privacy:"protected"},{kind:"method",name:"handleFooterSlot",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"tagname",type:{text:"string"}},{name:"variant",optional:!0,type:{text:"string | undefined"}}]},{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}},inheritedFrom:{name:"FooterMixin",module:"utils/mixins/FooterMixin.js"}}],events:[{description:"(React: onClose) Dispatched when the Close Button is clicked using mouse or keyboard.",name:"close",reactName:"onClose"}],attributes:[{name:"variant",type:{text:"ToastVariant"},description:"Type of toast\n- Can be `custom`, `success`, `warning` or `error`.",default:"'custom'",fieldName:"variant"},{name:"close-button-aria-label",type:{text:"string | undefined"},description:"Defines aria-label attribute for close button accessibility",fieldName:"closeButtonAriaLabel"},{name:"header-text",type:{text:"string | undefined"},description:"Defines a string value to display as the title of the toast",fieldName:"headerText"},{name:"header-tag-name",type:{text:"TagName"},description:"The html tag to be used for the header text",default:"'h2'",fieldName:"headerTagName"},{name:"aria-label",type:{text:"string | null"},default:"null",description:"Defines aria-label attribute when header is not used",fieldName:"ariaLabel"},{name:"show-more-text",type:{text:"string | undefined"},description:"Defines the text shown on the linkbutton when detailed content is hidden.",fieldName:"showMoreText"},{name:"show-less-text",type:{text:"string | undefined"},description:"Defines the text shown on the linkbutton when detailed content is visible.",fieldName:"showLessText"}],mixins:[{name:"FooterMixin",module:"/src/utils/mixins/FooterMixin"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-toast",jsDoc:`/**
 * \`mdc-toast\` is a lightweight, non-blocking alert used to inform users about application processes.
 * It supports success, warning, error, and custom messages, and is designed to be controlled externally.
 * 
 * **Note**: When using \`slot="toast-body-normal"\` and \`slot="toast-body-detailed"\`, it's strongly recommended to wrap the content with \`<mdc-text tagname="span">\`.
 * If not used, ensure your custom content is styled appropriately to match the design and alignment expectations of the toast component.
 * 
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-button
 * @dependency mdc-linkbutton
 *
 * @slot content-prefix - Slot for custom content before the icon (only for custom variant).
 * @slot toast-body-normal - Slot for the main body content of the toast.
 * @slot toast-body-detailed - Slot for additional detailed content, shown when expanded.
 * @slot footer - Slot for custom footer content. Prefer using footer-button-primary and footer-button-secondary slots.
 * @slot footer-button-primary - Slot for passing the primary variant of \`mdc-button\` in the footer.
 * @slot footer-button-secondary - Slot for passing the secondary variant of \`mdc-button\` in the footer.
 *
 * @tagname mdc-toast
 * 
 * @event close - (React: onClose) Dispatched when the Close Button is clicked using mouse or keyboard.
 *
 * @csspart content-container - The container for the toast's main content, including icon, text, and close button.
 * @csspart toast-prefix-icon - The icon shown at the start of the toast, styled by variant.
 * @csspart toast-content - The container for the header and body content of the toast.
 * @csspart toast-header - The header text of the toast.
 * @csspart footer - The container for the toast's footer, including toggle and action buttons.
 * @csspart footer-button-toggle - The toggle button for showing/hiding detailed content.
 * @csspart toast-close-btn - The close button for the toast.
 *
 * @cssproperty --mdc-toast-background-color - Background color of the toast.
 * @cssproperty --mdc-toast-border-color - Border color of the toast.
 * @cssproperty --mdc-toast-header-text-color - Color of the header text in the toast.
 * @cssproperty --mdc-toast-icon-color - Color of the icon in the toast.
 * @cssproperty --mdc-toast-elevation-3 - Elevation effect applied to the toast.
 * @cssproperty --mdc-toast-width - Width of the toast.
 * @cssproperty --mdc-toast-padding - Padding inside the toast.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Toast",module:"components/toast/toast.component.js"}}]},{kind:"javascript-module",path:"components/toggle/toggle.component.js",declarations:[{kind:"class",description:`Toggle Component is an interactive control used to switch between two mutually exclusive options,
such as On/Off, Active/Inactive. These are commonly used in settings panels, forms, and preference selections
where users need to enable or disable a feature.
It contains an optional label and an optional helper text.

To create a group of toggles, use the FormFieldGroup component.

Note: It internally renders a checkbox styled as a toggle switch.`,name:"Toggle",cssProperties:[{description:"Width of the toggle",name:"--mdc-toggle-width"},{description:"Height of the toggle",name:"--mdc-toggle-height"},{description:"Width of the toggle when it's size is compact",name:"--mdc-toggle-width-compact"},{description:"Height of the toggle when it's size is compact",name:"--mdc-toggle-height-compact"},{description:"Line height of the toggle label",name:"--mdc-toggle-label-lineheight"},{description:"Font size of the toggle label",name:"--mdc-toggle-label-fontsize"},{description:"Font weight of the toggle label",name:"--mdc-toggle-label-fontweight"},{description:"Color of the toggle label and help text in disabled state",name:"--mdc-toggle-label-color-disabled"},{description:"Color of the help text label",name:"--mdc-toggle-help-text-color"},{description:"Background color of the active toggle in hover state",name:"--mdc-toggle-active-hover-color"},{description:"Background color of the active toggle in pressed state",name:"--mdc-toggle-active-pressed-color"},{description:"Background color of the inactive toggle in hover state",name:"--mdc-toggle-inactive-hover-color"},{description:"Background color of the inactive toggle in pressed state",name:"--mdc-toggle-inactive-pressed-color"}],members:[{kind:"field",name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the toggle is active or inactive.",attribute:"checked",reflects:!0},{kind:"field",name:"size",type:{text:"ToggleSize"},description:`Determines toggle size in rem (height is specified here).
- **Default**: 1.5
- **Compact**: 1`,default:"default",attribute:"size",reflects:!0},{kind:"method",name:"manageRequired",privacy:"private",description:`Manages the required state of the checkbox.
If the checkbox is not checked and the required property is set, then the checkbox is invalid.
If the validationMessage is set, it will be used as the custom validity message.
If the validationMessage is not set, it will clear the custom validity message.`},{kind:"method",name:"setFormValue",privacy:"private",description:`Updates the form value to reflect the current state of the toggle.
If toggle is switched on, the value is set to either the user-provided value or 'isActive' if no value is provided.
If toggle is switched off, the value is set to null.`},{kind:"method",name:"toggleState",privacy:"private",return:{type:{text:"void"}},description:`Toggles the state of the toggle element.
If the element is not disabled, then the checked property is toggled.`},{kind:"method",name:"handleKeyDown",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:`Handles the keydown event on the toggle element.
When the user presses Enter, the form is submitted.`},{kind:"method",name:"handleChange",privacy:"private",parameters:[{name:"event",type:{text:"Event"}}],description:`Toggles the state of the toggle element.
and dispatch the new change event.`},{kind:"method",name:"setToggleSize",privacy:"private",parameters:[{name:"size",type:{text:"ToggleSize"},description:"The size to set."}],description:`Sets the size attribute for the toggle component.
If the provided size is not included in the TOGGLE_SIZE,
it defaults to the value specified in DEFAULTS.SIZE.`},{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0,inheritedFrom:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"willValidate",readonly:!0,inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}},inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"method",name:"reportValidity",inheritedFrom:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0,inheritedFrom:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}},{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",attribute:"label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,attribute:"required",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpTextType",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",attribute:"help-text-type",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"helpText",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",attribute:"help-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipText",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,attribute:"toggletip-text",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"toggletipPlacement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",attribute:"toggletip-placement",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"field",name:"infoIconAriaLabel",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",attribute:"info-icon-aria-label",reflects:!0,inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabelElement",privacy:"protected",description:`creates the label element when the label property is set.
id is used to link the label with the input field.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpTextIcon",privacy:"protected",description:`creates the helpertext icon based on the helpTextType for validation.
If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelpText",privacy:"protected",description:`creates the helper text component when the helpertext value is set.
It is also used to display the validation message based on the helpTextType.`,return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderLabel",privacy:"protected",description:"renders the mdc-label-text container that contains the label and labelInfoToggleTip.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}},{kind:"method",name:"renderHelperText",privacy:"protected",description:"renders the mdc-help-text container that contains the helpertext icon and helpertext.",return:{type:{text:""}},inheritedFrom:{name:"FormfieldWrapper",module:"components/formfieldwrapper/formfieldwrapper.component.js"}}],events:[{type:{text:"EventConstructor"}},{description:"(React: onChange) Event that gets dispatched when the toggle state changes.",name:"change",reactName:"onChange"},{description:"(React: onFocus) Event that gets dispatched when the toggle receives focus.",name:"focus",reactName:"onFocus"}],attributes:[{name:"checked",type:{text:"boolean"},default:"false",description:"Determines whether the toggle is active or inactive.",fieldName:"checked"},{name:"size",type:{text:"ToggleSize"},description:`Determines toggle size in rem (height is specified here).
- **Default**: 1.5
- **Compact**: 1`,default:"default",fieldName:"size"},{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount",inheritedFrom:{name:"AutoFocusOnMountMixin",module:"src/utils/mixins/AutoFocusOnMountMixin.ts"}},{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage",inheritedFrom:{name:"FormInternalsMixin",module:"src/utils/mixins/FormInternalsMixin.ts"}},{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel",inheritedFrom:{name:"DataAriaLabelMixin",module:"src/utils/mixins/DataAriaLabelMixin.ts"}},{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"label",type:{text:"string | undefined"},description:"The label of the input field. It is linked to the input field using the `for` attribute.",fieldName:"label",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"required",type:{text:"boolean"},default:"false",description:`The required attribute to indicate that the input field is required.
It is used to append a required indicator (*) to the label.`,fieldName:"required",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text-type",type:{text:"ValidationType"},description:"The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.",fieldName:"helpTextType",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"help-text",type:{text:"string | undefined"},description:"The help text that is displayed below the input field.",fieldName:"helpText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-text",type:{text:"string | undefined"},description:`The toggletip text that is displayed when the label is hovered.
It is used to provide additional information about the label.`,fieldName:"toggletipText",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"toggletip-placement",type:{text:"PopoverPlacement"},description:"The placement of the toggletip that is displayed when the info icon is hovered.",default:"'top'",fieldName:"toggletipPlacement",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}},{name:"info-icon-aria-label",type:{text:"string | undefined"},description:"Aria label for the info icon that is displayed next to the label when `toggletipText` is set.\nThis is used for accessibility purposes to provide a description of the icon.",fieldName:"infoIconAriaLabel",inheritedFrom:{name:"FormfieldWrapper",module:"src/components/formfieldwrapper/formfieldwrapper.component.ts"}}],mixins:[{name:"AutoFocusOnMountMixin",module:"/src/utils/mixins/AutoFocusOnMountMixin"},{name:"FormInternalsMixin",module:"/src/utils/mixins/FormInternalsMixin"},{name:"DataAriaLabelMixin",module:"/src/utils/mixins/DataAriaLabelMixin"}],superclass:{name:"FormfieldWrapper",module:"/src/components/formfieldwrapper"},tagName:"mdc-toggle",jsDoc:`/**
 * Toggle Component is an interactive control used to switch between two mutually exclusive options,
 * such as On/Off, Active/Inactive. These are commonly used in settings panels, forms, and preference selections
 * where users need to enable or disable a feature.
 * It contains an optional label and an optional helper text.
 *
 * To create a group of toggles, use the FormFieldGroup component.
 *
 * Note: It internally renders a checkbox styled as a toggle switch.
 *
 * @dependency mdc-button
 * @dependency mdc-icon
 * @dependency mdc-statictoggle
 * @dependency mdc-text
 * @dependency mdc-toggletip
 *
 * @tagname mdc-toggle
 *
 * @event change - (React: onChange) Event that gets dispatched when the toggle state changes.
 * @event focus - (React: onFocus) Event that gets dispatched when the toggle receives focus.
 *
 * @cssproperty --mdc-toggle-width - Width of the toggle
 * @cssproperty --mdc-toggle-height - Height of the toggle
 * @cssproperty --mdc-toggle-width-compact - Width of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-height-compact - Height of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-label-lineheight - Line height of the toggle label
 * @cssproperty --mdc-toggle-label-fontsize - Font size of the toggle label
 * @cssproperty --mdc-toggle-label-fontweight - Font weight of the toggle label
 * @cssproperty --mdc-toggle-label-color-disabled - Color of the toggle label and help text in disabled state
 * @cssproperty --mdc-toggle-help-text-color - Color of the help text label
 * @cssproperty --mdc-toggle-active-hover-color - Background color of the active toggle in hover state
 * @cssproperty --mdc-toggle-active-pressed-color - Background color of the active toggle in pressed state
 * @cssproperty --mdc-toggle-inactive-hover-color - Background color of the inactive toggle in hover state
 * @cssproperty --mdc-toggle-inactive-pressed-color - Background color of the inactive toggle in pressed state
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Toggle",module:"components/toggle/toggle.component.js"}}]},{kind:"javascript-module",path:"components/toggletip/toggletip.component.js",declarations:[{kind:"class",description:`A toggletip is triggered by clicking a trigger element.

It can contain interactive content and can be closed by
clicking outside the toggletip or pressing the escape key.

It can have optional close button to close the toggletip.

Toggletip component uses \`mdc-screenreaderannouncer\` internally to
announce the toggletip text content with screen readers when the toggletip is shown.

\`screenreader-announcer-identity\` attribute can be used to provide ID of an element
in DOM to which announcement elements are added. If not set, a visually hidden
div element is created in DOM to which announcement elements are added.

Please refer to the \`mdc-screenreaderannouncer\` component for more details.`,name:"ToggleTip",cssProperties:[{description:"The maximum width of the toggletip.",name:"--mdc-toggletip-max-width"},{description:"The text color of the toggletip.",name:"--mdc-toggletip-text-color"},{description:"The text color of the toggletip when the color is contrast.",name:"--mdc-toggletip-text-color-contrast"},{description:"radius of the arrow border",name:"--mdc-popover-arrow-border-radius",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border of the arrow",name:"--mdc-popover-arrow-border",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"primary background color of the popover",name:"--mdc-popover-primary-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border color of the popover",name:"--mdc-popover-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted background color of the popover",name:"--mdc-popover-inverted-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted border color of the popover",name:"--mdc-popover-inverted-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted text color of the popover",name:"--mdc-popover-inverted-text-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"elevation of the popover",name:"--mdc-popover-elevation-3",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max width of the popover",name:"--mdc-popover-max-width",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max height of the popover",name:"--mdc-popover-max-height",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],slots:[{description:"Default slot for the toggletip content",name:"",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],members:[{kind:"field",name:"defaultSlotNodes",type:{text:"Array<Node>"},privacy:"private"},{kind:"field",name:"screenreaderAnnouncerIdentity",type:{text:"string | undefined"},description:`Set this attribute with the id of the element in the DOM, to which announcement
elements will be appended.
If an id is provided, the announcement elements will be appended to this element.
If id is not provided, a visually hidden div element will be created in the DOM.

Please refer to the \`mdc-screenreaderannouncer\` component for more details.`,attribute:"screenreader-announcer-identity",reflects:!0},{kind:"field",name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",attribute:"placement",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"getToggleTipText",privacy:"private",return:{type:{text:""}}},{kind:"method",name:"onPlacementUpdated",privacy:"private",return:{type:{text:"void"}},description:`Updates the placement attribute if it is not a valid placement.
Default placement for toggle tip is top.`},{kind:"field",name:"zIndex",type:{text:"number"},description:`IMPLEMENT THIS IN YOUR COMPONENT.

The z-index of the component where the backdrop will be attached to.
The backdrop itself will have a z-index of \`zIndex - 1\`.`,default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"preventScroll",type:{text:"boolean"},privacy:"protected",description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"prevent-scroll",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected",description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"focus-trap",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",attribute:"id",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,attribute:"triggerID",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",attribute:"trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",attribute:"color",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",attribute:"visible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",attribute:"offset",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryRoot",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",attribute:"boundary-root",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryPadding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",attribute:"boundary-padding",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"showArrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",attribute:"show-arrow",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButton",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",attribute:"close-button",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",attribute:"interactive",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",attribute:"delay",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnEscape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",attribute:"hide-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"propagateEventOnEscape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",attribute:"propagate-event-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnBlur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",attribute:"hide-on-blur",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnOutsideClick",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",attribute:"hide-on-outside-click",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusBackToTrigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",attribute:"focus-back-to-trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",attribute:"backdrop",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",attribute:"backdrop-append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",attribute:"is-backdrop-invisible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",attribute:"flip",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",attribute:"size",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"appendTo",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",attribute:"append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",attribute:"close-button-aria-label",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",attribute:"strategy",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",attribute:"role",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,attribute:"aria-labelledby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaDescribedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",attribute:"aria-describedby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"disableAriaExpanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",attribute:"disable-aria-expanded",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"keepConnectedTooltipClosed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,attribute:"keep-connected-tooltip-closed",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"arrowElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"storeConnectedTooltip",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setupTriggerRelatedElement",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cleanupTrigger",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"setupTriggerListeners",privacy:"private",description:`Sets up the trigger related event listeners, based on the trigger type.
Includes fallback for mouseenter trigger to also handle focusin for non-interactive popovers.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeTriggerListeners",privacy:"private",description:"Removes the trigger related event listeners.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeAllListeners",privacy:"private",description:"Removes all event listeners related to the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onOutsidePopoverClick",privacy:"protected",description:"Handles the outside click event to close the popover.",parameters:[{description:"The mouse event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onEscapeKeydown",privacy:"private",description:`Handles the escape keydown event to close the popover.

This method is attached to the document.`,parameters:[{description:"The keyboard event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onPopoverFocusOut",privacy:"private",description:"Handles the popover focus out event.",parameters:[{description:"The focus event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isOpenUpdated",privacy:"protected",parameters:[{name:"oldValue",type:{text:"boolean"},description:"The old value of the visible property."},{name:"newValue",type:{text:"boolean"},description:"The new value of the visible property."}],description:`Handles the popover visibility change and position the popover.
Handles the exit event to close the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseEnter",privacy:"private",description:"Handles mouse enter event on the trigger element.\nThis method sets the `isHovered` flag to true and shows the popover",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseLeave",privacy:"private",description:"Handles mouse leave event on the trigger element.\nThis method sets the `isHovered` flag to false and starts the close delay\ntimer to hide the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusOut",privacy:"private",description:`Handles focus out event on the trigger element.
This method checks if the popover is not hovered and hides the popover.
If the popover is hovered, it will not hide the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusIn",privacy:"private",description:`Handles focus in event on the trigger element.
This method checks if the trigger element has visible focus or is being hovered.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"startCloseDelay",privacy:"private",description:`Starts the close delay timer.
If the popover is not interactive, it will close the popover after the delay.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cancelCloseDelay",privacy:"private",description:"Cancels the close delay timer.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"show",privacy:"public",description:"Shows the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hide",privacy:"public",description:"Hides the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"togglePopoverVisible",privacy:"public",description:"Toggles the popover visibility.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"positionPopover",privacy:"private",description:`Positions the popover based on the trigger element.
It also handles the flip, size and arrow placement.
It uses the floating-ui/dom library to calculate the position.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"findClosestPopover",privacy:"protected",description:`Finds the closest popover to the passed element in the DOM tree.

Useful when need to find the parent popover in a nested popover scenario.`,parameters:[{description:"The element to start searching from.",name:"element"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"utils",default:"new PopoverUtils(this)",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}}],events:[{description:"(React: onShown) This event is dispatched when the toggletip is shown",name:"shown",reactName:"onShown",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onHidden) This event is dispatched when the toggletip is hidden",name:"hidden",reactName:"onHidden",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onCreated) This event is dispatched when the toggletip is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onDestroyed) This event is dispatched when the toggletip is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],attributes:[{name:"screenreader-announcer-identity",type:{text:"string | undefined"},description:`Set this attribute with the id of the element in the DOM, to which announcement
elements will be appended.
If an id is provided, the announcement elements will be appended to this element.
If id is not provided, a visually hidden div element will be created in the DOM.

Please refer to the \`mdc-screenreaderannouncer\` component for more details.`,fieldName:"screenreaderAnnouncerIdentity"},{name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",fieldName:"placement",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",fieldName:"id",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,fieldName:"triggerID",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",fieldName:"trigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",fieldName:"color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",fieldName:"visible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",fieldName:"offset",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-root",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",fieldName:"boundaryRoot",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-padding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",fieldName:"boundaryPadding",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",fieldName:"focusTrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"prevent-scroll",type:{text:"boolean"},description:"Prevent outside scrolling when popover is shown.",default:"false",fieldName:"preventScroll",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"show-arrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",fieldName:"showArrow",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",fieldName:"closeButton",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",fieldName:"interactive",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",fieldName:"delay",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-escape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",fieldName:"hideOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"propagate-event-on-escape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",fieldName:"propagateEventOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-blur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",fieldName:"hideOnBlur",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-outside-click",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",fieldName:"hideOnOutsideClick",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-back-to-trigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",fieldName:"focusBackToTrigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",fieldName:"backdrop",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop-append-to",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",fieldName:"backdropAppendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"is-backdrop-invisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",fieldName:"isBackdropInvisible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",fieldName:"flip",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",fieldName:"size",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"z-index",type:{text:"number"},description:"The z-index of the popover.",default:"1000",fieldName:"zIndex",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"append-to",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",fieldName:"appendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",fieldName:"closeButtonAriaLabel",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",fieldName:"strategy",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",fieldName:"role",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,fieldName:"ariaLabelledby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",fieldName:"ariaDescribedby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"disable-aria-expanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",fieldName:"disableAriaExpanded",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"keep-connected-tooltip-closed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,fieldName:"keepConnectedTooltipClosed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],superclass:{name:"Popover",module:"/src/components/popover/popover.component"},tagName:"mdc-toggletip",jsDoc:`/**
 * A toggletip is triggered by clicking a trigger element.
 *
 * It can contain interactive content and can be closed by
 * clicking outside the toggletip or pressing the escape key.
 *
 * It can have optional close button to close the toggletip.
 *
 * Toggletip component uses \`mdc-screenreaderannouncer\` internally to
 * announce the toggletip text content with screen readers when the toggletip is shown.
 *
 * \`screenreader-announcer-identity\` attribute can be used to provide ID of an element
 * in DOM to which announcement elements are added. If not set, a visually hidden
 * div element is created in DOM to which announcement elements are added.
 *
 * Please refer to the \`mdc-screenreaderannouncer\` component for more details.
 *
 * @dependency mdc-screenreaderannouncer
 * @dependency mdc-button
 *
 * @tagname mdc-toggletip
 *
 * @event shown - (React: onShown) This event is dispatched when the toggletip is shown
 * @event hidden - (React: onHidden) This event is dispatched when the toggletip is hidden
 * @event created - (React: onCreated) This event is dispatched when the toggletip is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched when the toggletip
 * is destroyed (removed from the DOM)
 *
 * @cssproperty --mdc-toggletip-max-width - The maximum width of the toggletip.
 * @cssproperty --mdc-toggletip-text-color - The text color of the toggletip.
 * @cssproperty --mdc-toggletip-text-color-contrast - The text color of the toggletip
 *  when the color is contrast.
 *
 * @slot - Default slot for the toggletip content
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"ToggleTip",module:"components/toggletip/toggletip.component.js"}}]},{kind:"javascript-module",path:"components/tooltip/tooltip.component.js",declarations:[{kind:"class",description:`A tooltip is triggered by mouse hover or by keyboard focus
and will disappear upon mouse exit or focus change.

Note: Tooltips cannot contain content that can be focused or interacted with.`,name:"Tooltip",cssProperties:[{description:"The maximum width of the tooltip.",name:"--mdc-tooltip-max-width"},{description:"The padding of the tooltip.",name:"--mdc-tooltip-padding"},{description:"The text color of the tooltip.",name:"--mdc-tooltip-text-color"},{description:"The text color of the tooltip when the color is contrast.",name:"--mdc-tooltip-text-color-contrast"},{description:"radius of the arrow border",name:"--mdc-popover-arrow-border-radius",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border of the arrow",name:"--mdc-popover-arrow-border",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"primary background color of the popover",name:"--mdc-popover-primary-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"border color of the popover",name:"--mdc-popover-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted background color of the popover",name:"--mdc-popover-inverted-background-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted border color of the popover",name:"--mdc-popover-inverted-border-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"inverted text color of the popover",name:"--mdc-popover-inverted-text-color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"elevation of the popover",name:"--mdc-popover-elevation-3",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max width of the popover",name:"--mdc-popover-max-width",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"max height of the popover",name:"--mdc-popover-max-height",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],members:[{kind:"field",name:"tooltipType",type:{text:"TooltipType"},description:`The type of tooltip.
- **description** sets aria-describedby on the trigger component which refers to the tooltip id.
- **label** sets aria-labelledby on the trigger component which refers to the tooltip id.
- **none** no aria props set on trigger component referring to the tooltip id.`,default:"'description'",attribute:"tooltip-type",reflects:!0},{kind:"field",name:"defaultSlotNodes",type:{text:"Array<Node>"},privacy:"private"},{kind:"method",name:"getTooltipText",privacy:"private",return:{type:{text:""}}},{kind:"method",name:"setTooltipType",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"type",type:{text:"TooltipType"},description:"The type to set."}],description:`Sets the type attribute for the tooltip component.
If the provided type is not included in the TOOLTIP_TYPES,
it defaults to the value specified in DEFAULTS.TOOLTIP_TYPE.`},{kind:"method",name:"onIdUpdated",privacy:"private",return:{type:{text:"Promise<void>"}},description:"Updates the tooltip id if it is empty."},{kind:"method",name:"onPlacementUpdated",privacy:"private",return:{type:{text:"void"}},description:`Updates the placement attribute if it is not a valid placement.
Overriding the default from Popover`},{kind:"method",name:"onTooltipTypeUpdated",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"changedProperties",type:{text:"PropertyValues"},description:"The changed properties."}],description:"Updates the tooltip type attribute and sets the appropriate aria props on the trigger component."},{kind:"field",name:"zIndex",type:{text:"number"},description:`IMPLEMENT THIS IN YOUR COMPONENT.

The z-index of the component where the backdrop will be attached to.
The backdrop itself will have a z-index of \`zIndex - 1\`.`,default:"1000",attribute:"z-index",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"preventScroll",type:{text:"boolean"},privacy:"protected",description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"prevent-scroll",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activatePreventScroll",privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected",description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

IMPLEMENT THIS IN YOUR COMPONENT.`,default:"false",attribute:"focus-trap",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}},inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",attribute:"id",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,attribute:"triggerID",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",attribute:"trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",attribute:"placement",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",attribute:"color",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",attribute:"visible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",attribute:"offset",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",attribute:"boundary",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryRoot",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",attribute:"boundary-root",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"boundaryPadding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",attribute:"boundary-padding",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"showArrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",attribute:"show-arrow",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButton",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",attribute:"close-button",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",attribute:"interactive",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",attribute:"delay",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnEscape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",attribute:"hide-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"propagateEventOnEscape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",attribute:"propagate-event-on-escape",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnBlur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",attribute:"hide-on-blur",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hideOnOutsideClick",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",attribute:"hide-on-outside-click",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"focusBackToTrigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",attribute:"focus-back-to-trigger",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",attribute:"backdrop",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",attribute:"backdrop-append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",attribute:"is-backdrop-invisible",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",attribute:"flip",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",attribute:"size",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"appendTo",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",attribute:"append-to",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"closeButtonAriaLabel",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",attribute:"close-button-aria-label",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",attribute:"strategy",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",attribute:"role",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaLabelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,attribute:"aria-labelledby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"ariaDescribedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",attribute:"aria-describedby",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"disableAriaExpanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",attribute:"disable-aria-expanded",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"keepConnectedTooltipClosed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,attribute:"keep-connected-tooltip-closed",reflects:!0,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"arrowElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"triggerElement",type:{text:"HTMLElement | null"},privacy:"public",default:"null",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"storeConnectedTooltip",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"setupTriggerRelatedElement",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cleanupTrigger",privacy:"private",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"setupTriggerListeners",privacy:"private",description:`Sets up the trigger related event listeners, based on the trigger type.
Includes fallback for mouseenter trigger to also handle focusin for non-interactive popovers.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeTriggerListeners",privacy:"private",description:"Removes the trigger related event listeners.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"removeAllListeners",privacy:"private",description:"Removes all event listeners related to the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onOutsidePopoverClick",privacy:"protected",description:"Handles the outside click event to close the popover.",parameters:[{description:"The mouse event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onEscapeKeydown",privacy:"private",description:`Handles the escape keydown event to close the popover.

This method is attached to the document.`,parameters:[{description:"The keyboard event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"onPopoverFocusOut",privacy:"private",description:"Handles the popover focus out event.",parameters:[{description:"The focus event.",name:"event"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"method",name:"isOpenUpdated",privacy:"protected",parameters:[{name:"oldValue",type:{text:"boolean"},description:"The old value of the visible property."},{name:"newValue",type:{text:"boolean"},description:"The new value of the visible property."}],description:`Handles the popover visibility change and position the popover.
Handles the exit event to close the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseEnter",privacy:"private",description:"Handles mouse enter event on the trigger element.\nThis method sets the `isHovered` flag to true and shows the popover",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleMouseLeave",privacy:"private",description:"Handles mouse leave event on the trigger element.\nThis method sets the `isHovered` flag to false and starts the close delay\ntimer to hide the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusOut",privacy:"private",description:`Handles focus out event on the trigger element.
This method checks if the popover is not hovered and hides the popover.
If the popover is hovered, it will not hide the popover.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"handleFocusIn",privacy:"private",description:`Handles focus in event on the trigger element.
This method checks if the trigger element has visible focus or is being hovered.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"startCloseDelay",privacy:"private",description:`Starts the close delay timer.
If the popover is not interactive, it will close the popover after the delay.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"cancelCloseDelay",privacy:"private",description:"Cancels the close delay timer.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"show",privacy:"public",description:"Shows the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"hide",privacy:"public",description:"Hides the popover.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"togglePopoverVisible",privacy:"public",description:"Toggles the popover visibility.",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"positionPopover",privacy:"private",description:`Positions the popover based on the trigger element.
It also handles the flip, size and arrow placement.
It uses the floating-ui/dom library to calculate the position.`,inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"findClosestPopover",privacy:"protected",description:`Finds the closest popover to the passed element in the DOM tree.

Useful when need to find the parent popover in a nested popover scenario.`,parameters:[{description:"The element to start searching from.",name:"element"}],inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}},{kind:"field",name:"utils",default:"new PopoverUtils(this)",inheritedFrom:{name:"Popover",module:"components/popover/popover.component.js"}}],events:[{description:"(React: onShown) This event is dispatched when the tooltip is shown",name:"shown",reactName:"onShown",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onHidden) This event is dispatched when the tooltip is hidden",name:"hidden",reactName:"onHidden",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onCreated) This event is dispatched when the tooltip is created (added to the DOM)",name:"created",reactName:"onCreated",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{description:"(React: onDestroyed) This event is dispatched when the tooltip is destroyed (removed from the DOM)",name:"destroyed",reactName:"onDestroyed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],attributes:[{name:"tooltip-type",type:{text:"TooltipType"},description:`The type of tooltip.
- **description** sets aria-describedby on the trigger component which refers to the tooltip id.
- **label** sets aria-labelledby on the trigger component which refers to the tooltip id.
- **none** no aria props set on trigger component referring to the tooltip id.`,default:"'description'",fieldName:"tooltipType"},{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"id",type:{text:"string"},default:"''",description:"The unique ID of the popover.",fieldName:"id",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"triggerID",type:{text:"string"},default:"''",description:`The ID of the element that triggers the popover.
This attribute is required for the popover to work.`,fieldName:"triggerID",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"trigger",type:{text:"PopoverTrigger"},description:`Determines the events that cause the Popover to show.
Multiple event names should be separated by spaces.
For example to allow both click and hover, use 'click mouseenter' as the trigger.
- **click**
- **mouseenter**
- **focusin**
- **manual**`,default:"click",fieldName:"trigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"placement",type:{text:"PopoverPlacement"},description:`The placement of the popover.
- **top**
- **top-start**
- **top-end**
- **bottom**
- **bottom-start**
- **bottom-end**
- **left**
- **left-start**
- **left-end**
- **right**
- **right-start**
- **right-end**`,default:"bottom",fieldName:"placement",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"color",type:{text:"PopoverColor"},description:`Color of the popover
- **tonal**
- **contrast**`,default:"tonal",fieldName:"color",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"visible",type:{text:"boolean"},description:"The visibility of the popover.",default:"false",fieldName:"visible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"offset",type:{text:"number"},description:"The offset of the popover.",default:"4",fieldName:"offset",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary",type:{text:"'clippingAncestors' | string"},description:`This describes the clipping element(s) or area that overflow will be checked relative to.
The default is 'clippingAncestors', which are the overflow ancestors which will cause the
element to be clipped.

Possible values:
 - 'clippingAncestors'
 - any css selector`,default:"'clippingAncestors'",fieldName:"boundary",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-root",type:{text:"'viewport' | 'document'"},description:`This describes the root boundary that the element will be checked for overflow relative to.
The default is 'viewport', which is the area of the page the user can see on the screen.

The other string option is 'document', which is the entire page outside the viewport.`,default:"'viewport'",fieldName:"boundaryRoot",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"boundary-padding",type:{text:"number | undefined"},description:`Virtual padding around the boundary to check for overflow.
So the popover will not be placed on top of the edge of the boundary.

Default works well for most cases, but you can set this to customise it when necessary.`,default:"undefined",fieldName:"boundaryPadding",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-trap",type:{text:"boolean"},description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.`,default:"false",fieldName:"focusTrap",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"prevent-scroll",type:{text:"boolean"},description:"Prevent outside scrolling when popover is shown.",default:"false",fieldName:"preventScroll",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"show-arrow",type:{text:"boolean"},description:"The arrow visibility of the popover.",default:"false",fieldName:"showArrow",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button",type:{text:"boolean"},description:"The close button visibility of the popover.",default:"false",fieldName:"closeButton",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"interactive",type:{text:"boolean"},description:`Determines whether the popover is interactive.
Make sure to set focusTrap to true to keep the focus inside the popover in case necessary.
Setting interactive to true will not automatically set focusTrap!`,default:"false",fieldName:"interactive",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"delay",type:{text:"string"},description:"The delay of the show/hide popover.",default:"0,0",fieldName:"delay",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-escape",type:{text:"boolean"},description:"Hide popover on escape key press.",default:"false",fieldName:"hideOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"propagate-event-on-escape",type:{text:"boolean"},description:`Propagates the event, when the escape key is pressed (only when pressed inside the popover)
If true, the escape key press close the popover and will propagate the keydown event.
If false, the escape key press will close the popover but will not propagate the keydown event.
(set to false to prevent the event from bubbling up to the document).

This only works when \`hideOnEscape\` is true.`,default:"false",fieldName:"propagateEventOnEscape",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-blur",type:{text:"boolean"},description:"Hide popover on blur.",default:"false",fieldName:"hideOnBlur",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"hide-on-outside-click",type:{text:"boolean"},description:"Hide on outside click of the popover.",default:"false",fieldName:"hideOnOutsideClick",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"focus-back-to-trigger",type:{text:"boolean"},description:"The focus back to trigger after the popover hide.",default:"false",fieldName:"focusBackToTrigger",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop",type:{text:"boolean"},description:`Determines whether the popover with backdrop.
Other than popover and trigger element, the rest of the screen will be covered with a backdrop.`,default:"false",fieldName:"backdrop",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"backdrop-append-to",type:{text:"string | undefined"},description:"Element ID the backdrop will be a append to (if `backdrop` is true).",default:"''",fieldName:"backdropAppendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"is-backdrop-invisible",type:{text:"boolean | undefined"},description:"Set this property to false to make the backdrop a dimmed visible backdrop (if `backdrop` is true).\nThis is useful for cases where the popovers backdrop should get dimmed.",default:"true - default is to have a invisible backdrop",fieldName:"isBackdropInvisible",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"flip",type:{text:"boolean"},description:"Changes the placement of popover to keep it in view when scrolling.",default:"true",fieldName:"flip",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"size",type:{text:"boolean"},description:"Changes the size of popover to keep it in view when scrolling.",default:"false",fieldName:"size",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"z-index",type:{text:"number"},description:"The z-index of the popover.",default:"1000",fieldName:"zIndex",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"append-to",type:{text:"string | undefined"},description:"Element ID that the popover append to.",default:"''",fieldName:"appendTo",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"close-button-aria-label",type:{text:"string | null"},default:"null",description:"aria-label attribute to be set for close button accessibility.",fieldName:"closeButtonAriaLabel",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"strategy",type:{text:"'absolute' | 'fixed'"},description:`The strategy of the popover.
This determines how the popover is positioned in the DOM.
- **absolute**: The popover is positioned absolutely relative to the nearest positioned ancestor.
- **fixed**: The popover is positioned fixed relative to the viewport.

Default as \`absolute\` is recommended for most cases.
In cases where the popover gets clipped by a scrollable container,
you can set this to \`fixed\` to avoid clipping.`,default:"absolute",fieldName:"strategy",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"role",type:{text:"HTMLElement['role']"},description:"Role of the popover",default:"dialog",fieldName:"role",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-labelledby",type:{text:"string | null"},default:"null",description:`aria-labelledby for an interactive popover only, defaults to the trigger component id.
Used in nested cases where the triggerComponent isn't the actual button.`,fieldName:"ariaLabelledby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"aria-describedby",type:{text:"string | null"},default:"null",description:"aria-describedby of the popover.",fieldName:"ariaDescribedby",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"disable-aria-expanded",type:{text:"boolean"},description:"Disable setting the `aria-expanded` attribute on trigger element.\n\nNote, when `disable-aria-expanded` is true\n - when its value change after first update to\n   - `true`: popover will not remove the `aria-expanded` to avoid conflicts when there are more than one popover\n     registered to the same trigger\n     - `false`: check `aria-expanded` value and update it if necessary.\n - aria-haspopup will be disabled as well",default:"false",fieldName:"disableAriaExpanded",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}},{name:"keep-connected-tooltip-closed",type:{text:"boolean"},description:`If a tooltip is connected to the same trigger element,
this property will keep the connected tooltip closed if this popover is open.
This is useful when you want to show a popover with a tooltip
but you don't want the tooltip to be shown at the same time.`,fieldName:"keepConnectedTooltipClosed",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}],superclass:{name:"Popover",module:"/src/components/popover/popover.component"},tagName:"mdc-tooltip",jsDoc:`/**
 * A tooltip is triggered by mouse hover or by keyboard focus
 * and will disappear upon mouse exit or focus change.
 *
 * Note: Tooltips cannot contain content that can be focused or interacted with.
 *
 * @tagname mdc-tooltip
 *
 * @event shown - (React: onShown) This event is dispatched when the tooltip is shown
 * @event hidden - (React: onHidden) This event is dispatched when the tooltip is hidden
 * @event created - (React: onCreated) This event is dispatched when the tooltip is created (added to the DOM)
 * @event destroyed - (React: onDestroyed) This event is dispatched when the tooltip is destroyed (removed from the DOM)
 *
 * @cssproperty --mdc-tooltip-max-width - The maximum width of the tooltip.
 * @cssproperty --mdc-tooltip-padding - The padding of the tooltip.
 * @cssproperty --mdc-tooltip-text-color - The text color of the tooltip.
 * @cssproperty --mdc-tooltip-text-color-contrast - The text color of the tooltip when the color is contrast.
 *
 */`,customElement:!0,slots:[{description:"Default slot for the popover content",name:"",inheritedFrom:{name:"Popover",module:"src/components/popover/popover.component.ts"}}]}],exports:[{kind:"js",name:"default",declaration:{name:"Tooltip",module:"components/tooltip/tooltip.component.js"}}]},{kind:"javascript-module",path:"components/typewriter/typewriter.component.js",declarations:[{kind:"class",description:`Typewriter component that creates a typewriter effect on text content.
It uses the Text component internally, adding a progressive typing effect.

The \`type\` attribute allows changing the text style (passed to the internal Text component).
The \`tagname\` attribute allows changing the tag name of the text element (passed to the internal Text component).
The default tag name is \`p\`.

The \`speed\` attribute controls typing speed in milliseconds per character:
- 'very-slow' = 240ms per character
- 'slow' = 120ms per character
- 'normal' = 60ms per character (default)
- 'fast' = 20ms per character
- 'very-fast' = 1ms per character
- Or any numeric string representing milliseconds

Advanced features:
- Dynamic speed adjustment during typing
- Chunked text addition via addTextChunk() method
- Instant text addition via addInstantTextChunk() method or instant parameter
- Mixed instant and animated chunks in queue
- Continues typing in background tabs
- Performance optimized for large text
- maxQueueSize to limit memory usage from excessive queuing
- event handling for typing completion and content changes

The component includes accessibility features:
- Screen readers announce the complete text, not character by character
- Uses aria-live="polite" for dynamic content updates
- Sets aria-busy during typing animation`,name:"Typewriter",cssParts:[{description:"Container for the text element",name:"container"},{description:"The text element (forwarded to mdc-text)",name:"text"}],slots:[{description:"Default slot for text content",name:""}],members:[{kind:"field",name:"type",type:{text:"TextType"},privacy:"public",description:`Specifies the text style to be applied to the internal text component.
Uses the same types as the Text component.`,default:"body-large-regular",attribute:"type",reflects:!0},{kind:"field",name:"tagname",type:{text:"TagName | undefined"},privacy:"public",description:`Specifies the HTML tag name for the text element. The default tag name is \`p\`.
This attribute is optional. When set, it changes the tag name of the internal text element.

Acceptable values include all valid tag names from the Text component.`,attribute:"tagname",reflects:!0},{kind:"field",name:"speed",type:{text:"TypewriterSpeed"},privacy:"public",description:`Speed of the typewriter effect in milliseconds per character.
Can be a string preset or a numeric string in milliseconds.
- 'very-slow' = 240ms per character
- 'slow' = 120ms per character
- 'normal' = 60ms per character (default)
- 'fast' = 20ms per character
- 'very-fast' = 1ms per character
- Or any numeric string representing milliseconds (e.g., '100')`,default:"'normal' (60ms per character)",attribute:"speed",reflects:!0},{kind:"field",name:"maxQueueSize",type:{text:"number"},privacy:"public",description:`Maximum number of text chunks that can be queued before oldest chunks are dropped.
Set to prevent memory accumulation from excessive queuing.`,default:"Number.MAX_SAFE_INTEGER (effectively unlimited)",attribute:"max-queue-size",reflects:!0},{kind:"method",name:"createTimeout",privacy:"private",return:{type:{text:"number"}},parameters:[{name:"callback",type:{text:"() => void"}},{name:"delay",type:{text:"number"}}],description:"Helper to create tracked setTimeout that will be cleaned up on disconnect"},{kind:"method",name:"clearAllTimeouts",privacy:"private",return:{type:{text:"void"}},description:"Clear all pending timeouts"},{kind:"method",name:"clearQueue",privacy:"public",return:{type:{text:"void"}},description:`Clears the text chunk queue and stops processing
Useful for resetting the component state`},{kind:"method",name:"addTextChunk",privacy:"public",return:{type:{text:"void"}},parameters:[{name:"text",type:{text:"string"},description:"The text to add"},{name:"speed",optional:!0,type:{text:"TypewriterSpeed"},description:"Optional speed override for this chunk"},{name:"instant",optional:!0,type:{text:"boolean"},description:"If true, text appears instantly without animation"}],description:"Adds a chunk of text to be typed out, optionally with a different speed"},{kind:"method",name:"addInstantTextChunk",privacy:"public",return:{type:{text:"void"}},parameters:[{name:"text",type:{text:"string"},description:"The text to add instantly"}],description:"Adds a chunk of text instantly without typing animation"},{kind:"method",name:"processChunkQueue",privacy:"private",return:{type:{text:"void"}},description:"Processes all chunks in the queue"},{kind:"method",name:"processNextChunk",privacy:"private",return:{type:{text:"void"}},description:"Processes the next chunk in the queue"},{kind:"method",name:"getTypingDelayMs",privacy:"private",return:{type:{text:"number"}},description:"Gets the typing delay in milliseconds per character"},{kind:"method",name:"captureAndProcessContent",privacy:"private",return:{type:{text:"void"}},description:"Captures slot content and starts typewriter animation"},{kind:"method",name:"startTypingAnimation",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"onComplete",optional:!0,type:{text:"() => void"}}],description:"Starts the typewriter animation"},{kind:"method",name:"clearTypingAnimation",privacy:"private",return:{type:{text:"void"}},description:"Clears the typing animation timeout"},{kind:"method",name:"handleSlotChange",privacy:"private",return:{type:{text:"void"}},description:"Handler for slotchange event"}],events:[{type:{text:"CustomEvent"}},{description:"(React: onTypingComplete) Fired when the typewriter finishes typing all content. Detail: \\{ finalContent: string \\}",name:"typing-complete",reactName:"onTypingComplete"},{description:"(React: onChange) Fired when the content of the typewriter changes. Detail: \\{ content: string, isTyping: boolean \\}",name:"change",reactName:"onChange"}],attributes:[{name:"type",type:{text:"TextType"},description:`Specifies the text style to be applied to the internal text component.
Uses the same types as the Text component.`,default:"body-large-regular",fieldName:"type"},{name:"tagname",type:{text:"TagName | undefined"},description:`Specifies the HTML tag name for the text element. The default tag name is \`p\`.
This attribute is optional. When set, it changes the tag name of the internal text element.

Acceptable values include all valid tag names from the Text component.`,fieldName:"tagname"},{name:"speed",type:{text:"TypewriterSpeed"},description:`Speed of the typewriter effect in milliseconds per character.
Can be a string preset or a numeric string in milliseconds.
- 'very-slow' = 240ms per character
- 'slow' = 120ms per character
- 'normal' = 60ms per character (default)
- 'fast' = 20ms per character
- 'very-fast' = 1ms per character
- Or any numeric string representing milliseconds (e.g., '100')`,default:"'normal' (60ms per character)",fieldName:"speed"},{name:"max-queue-size",type:{text:"number"},description:`Maximum number of text chunks that can be queued before oldest chunks are dropped.
Set to prevent memory accumulation from excessive queuing.`,default:"Number.MAX_SAFE_INTEGER (effectively unlimited)",fieldName:"maxQueueSize"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-typewriter",jsDoc:`/**
 * Typewriter component that creates a typewriter effect on text content.
 * It uses the Text component internally, adding a progressive typing effect.
 *
 * The \`type\` attribute allows changing the text style (passed to the internal Text component).
 * The \`tagname\` attribute allows changing the tag name of the text element (passed to the internal Text component).
 * The default tag name is \`p\`.
 *
 * The \`speed\` attribute controls typing speed in milliseconds per character:
 * - 'very-slow' = 240ms per character
 * - 'slow' = 120ms per character
 * - 'normal' = 60ms per character (default)
 * - 'fast' = 20ms per character
 * - 'very-fast' = 1ms per character
 * - Or any numeric string representing milliseconds
 *
 * Advanced features:
 * - Dynamic speed adjustment during typing
 * - Chunked text addition via addTextChunk() method
 * - Instant text addition via addInstantTextChunk() method or instant parameter
 * - Mixed instant and animated chunks in queue
 * - Continues typing in background tabs
 * - Performance optimized for large text
 * - maxQueueSize to limit memory usage from excessive queuing
 * - event handling for typing completion and content changes
 *
 * The component includes accessibility features:
 * - Screen readers announce the complete text, not character by character
 * - Uses aria-live="polite" for dynamic content updates
 * - Sets aria-busy during typing animation
 *
 * @dependency mdc-text
 *
 * @tagname mdc-typewriter
 * @slot - Default slot for text content
 *
 * @csspart container - Container for the text element
 * @csspart text - The text element (forwarded to mdc-text)
 *
 * @event typing-complete - (React: onTypingComplete) Fired when the typewriter finishes typing all content.
 *   Detail: \\{ finalContent: string \\}
 * @event change - (React: onChange) Fired when the content of the typewriter changes.
 *   Detail: \\{ content: string, isTyping: boolean \\}
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"Typewriter",module:"components/typewriter/typewriter.component.js"}}]},{kind:"javascript-module",path:"components/virtualizedlist/virtualizedlist.component.js",declarations:[{kind:"class",description:`\`mdc-virtualizedlist\` component for creating custom virtualized lists.
IMPORTANT: This component does not create it's own list/list items.
Use the setlistdata callback prop to update client state in order to
Pass list/listitems as a child of this component, which this will virtuailze
This implementation handles dynamic lists as well as fixed sized lists.
Please refer to [Tanstack Virtual Docs](https://tanstack.com/virtual/latest) for more in depth documentation.`,name:"VirtualizedList",slots:[{description:"Client side List with nested list items.",name:""}],members:[{kind:"field",name:"virtualizerProps",type:{text:"VirtualizerProps"},description:`Object that sets and updates the virtualizer with any relevant props.
There are two required object props in order to get virtualization to work properly.
count - The length of your list that you are virtualizing.
As your list grows/shrinks, this component must be updated with the appropriate value
(Same with any other updated prop).
estimateSize - A function that returns the estimated size of your items.
If your list is fixed, this will just be the size of your items.
If your list is dynamic, try to return approximate the size of each item.

A full list of possible props can be in
[Tanstack Virtualizer API Docs](https://tanstack.com/virtual/latest/docs/api/virtualizer)`,attribute:"virtualizerprops"},{kind:"field",name:"setlistdata",type:{text:"(({ virtualItems, measureElement, listStyle }: SetListDataProps) => void) | null"},description:`Callback that gets envoked when updates to the virtualizer interally occur.
This must be implemented in such a way that this function will trigger update to parent.

virtualItems - Array that will be what the client displays on screen. Use this to render
a List of your choosing with these items nested inside as your ListItems.
measureElement - Ref to pass to each ListItem rendered client side.
Each ListItem should also be be passed key and a data-index (which can be found on the virtualItem).
listStyle - This should be passed as the style attribute to your List.`,default:"null",attribute:"setlistdata"},{kind:"field",name:"scrollElementRef",type:{text:"Ref<HTMLDivElement>"},privacy:"public"},{kind:"field",name:"virtualizer",type:{text:"Virtualizer<Element, Element> | null"},privacy:"public",default:"null"},{kind:"field",name:"virtualItems",type:{text:"Array<VirtualItem>"},privacy:"public",default:"[]"},{kind:"method",name:"handleScroll",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"event",type:{text:"Event"}}],description:"Refires the scroll event from the internal scroll container to the host element"},{kind:"field",name:"virtualizerController",type:{text:"null"},default:"null"},{kind:"field",name:"onscroll",type:{text:"null"},default:"null"}],events:[{type:{text:"EventConstructor"}},{description:"(React: onScroll) Event that gets called when user scrolls inside of list.",name:"scroll",reactName:"onScroll"}],attributes:[{name:"virtualizerprops",type:{text:"VirtualizerProps"},description:`Object that sets and updates the virtualizer with any relevant props.
There are two required object props in order to get virtualization to work properly.
count - The length of your list that you are virtualizing.
As your list grows/shrinks, this component must be updated with the appropriate value
(Same with any other updated prop).
estimateSize - A function that returns the estimated size of your items.
If your list is fixed, this will just be the size of your items.
If your list is dynamic, try to return approximate the size of each item.

A full list of possible props can be in
[Tanstack Virtualizer API Docs](https://tanstack.com/virtual/latest/docs/api/virtualizer)`,fieldName:"virtualizerProps"},{name:"setlistdata",type:{text:"(({ virtualItems, measureElement, listStyle }: SetListDataProps) => void) | null"},description:`Callback that gets envoked when updates to the virtualizer interally occur.
This must be implemented in such a way that this function will trigger update to parent.

virtualItems - Array that will be what the client displays on screen. Use this to render
a List of your choosing with these items nested inside as your ListItems.
measureElement - Ref to pass to each ListItem rendered client side.
Each ListItem should also be be passed key and a data-index (which can be found on the virtualItem).
listStyle - This should be passed as the style attribute to your List.`,default:"null",fieldName:"setlistdata"}],superclass:{name:"Component",module:"/src/models"},tagName:"mdc-virtualizedlist",jsDoc:`/**
 * \`mdc-virtualizedlist\` component for creating custom virtualized lists.
 * IMPORTANT: This component does not create it's own list/list items.
 * Use the setlistdata callback prop to update client state in order to
 * Pass list/listitems as a child of this component, which this will virtuailze
 * This implementation handles dynamic lists as well as fixed sized lists.
 * Please refer to [Tanstack Virtual Docs](https://tanstack.com/virtual/latest) for more in depth documentation.
 *
 * @tagname mdc-virtualizedlist
 *
 * @event scroll - (React: onScroll) Event that gets called when user scrolls inside of list.
 *
 * @slot - Client side List with nested list items.
 */`,customElement:!0}],exports:[{kind:"js",name:"default",declaration:{name:"VirtualizedList",module:"components/virtualizedlist/virtualizedlist.component.js"}}]},{kind:"javascript-module",path:"utils/mixins/AutoFocusOnMountMixin.js",declarations:[{kind:"class",description:"",name:"AutoFocusOnMountMixinInterface",members:[{kind:"field",name:"autoFocusOnMount",type:{text:"boolean | undefined"}},{kind:"field",name:"elementToAutoFocus",type:{text:"HTMLElement"},privacy:"protected"}]},{kind:"mixin",description:"",name:"AutoFocusOnMountMixin",members:[{kind:"field",name:"autoFocusOnMount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,attribute:"auto-focus-on-mount",reflects:!0}],attributes:[{name:"auto-focus-on-mount",type:{text:"boolean"},default:"false",description:`This property indicates whether the element should receive focus automatically when it is mounted.

It will not focus if the element is re-attached to the DOM after being removed.`,fieldName:"autoFocusOnMount"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"AutoFocusOnMountMixinInterface",declaration:{name:"AutoFocusOnMountMixinInterface",module:"utils/mixins/AutoFocusOnMountMixin.js"}},{kind:"js",name:"AutoFocusOnMountMixin",declaration:{name:"AutoFocusOnMountMixin",module:"utils/mixins/AutoFocusOnMountMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/AvatarComponentMixin.js",declarations:[{kind:"mixin",description:"",name:"AvatarComponentMixin",members:[{kind:"field",name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,attribute:"src"},{kind:"field",name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",attribute:"initials"},{kind:"field",name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",attribute:"presence"},{kind:"field",name:"size",type:{text:"AvatarSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",attribute:"size",reflects:!0},{kind:"field",name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",attribute:"counter"},{kind:"field",name:"isTyping",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",attribute:"is-typing"}],attributes:[{name:"src",type:{text:"string | undefined"},description:`The src is the url which will be used to display the avatar.
When the src is loading, we will display the initials as a placeholder.`,fieldName:"src"},{name:"initials",type:{text:"string | undefined"},description:"The initials to be displayed for the avatar.",fieldName:"initials"},{name:"presence",type:{text:"PresenceType | undefined"},description:"The presence is the status which can be used to display the\nactivity state of a user or a space within an avatar component.\n\nAcceptable values include:\n- `active`\n- `away`\n- `away-calling`\n- `busy`\n- `dnd`\n- `meeting`\n- `on-call`\n- `on-device`\n- `on-mobile`\n- `pause`\n- `pto`\n- `presenting`\n- `quiet`\n- `scheduled`",fieldName:"presence"},{name:"size",type:{text:"AvatarSize"},description:`Acceptable values include (size in px unit):
- 24
- 32
- 48
- 64
- 72
- 88
- 124`,default:"32",fieldName:"size"},{name:"counter",type:{text:"number | undefined"},description:"The counter is the number which can be displayed on the avatar.\nThe maximum number is 99 and if the given number is greater than 99,\nthen the avatar will be displayed as `99+`.\nIf the given number is a negative number,\nthen the avatar will be displayed as `0`.",fieldName:"counter"},{name:"is-typing",type:{text:"boolean"},default:"false",description:"Represents the typing indicator when the user is typing.",fieldName:"isTyping"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"AvatarComponentMixin",declaration:{name:"AvatarComponentMixin",module:"utils/mixins/AvatarComponentMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/BackdropMixin.js",declarations:[{kind:"class",description:"",name:"BackdropMixinInterface",members:[{kind:"field",name:"zIndex",type:{text:"number"}},{kind:"field",name:"backdropElement",type:{text:"HTMLElement | null"},privacy:"protected"},{kind:"field",name:"isBackdropInvisible",type:{text:"boolean | undefined"},privacy:"protected"},{kind:"field",name:"backdropAppendTo",type:{text:"string | undefined"},privacy:"protected"},{kind:"method",name:"createBackdrop",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"classNamePrefix",type:{text:"string"}}]},{kind:"method",name:"removeBackdrop",privacy:"protected",return:{type:{text:"void"}}},{kind:"method",name:"keepElementAboveBackdrop",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"element",optional:!0,type:{text:"HTMLElement | null"}}]},{kind:"method",name:"moveElementBackAfterBackdropRemoval",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"element",optional:!0,type:{text:"HTMLElement | null"}}]}]},{kind:"mixin",description:"",name:"BackdropMixin",members:[{kind:"field",name:"zIndex",type:{text:"number"},description:`IMPLEMENT THIS IN YOUR COMPONENT.

The z-index of the component where the backdrop will be attached to.
The backdrop itself will have a z-index of \`zIndex - 1\`.`}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"BackdropMixinInterface",declaration:{name:"BackdropMixinInterface",module:"utils/mixins/BackdropMixin.js"}},{kind:"js",name:"BackdropMixin",declaration:{name:"BackdropMixin",module:"utils/mixins/BackdropMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/ButtonComponentMixin.js",declarations:[{kind:"class",description:"",name:"ButtonComponentMixinInterface",members:[{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"}},{kind:"field",name:"postfixIcon",type:{text:"IconNames | undefined"}},{kind:"field",name:"variant",type:{text:"ButtonVariant"}},{kind:"field",name:"color",type:{text:"ButtonColor"}},{kind:"field",name:"typeInternal",type:{text:"ButtonTypeInternal"},privacy:"protected"},{kind:"method",name:"setSize",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"size",type:{text:"PillButtonSize | IconButtonSize"}}]},{kind:"method",name:"setVariant",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"variant",type:{text:"ButtonVariant"}}]},{kind:"method",name:"setColor",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"color",type:{text:"ButtonColor"}}]},{kind:"method",name:"inferButtonType",privacy:"protected",return:{type:{text:"void"}}}]},{kind:"mixin",description:"",name:"ButtonComponentMixin",members:[{kind:"field",name:"prefixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,attribute:"prefix-icon",reflects:!0},{kind:"field",name:"postfixIcon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,attribute:"postfix-icon",reflects:!0},{kind:"field",name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",attribute:"variant"},{kind:"field",name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",attribute:"color"},{kind:"method",name:"setVariant",privacy:"protected",parameters:[{name:"variant",type:{text:"ButtonVariant"},description:"The variant to set."}],description:`Sets the variant attribute for the button component.
If the provided variant is not included in the BUTTON_VARIANTS,
it defaults to the value specified in DEFAULTS.VARIANT.`},{kind:"method",name:"setColor",privacy:"protected",parameters:[{name:"color",type:{text:"ButtonColor"},description:"The color to set."}],description:`Sets the color attribute for the button.
Defaults to DEFAULTS.COLOR if invalid or for tertiary button.`},{kind:"method",name:"setSize",privacy:"protected",parameters:[{name:"size",type:{text:"PillButtonSize | IconButtonSize"},description:"The size to set."}],description:`Sets the size attribute for the button component.
Validates the size based on the button type (icon, pill, or tertiary).
Defaults to DEFAULTS.SIZE if invalid.`},{kind:"method",name:"inferButtonType",privacy:"protected",description:"Infers the type of button based on the presence of slot and/or prefix and postfix icons.",parameters:[{description:"default slot of button",name:"slot"}]}],attributes:[{name:"prefix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a prefix.
The icon is displayed on the left side of the button.`,fieldName:"prefixIcon"},{name:"postfix-icon",type:{text:"IconNames | undefined"},description:`The name of the icon to display as a postfix.
The icon is displayed on the right side of the button.`,fieldName:"postfixIcon"},{name:"variant",type:{text:"ButtonVariant"},description:`There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
- **Primary**: Solid background color.
- **Secondary**: Transparent background with a solid border.
- **Tertiary**: No background or border, appears as plain text but retains all button functionalities.`,default:"primary",fieldName:"variant"},{name:"color",type:{text:"ButtonColor"},description:"There are 5 colors for button: positive, negative, accent, promotional, default.",default:"default",fieldName:"color"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"ButtonComponentMixinInterface",declaration:{name:"ButtonComponentMixinInterface",module:"utils/mixins/ButtonComponentMixin.js"}},{kind:"js",name:"ButtonComponentMixin",declaration:{name:"ButtonComponentMixin",module:"utils/mixins/ButtonComponentMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/CardComponentMixin.js",declarations:[{kind:"class",description:"",name:"CardComponentMixinInterface",members:[{kind:"field",name:"cardTitle",type:{text:"string"}},{kind:"field",name:"subtitle",type:{text:"string"}},{kind:"field",name:"imageSrc",type:{text:"string"}},{kind:"field",name:"imageAlt",type:{text:"string"}},{kind:"field",name:"variant",type:{text:"CardVariant"}},{kind:"field",name:"orientation",type:{text:"CardOrientation"}},{kind:"field",name:"titleTagName",type:{text:"TagNameType"}},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"}},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"}},{kind:"field",name:"renderIcon",type:{text:"() => TemplateResult"},privacy:"protected"},{kind:"field",name:"renderImage",type:{text:"() => TemplateResult"},privacy:"protected"},{kind:"field",name:"renderTitle",type:{text:"() => TemplateResult"},privacy:"protected"}]},{kind:"mixin",description:"",name:"CardComponentMixin",members:[{kind:"field",name:"cardTitle",type:{text:"string"},default:"''",description:"The title of the card - part of header section",attribute:"card-title",reflects:!0},{kind:"field",name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",attribute:"subtitle",reflects:!0},{kind:"field",name:"imageSrc",type:{text:"string"},default:"''",description:"The image source URL to render on the card",attribute:"image-src",reflects:!0},{kind:"field",name:"imageAlt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",attribute:"image-alt",reflects:!0},{kind:"field",name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",attribute:"variant",reflects:!0},{kind:"field",name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",attribute:"orientation",reflects:!0},{kind:"field",name:"titleTagName",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"title-tag-name",reflects:!0},{kind:"field",name:"subtitleTagName",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",attribute:"subtitle-tag-name",reflects:!0},{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name",reflects:!0},{kind:"method",name:"renderImage",privacy:"protected",description:"Renders the image on the card if image source is provided",return:{type:{text:""}}},{kind:"method",name:"renderIcon",privacy:"protected",description:"Renders the icon on the card if icon name is provided",return:{type:{text:""}}},{kind:"method",name:"renderTitle",privacy:"protected",description:"Renders the title and subtitle on the card",return:{type:{text:""}}}],attributes:[{name:"card-title",type:{text:"string"},default:"''",description:"The title of the card - part of header section",fieldName:"cardTitle"},{name:"subtitle",type:{text:"string"},default:"''",description:"The subtitle of the card - part of header section",fieldName:"subtitle"},{name:"image-src",type:{text:"string"},default:"''",description:"The image source URL to render on the card",fieldName:"imageSrc"},{name:"image-alt",type:{text:"string"},default:"''",description:"The image alt for accessibility support",fieldName:"imageAlt"},{name:"variant",type:{text:"CardVariant"},description:"The variant of the card. It can either be set to 'border' or 'ghost'",default:"'border'",fieldName:"variant"},{name:"orientation",type:{text:"CardOrientation"},description:"The orientation of the card. It can either be set to 'vertical' or 'horizontal'",default:"'vertical'",fieldName:"orientation"},{name:"title-tag-name",type:{text:"TagNameType"},description:"The tag name for the card title. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"titleTagName"},{name:"subtitle-tag-name",type:{text:"TagNameType"},description:"The tag name for the subtitle. It supports all the types that `mdc-text` supports",default:"'span'",fieldName:"subtitleTagName"},{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"CardComponentMixinInterface",declaration:{name:"CardComponentMixinInterface",module:"utils/mixins/CardComponentMixin.js"}},{kind:"js",name:"CardComponentMixin",declaration:{name:"CardComponentMixin",module:"utils/mixins/CardComponentMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/DataAriaLabelMixin.js",declarations:[{kind:"mixin",description:"",name:"DataAriaLabelMixin",members:[{kind:"field",name:"dataAriaLabel",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,attribute:"data-aria-label",reflects:!0}],attributes:[{name:"data-aria-label",type:{text:"string | null"},default:"null",description:`Defines a string value that labels the current element.
The Aria-Label attribute to be set for accessibility.`,fieldName:"dataAriaLabel"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"DataAriaLabelMixin",declaration:{name:"DataAriaLabelMixin",module:"utils/mixins/DataAriaLabelMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/DisabledMixin.js",declarations:[{kind:"mixin",description:"",name:"DisabledMixin",members:[{kind:"field",name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",attribute:"disabled",reflects:!0}],attributes:[{name:"disabled",type:{text:"boolean | undefined"},description:`Indicates whether the component is disabled.
When the component is disabled for user interaction; it is not focusable or clickable.`,default:"undefined",fieldName:"disabled"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"DisabledMixin",declaration:{name:"DisabledMixin",module:"utils/mixins/DisabledMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/FocusTrapMixin.js",declarations:[{kind:"class",description:"",name:"FocusTrapClassInterface",members:[{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected"},{kind:"method",name:"setInitialFocus",return:{type:{text:"void"}},parameters:[{name:"elementIndexToReceiveFocus",optional:!0,type:{text:"number"}}]},{kind:"method",name:"activateFocusTrap",return:{type:{text:"void"}}},{kind:"method",name:"deactivateFocusTrap",return:{type:{text:"void"}}},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",return:{type:{text:"void"}},parameters:[{name:"isActivated",type:{text:"boolean"}}]}]},{kind:"mixin",description:"",name:"FocusTrapMixin",members:[{kind:"field",name:"focusTrap",type:{text:"boolean"},privacy:"protected",description:`Determines whether the focus trap is enabled.
If true, focus will be restricted to the content within this component.

IMPLEMENT THIS IN YOUR COMPONENT.`},{kind:"field",name:"shouldFocusTrapWrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,attribute:"should-focus-trap-wrap",reflects:!0},{kind:"method",name:"setIsFocusTrapActivated",privacy:"private",parameters:[{name:"isActivated",type:{text:"boolean"}}]},{kind:"method",name:"activateFocusTrap",privacy:"public",description:"Activate the focus trap"},{kind:"method",name:"deactivateFocusTrap",privacy:"public",description:"Deactivate the focus trap."},{kind:"method",name:"hasNoClientRects",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has no client rectangles (not visible in the viewport).",return:{type:{text:""}}},{kind:"method",name:"hasZeroDimensions",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has zero dimensions (width and height are both 0).",return:{type:{text:""}}},{kind:"method",name:"isNotVisible",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Determines if the element is not visible in the DOM.",return:{type:{text:""}}},{kind:"method",name:"hasHiddenStyle",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element has inline styles that make it hidden.",return:{type:{text:""}}},{kind:"method",name:"hasComputedHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden by a computed style.",return:{type:{text:""}}},{kind:"method",name:"isHidden",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is hidden from the user.",return:{type:{text:""}}},{kind:"method",name:"isDisabled",privacy:"private",parameters:[{name:"element",type:{text:"any"},description:"The element to check."}],description:"Checks if the element is disabled.",return:{type:{text:""}}},{kind:"method",name:"isNotTabbable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is not tabbable.",return:{type:{text:""}}},{kind:"method",name:"isInteractiveElement",privacy:"private",return:{type:{text:""}},parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is interactive."},{kind:"method",name:"isFocusable",privacy:"private",parameters:[{name:"element",type:{text:"HTMLElement"},description:"The element to check."}],description:"Checks if the element is focusable.",return:{type:{text:""}}},{kind:"method",name:"findFocusable",privacy:"private",return:{type:{text:""}},parameters:[{name:"root",type:{text:"ShadowRoot | HTMLElement"},description:"The root element to search for focusable elements."},{name:"matches",default:"new Set()",type:{text:"Set<HTMLElement>"},description:"The set of focusable elements."}],description:`Recursively finds all focusable elements within the given root and its descendants.

Make sure this is performant, as it will be called multiple times.`},{kind:"method",name:"setFocusableElements",privacy:"private",description:"Updates the list of focusable elements within the component's shadow root."},{kind:"method",name:"setInitialFocus",privacy:"public",parameters:[{name:"elementIndexToReceiveFocus",default:"0",type:{text:"number"},description:"The index of the preferable element to focus."}],description:"Sets the initial focus within the container."},{kind:"method",name:"calculateNextIndex",privacy:"private",parameters:[{name:"currentIndex",type:{text:"number"},description:"The current index."},{name:"step",type:{text:"number"},description:"The step to calculate the next index."}],description:"Calculates the next index for the focus trap.",return:{type:{text:""}}},{kind:"method",name:"getDeepActiveElement",privacy:"private",description:"Returns the deepest active element in the shadow DOM.",return:{type:{text:""}}},{kind:"method",name:"findElement",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."}],description:"Finds the index of the active element within the focusable elements.",return:{type:{text:""}}},{kind:"method",name:"isEqualFocusNode",privacy:"private",parameters:[{name:"activeElement",type:{text:"HTMLElement"},description:"The active element."},{name:"element",type:{text:"HTMLElement"},description:"The element to compare."}],description:"Checks if the active element is equal to the given element.",return:{type:{text:""}}},{kind:"method",name:"trapFocus",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"}},{description:`The direction of the focus trap.
If true, the focus will be trapped in the previous element.`,name:"direction"}],description:"Traps focus within the container."},{kind:"method",name:"handleTabKeydown",privacy:"private",parameters:[{name:"event",type:{text:"KeyboardEvent"},description:"The keyboard event."}],description:"Traps focus within the container."}],attributes:[{name:"should-focus-trap-wrap",type:{text:"boolean"},default:"true",description:`Determines whether focus should wrap around when reaching the first or last focusable element.
If true, focus will cycle from end to start and vice versa.

This only applies when \`focusTrap\` is true.`,fieldName:"shouldFocusTrapWrap"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"FocusTrapClassInterface",declaration:{name:"FocusTrapClassInterface",module:"utils/mixins/FocusTrapMixin.js"}},{kind:"js",name:"FocusTrapMixin",declaration:{name:"FocusTrapMixin",module:"utils/mixins/FocusTrapMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/FooterMixin.js",declarations:[{kind:"class",description:"",name:"FooterMixinInterface",members:[{kind:"field",name:"footerLink",type:{text:"Array<HTMLElement> | undefined"},privacy:"protected"},{kind:"field",name:"footerButtonPrimary",type:{text:"Array<HTMLElement> | undefined"},privacy:"protected"},{kind:"field",name:"footerButtonSecondary",type:{text:"Array<HTMLElement> | undefined"},privacy:"protected"},{kind:"method",name:"updateFooterButtonColors",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"variant",type:{text:"string"}}]},{kind:"method",name:"handleFooterSlot",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"tagname",type:{text:"string"}},{name:"variant",optional:!0,type:{text:"string"}}]},{kind:"method",name:"renderFooter",privacy:"protected",return:{type:{text:"TemplateResult"}}}]},{kind:"mixin",description:"",name:"FooterMixin",members:[{kind:"method",name:"renderFooter",privacy:"protected",description:`Renders the footer of the card if footer-link,
footer-button-primary, or footer-button-secondary slots are provided`,return:{type:{text:""}}}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"FooterMixinInterface",declaration:{name:"FooterMixinInterface",module:"utils/mixins/FooterMixin.js"}},{kind:"js",name:"FooterMixin",declaration:{name:"FooterMixin",module:"utils/mixins/FooterMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/FormInternalsMixin.js",declarations:[{kind:"class",description:"",name:"FormInternalsMixinInterface",members:[{kind:"field",name:"name",type:{text:"string"}},{kind:"field",name:"value",type:{text:"string"}},{kind:"field",name:"form",type:{text:"HTMLFormElement | null"}},{kind:"field",name:"validity",type:{text:"ValidityState"}},{kind:"field",name:"validationMessage",type:{text:"string"}},{kind:"field",name:"willValidate",type:{text:"boolean"}},{kind:"field",name:"internals",type:{text:"ElementInternals"},privacy:"protected"},{kind:"field",name:"inputElement",type:{text:"HTMLInputElement | HTMLTextAreaElement"},privacy:"protected"},{kind:"method",name:"setValidity",return:{type:{text:"void"}}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}}},{kind:"method",name:"reportValidity",return:{type:{text:"boolean"}}}]},{kind:"mixin",description:"",name:"FormInternalsMixin",members:[{kind:"field",name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,attribute:"name",reflects:!0},{kind:"field",name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",attribute:"value",reflects:!0},{kind:"field",name:"validationMessage",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",attribute:"validation-message",reflects:!0},{kind:"field",name:"validity",type:{text:"ValidityState"},readonly:!0},{kind:"field",name:"willValidate",readonly:!0},{kind:"method",name:"setValidity",description:"Sets the validity of the input field based on the input field's validity.",return:{type:{text:""}}},{kind:"method",name:"checkValidity",return:{type:{text:"boolean"}}},{kind:"method",name:"reportValidity"}],attributes:[{name:"name",type:{text:"string"},default:"''",description:`Indicates the name of the component group.
They are used to group elements in a form together.`,fieldName:"name"},{name:"value",type:{text:"string"},default:"''",description:"Indicates the value of the component group (ex: input, checkbox, radio, select etc...)",fieldName:"value"},{name:"validation-message",type:{text:"string | undefined"},description:"Custom validation message that will override the default message and displayed when the input is invalid.\n\nTo display custom validation messages, you must listen for input events (or other relevant events)\non your component and update the `validationMessage` property with the desired message string.\nUpdating this property will ensure that new validation messages are shown to the user.\n- The `validationMessage` property overrides the default browser validation message when set.\n- Consumers are responsible for updating `validationMessage` in response to input or validation state changes.",fieldName:"validationMessage"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"FormInternalsMixinInterface",declaration:{name:"FormInternalsMixinInterface",module:"utils/mixins/FormInternalsMixin.js"}},{kind:"js",name:"FormInternalsMixin",declaration:{name:"FormInternalsMixin",module:"utils/mixins/FormInternalsMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/IconNameMixin.js",declarations:[{kind:"mixin",description:"",name:"IconNameMixin",members:[{kind:"field",name:"iconName",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",attribute:"icon-name"}],attributes:[{name:"icon-name",type:{text:"IconNames | undefined"},description:"Name of the icon (= filename).\n\nIf no `icon-name` is provided, no icon will be rendered.",fieldName:"iconName"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"IconNameMixin",declaration:{name:"IconNameMixin",module:"utils/mixins/IconNameMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/ItemCollectionMixin.js",declarations:[{kind:"class",description:"",name:"ItemCollectionMixinInterface",members:[{kind:"field",name:"items",type:{text:"TItem[]"},privacy:"public",description:"List of items (cached)",readonly:!0},{kind:"method",name:"isValidItem",privacy:"protected",return:{type:{text:""}},parameters:[{name:"item",type:{text:"Element"},description:"The item to validate."}],description:`Checks if the item is valid.
Invalid items will not be collected or processed.
This method can be overridden by subclasses to define custom validation logic.`},{kind:"method",name:"addItemToCacheAt",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"item",type:{text:"Element"},description:"The item to add to the cache."},{name:"index",optional:!0,type:{text:"number"},description:"The index at which to add the item. If -1, adds to the end."}],description:"Adds an item to the cache at the specified index.\nWhen the index\n is `undefined`, the item is added automatically keeping the DOM order.\n is `-1`, the item is added to the end of the cache.\n is `>= 0`, the item is added at that index.\n otherwise, do nothing."},{kind:"method",name:"removeItemFromCache",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"item",type:{text:"Element"},description:"The item to remove from the cache."}],description:"Removes an item from the cache."},{kind:"method",name:"setItemCache",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"items",optional:!0,type:{text:"TItem[]"},description:"The items to set in the cache."}],description:`Sets the item cache to the provided items.
If no items are provided, it clears the cache.`}]},{kind:"mixin",description:"This mixin collects and cache items based on the `created` and `destroyed` lifecycle events.\nAlso provides methods to manage the item cache.",name:"ItemCollectionMixin",members:[{kind:"field",name:"itemCache",type:{text:"TItem[]"},privacy:"private",default:"[]"},{kind:"field",name:"items",type:{text:"TItem[]"},privacy:"protected",readonly:!0},{kind:"method",name:"itemCreationHandler",privacy:"protected",parameters:[{name:"event",type:{text:"Event"},description:"The event triggered when an item is created."}],description:"Handles the item creation event."},{kind:"method",name:"itemDestroyHandler",privacy:"protected",parameters:[{name:"event",type:{text:"Event"},description:"The event triggered when an item is destroyed."}],description:"Handles the item destroy event."},{kind:"method",name:"isValidItem",privacy:"protected",return:{type:{text:"boolean"}},parameters:[{name:"item",type:{text:"Element"}}]},{kind:"method",name:"addItemToCacheAt",privacy:"protected",parameters:[{name:"newItem",type:{text:"Element"}},{name:"index",optional:!0,type:{text:"number"}}]},{kind:"method",name:"removeItemFromCache",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"item",type:{text:"Element"}}]},{kind:"method",name:"setItemCache",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"items",type:{text:"TItem[]"}}]}],parameters:[{name:"superClass",type:{text:"T"},description:"The class to extend with the mixin."}]}],exports:[{kind:"js",name:"ItemCollectionMixinInterface",declaration:{name:"ItemCollectionMixinInterface",module:"utils/mixins/ItemCollectionMixin.js"}},{kind:"js",name:"ItemCollectionMixin",declaration:{name:"ItemCollectionMixin",module:"utils/mixins/ItemCollectionMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/ListNavigationMixin.js",declarations:[{kind:"class",description:"",name:"ListNavigationMixinInterface",members:[{kind:"field",name:"loop",type:{text:"boolean"},privacy:"protected"},{kind:"field",name:"propagateAllKeyEvents",type:{text:"boolean"},privacy:"protected"},{kind:"method",name:"resetTabIndexes",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"index",type:{text:"number"}}]},{kind:"field",name:"navItems",type:{text:"HTMLElement[]"},privacy:"protected",readonly:!0},{kind:"method",name:"resetTabIndexAndSetFocus",privacy:"protected",return:{type:{text:"void"}},parameters:[{name:"newIndex",type:{text:"number"}},{name:"oldIndex",optional:!0,type:{text:"number"}},{name:"focusNewItem",optional:!0,type:{text:"boolean"}}]}]},{kind:"mixin",description:`This mixin extends the passed class with list like navigation capabilities.

It handles up and down arrow keys, home and end keys to navigate through a list of items.
Key mapping aligned to reading direction (RTL or LTR).`,name:"ListNavigationMixin",members:[{kind:"method",name:"getCurrentIndex",privacy:"private",return:{type:{text:""}},parameters:[{name:"target",type:{text:"EventTarget | null"},description:"The target element that triggered the event."}],description:"Retrieves the current index of the item that triggered the event."},{kind:"method",name:"resetTabIndexes",privacy:"protected",parameters:[{name:"index",type:{text:"number"},description:"The index of the currently focused item."}],description:"Reset all tabindex to -1 and set the tabindex of the current item to 0"},{kind:"method",name:"resetTabIndexAndSetFocus",privacy:"protected",parameters:[{name:"newIndex",type:{text:"number"},description:"The index of the new item to focus."},{name:"oldIndex",optional:!0,type:{text:"number"},description:"The index of the currently focused item."},{name:"focusNewItem",default:"true",description:"Call focus() on the new item or not. It should be false during firstUpdate"}],description:"Resets the tabindex of the currently focused item and sets focus to a new item.",return:{type:{text:""}}},{kind:"method",name:"resolveDirectionKey",privacy:"private",parameters:[{name:"key",type:{text:"string"},description:"The key pressed by the user."},{name:"isRtl",type:{text:"boolean"},description:"A boolean indicating if the layout is right-to-left (RTL)."}],description:`Resolves the key pressed by the user based on the direction of the layout.
This method is used to handle keyboard navigation in a right-to-left (RTL) layout.
It checks if the layout is RTL and adjusts the arrow keys accordingly.
For example, in RTL, the left arrow key behaves like the right arrow key and vice versa.`,return:{type:{text:""}}}],parameters:[{name:"superClass",type:{text:"T"},description:"The class to extend with the mixin."}]}],exports:[{kind:"js",name:"ListNavigationMixinInterface",declaration:{name:"ListNavigationMixinInterface",module:"utils/mixins/ListNavigationMixin.js"}},{kind:"js",name:"ListNavigationMixin",declaration:{name:"ListNavigationMixin",module:"utils/mixins/ListNavigationMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/PreventScrollMixin.js",declarations:[{kind:"class",description:"",name:"PreventScrollMixinInterface",members:[{kind:"field",name:"preventScroll",type:{text:"boolean | undefined"},privacy:"protected"},{kind:"method",name:"activatePreventScroll",privacy:"protected",return:{type:{text:"void"}}},{kind:"method",name:"deactivatePreventScroll",privacy:"protected",return:{type:{text:"void"}}}]},{kind:"mixin",description:"",name:"PreventScrollMixin",members:[{kind:"field",name:"preventScroll",type:{text:"boolean"},privacy:"protected",description:`Prevent outside scrolling when element is shown.

IMPLEMENT THIS IN YOUR COMPONENT.`},{kind:"method",name:"activatePreventScroll",privacy:"protected"},{kind:"method",name:"deactivatePreventScroll",privacy:"protected"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"PreventScrollMixinInterface",declaration:{name:"PreventScrollMixinInterface",module:"utils/mixins/PreventScrollMixin.js"}},{kind:"js",name:"PreventScrollMixin",declaration:{name:"PreventScrollMixin",module:"utils/mixins/PreventScrollMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/TabIndexMixin.js",declarations:[{kind:"mixin",description:"",name:"TabIndexMixin",members:[{kind:"field",name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",attribute:"tabIndex",reflects:!0}],attributes:[{name:"tabIndex",type:{text:"number"},default:"0",description:"This property specifies the tab order of the element.",fieldName:"tabIndex"}],parameters:[{name:"superClass",type:{text:"T"}}]}],exports:[{kind:"js",name:"TabIndexMixin",declaration:{name:"TabIndexMixin",module:"utils/mixins/TabIndexMixin.js"}}]},{kind:"javascript-module",path:"utils/mixins/index.types.js",declarations:[],exports:[]}],w={schemaVersion:g,readme:x,modules:k},p=[{themeclass:"mds-theme-stable-darkWebex",displayName:"darkWebex",className:"dark"},{themeclass:"mds-theme-stable-darkBronzeWebex",displayName:"darkBronzeWebex",className:"darkBronze"},{themeclass:"mds-theme-stable-darkIndigoWebex",displayName:"darkIndigoWebex",className:"darkIndigo"},{themeclass:"mds-theme-stable-darkJadeWebex",displayName:"darkJadeWebex",className:"darkJade"},{themeclass:"mds-theme-stable-darkLavenderWebex",displayName:"darkLavenderWebex",className:"darkLavender"},{themeclass:"mds-theme-stable-darkRoseWebex",displayName:"darkRoseWebex",className:"darkRose"},{themeclass:"mds-theme-stable-lightWebex",displayName:"lightWebex",className:"light"},{themeclass:"mds-theme-stable-lightBronzeWebex",displayName:"lightBronzeWebex",className:"lightBronze"},{themeclass:"mds-theme-stable-lightIndigoWebex",displayName:"lightIndigoWebex",className:"lightIndigo"},{themeclass:"mds-theme-stable-lightJadeWebex",displayName:"lightJadeWebex",className:"lightJade"},{themeclass:"mds-theme-stable-lightLavenderWebex",displayName:"lightLavenderWebex",className:"lightLavender"},{themeclass:"mds-theme-stable-lightRoseWebex",displayName:"lightRoseWebex",className:"lightRose"}],c=(e,n)=>{e.classList.add(n)},T=e=>{const n=document.querySelectorAll("div.docs-story");for(const i of n)i.style.backgroundColor=e},F=(e,n)=>{const i=n.globals.theme,t=p.find(s=>s.displayName===i),o=document.querySelector("body.sb-show-main");return c(o,"bodyOverride"),c(o,"mds-typography"),c(o,"mds-elevation"),T(t.backgroundColor),h` <mdc-themeprovider id="theme-provider" themeclass="${t.themeclass}">
    <div class="backgroundGradient">${e()}</div>
  </mdc-themeprovider>`},I=e=>h` <mdc-iconprovider url="./icons/svg" cache-strategy="in-memory-cache" cache-name="momentum">
    ${e()}
  </mdc-iconprovider>`,M=e=>(n,i)=>{const t=Object.fromEntries(Object.entries(i.args).filter(([r,d])=>e.includes(r)&&d.length>0)),o=`css-property-provider-${i.id}`,s=`
        .${o} ${i.component} {
            ${Object.entries(t).map(([r,d])=>`${r}: ${d} !important;`).join(`
`)}
        }
    `;if(document.getElementById(o)){const r=document.getElementById(o);r.textContent=s}else{const r=document.createElement("style");r.id=o,r.textContent=s,document.head.appendChild(r)}return h`<div class=${o} style="display: contents;">${n()}</div>`},m=[];function N(e){e.cssProperties&&e.cssProperties.forEach(n=>{m.includes(n.name)||m.push(n.name)})}function j(e){const n=i=>i.replace(/-([a-z])/g,t=>t[1].toUpperCase());return e.modules.forEach(i=>{i.declarations.forEach(t=>{var u,f,b,l,v;N(t);const o=(u=t.cssParts)==null?void 0:u.map(a=>({...a,name:`Shadow Part Name: "${a.name}"`})),s=(f=t.events)==null?void 0:f.map(a=>({...a,name:`Event Name: "${a.name}"`})),r=new Set((b=t==null?void 0:t.attributes)==null?void 0:b.map(a=>n(a.name))),d=((v=(l=t.members)==null?void 0:l.filter)==null?void 0:v.call(l,a=>!r.has(a.name)))??[];Object.assign(t,{members:d,cssParts:o,events:s})})}),e}const C=j(w);y(C);const K={parameters:{a11y:{options:{runOnly:{type:"tag",values:["best-practice","wcag2a","wcag2aa","wcag21aa","wcag22aa"]}}},docs:{source:{excludeDecorators:!0}},actions:{argTypesRegex:"^on[A-Z].*"},backgrounds:{disable:!0,grid:{disable:!0}},badgesConfig:{wip:{styles:{backgroundColor:"#30240D",borderColor:"#D6B220",color:"#FFFFFFF2"},title:"Work In Progress",tooltip:{title:"This Component is Work In Progress",desc:"Keep an eye on the Release history for updates or provide feedback."}},stable:{styles:{backgroundColor:"#416116",borderColor:"#93C437",color:"#FFFFFFF2"},title:"Stable",tooltip:{title:"This Component is Stable",desc:"Ready for use."}},internal:{styles:{backgroundColor:"#0D2C3D",borderColor:"#1D9BF0",color:"#FFFFFFF2"},title:"Internal",tooltip:{title:"This Component is Internal",desc:"This component is not intended for direct consumption."}},deprecated:{styles:{backgroundColor:"#4F0E10",borderColor:"#FC8B98",color:"#FFFFFFF2"},title:"Deprecated",tooltip:{title:"This Component is Deprecated",desc:"Check the Release history for more information about deprecation or provide feedback."}}},controls:{disableSaveFromUI:!0,expanded:!0,matchers:{color:/(background|color)$/i,date:/Date$/}},options:{storySort:(e,n)=>globalThis["storybook-multilevel-sort:storySort"](e,n)},direction:"ltr"},decorators:[M(m),F,I],globalTypes:{theme:{description:"Global theme for components",defaultValue:p[0].displayName,toolbar:{title:"Theme",icon:"globe",items:p.map(e=>e.displayName),dynamicTitle:!0}}}};export{K as default};
